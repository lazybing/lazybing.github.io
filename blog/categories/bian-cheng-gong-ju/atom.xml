<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:编程工具 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/bian-cheng-gong-ju/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2018-11-05T07:49:46-08:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[系统内存检测工具Valgrind入门]]></title>
    <link href="http://lazybing.github.io/blog/2017/10/05/how-to-use-valgrind/"/>
    <updated>2017-10-05T19:07:13-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/10/05/how-to-use-valgrind</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#valgrind-" id="markdown-toc-valgrind-">Valgrind 工具简介</a></li>
  <li><a href="#valgrind--1" id="markdown-toc-valgrind--1">Valgrind 前期准备</a></li>
  <li><a href="#valgrind--2" id="markdown-toc-valgrind--2">Valgrind 执行程序</a></li>
  <li><a href="#valgrind--3" id="markdown-toc-valgrind--3">Valgrind 使用示例</a></li>
  <li><a href="#valgrind--4" id="markdown-toc-valgrind--4">Valgrind 内存错误类型</a></li>
  <li><a href="#valgrind--5" id="markdown-toc-valgrind--5">Valgrind 学习参考</a></li>
</ul>

<p><code>Valgrind</code>是一个很好地内存检测工具，本文记录如何开始<code>Valgrind</code>的使用。</p>

<!--more-->

<h2 id="valgrind-">Valgrind 工具简介</h2>

<p><code>Valgrind</code>工具提供了很多<code>Debugging</code>和<code>Profiling</code>工具，来帮助开发者开发出更好快更正确的程序。其中最常用的工具是<code>内存检测</code>。它可以
检测到<code>C/C++</code>中内存相关的错误，这些错误可能会导致系统崩溃<code>Crashes</code>或者其他莫名其妙的行为。</p>

<h2 id="valgrind--1">Valgrind 前期准备</h2>

<p>编译程序时，使用<code>-g</code>选项，用来包含<code>Debugging</code>信息，使得<code>Memcheck</code>工具在检测错误时，给出更具体的信息。如果可以容忍性能的降低，也可以添加<code>-O0</code>编译选择。</p>

<h2 id="valgrind--2">Valgrind 执行程序</h2>

<p>假设执行程序时，使用如下命令：</p>

<p><code>
myprog arg1 arg2
</code></p>

<p>使用<code>Valgrind</code>命令行如下：</p>

<p><code>
valgrind --lead-check=yes myprog arg1 arg2
</code></p>

<p><code>Memcheck</code>是默认的工具，所以<code>--leak-check</code>选项可以省略。使用<code>Valgrind</code>会使得程序变慢，并使用更多的内存，<code>Memcheck</code>
会检测到内存错误、内存泄漏。</p>

<h2 id="valgrind--3">Valgrind 使用示例</h2>

<p>下面是一段<code>C 示例</code>，该段代码内有内存错误和内存泄漏。</p>

<p><figure class='code'><figcaption><span>mem_file.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>    <span class="n">x</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>         <span class="c1">//problem 1: heap block overrun</span>
</span><span class='line'>                        <span class="c1">//problem 2: memory leak -- x not freed</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">f</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>编译该程序</p>

<p><code>
gcc -g -o mem_file mem_file.c
</code></p>

<p>使用<code>valgrind</code>运行该程序:</p>

<p><code>
valgrind --leak-check=full ./mem_file
</code></p>

<p>运行<code>valgring</code>后，输出的<code>Debug</code>信息如下：</p>

<p>```
bing@ubuntu:~/work$ valgrind –leak-check=full ./mem_file <br />
==10566== Memcheck, a memory error detector  <br />
==10566== Copyright (C) 2002-2015, and GNU GPL’d, by Julian Seward et al.<br />
==10566== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info<br />
==10566== Command: ./mem_file<br />
==10566== <br />
==10566== Invalid write of size 4<br />
==10566==    at 0x400544: f (mem_file.c:6)<br />
==10566==    by 0x400555: main (mem_file.c:12)<br />
==10566==  Address 0x5204068 is 0 bytes after a block of size 40 alloc’d<br />
==10566==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)<br />
==10566==    by 0x400537: f (mem_file.c:5)<br />
==10566==    by 0x400555: main (mem_file.c:12)<br />
==10566== <br />
==10566== <br />
==10566== HEAP SUMMARY:<br />
==10566==     in use at exit: 40 bytes in 1 blocks<br />
==10566==   total heap usage: 1 allocs, 0 frees, 40 bytes allocated<br />
==10566== <br />
==10566== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1<br />
==10566==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)<br />
==10566==    by 0x400537: f (mem_file.c:5)<br />
==10566==    by 0x400555: main (mem_file.c:12)<br />
==10566== <br />
==10566== LEAK SUMMARY:<br />
==10566==    definitely lost: 40 bytes in 1 blocks<br />
==10566==    indirectly lost: 0 bytes in 0 blocks<br />
==10566==      possibly lost: 0 bytes in 0 blocks<br />
==10566==    still reachable: 0 bytes in 0 blocks<br />
==10566==         suppressed: 0 bytes in 0 blocks<br />
==10566== <br />
==10566== For counts of detected and suppressed errors, rerun with: -v<br />
==10566== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)</p>

<p>```</p>

<p>大多数<code>valgrind</code>的输出格式就是这样的。</p>

<ul>
  <li><code>10566</code>是进城ID，命令行下，该值不是特别重要。</li>
  <li><code>Invalid write of size 4</code>这一行指示错误类型。</li>
  <li>错误类型后紧跟着的是调用栈，告诉开发者问题出在某个函数的某一行。</li>
  <li><code>0x400544</code>地址，通常不是很重要，但它也会指示问题地址，帮助开发者追踪问题。</li>
  <li>一些错误还会有更多的信息描述内存地址。上面的例子展示了写入内存超出了分配内存块，该内存块是在<code>example.c</code>中的第 5 行分配的。</li>
</ul>

<p>内存泄漏格式如下：</p>

<p>```</p>

<p>==10566==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)  <br />
==10566==    by 0x400537: f (mem_file.c:5)  <br />
==10566==    by 0x400555: main (mem_file.c:12)</p>

<p>```</p>

<p>该调用信息告知开发者泄漏的内存的分配位置。<code>Memcheck</code>不会告知开发者为什么出现内存泄漏。内存的泄漏可以分配两类：</p>

<ul>
  <li><code>definitely lost</code>:程序出现内存泄漏，必须修复。</li>
  <li><code>probably lost</code>:程序出现内存泄漏，只有在开发者使用指针做一些事情时才会发生。</li>
</ul>

<p><code>Memcheck</code>对未初始化变量，同样会有错误提示，通常提示信息为<code>Conditional jump or move depends on uninitialised value(s)</code>。这类错误的<code>roo cause</code>比较难发现，使用<code>--track-origins=yes</code>来获取更多信息。
该选项虽会使<code>Memcheck</code>运行更慢但额外信息会使开发者更容易的找到未初始化变量的位置。</p>

<h2 id="valgrind--4">Valgrind 内存错误类型</h2>

<ul>
  <li>Illegal read/Illegal write errors</li>
  <li>Use of Uninitialised values</li>
  <li>Use of uninitialised or unaddressable values in system calls</li>
  <li>Illegal frees</li>
  <li>When a heap block is freed with an inappropriate deallocation function</li>
  <li>Overlapping source and destination blocks</li>
  <li>Fishy argument values</li>
  <li>Memory leak detection</li>
</ul>

<h2 id="valgrind--5">Valgrind 学习参考</h2>

<p><a href="http://valgrind.org/docs/manual/valgrind_manual.pdf">Valgrind_mannual</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令之sed]]></title>
    <link href="http://lazybing.github.io/blog/2017/10/01/how-to-use-sed/"/>
    <updated>2017-10-01T08:35:06-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/10/01/how-to-use-sed</id>
    <content type="html"><![CDATA[
<p><code>sed</code>是<code>stream editor</code>的简称，它是一种在线编辑器，用于处理一行一行的数据。处理时，首先把待处理的文件内容送到临时缓冲区中，
称为”模式空间”，接着用<code>sed</code>命令处理缓冲区中的内容，处理完成后，把缓冲区中的内容送往屏幕，接着处理下一行，不断重复，直至文件末尾。</p>

<!--more-->

<p>假设有文本文件<code>text</code>，内容如下：</p>

<p><blockquote><p>10 tiny toes<br/>this is that<br/>5 funny 0<br/>one two three<br/>tree twice<br/>new newer<br/>NEW<br/>newer new<br/>NEW new old</p></blockquote></p>

<p>一. 基本用法：</p>

<ul>
  <li>将<code>text</code>文本中每行第一个小写字母<code>t</code>替换为大写字母<code>T</code>.</li>
</ul>

<p><code>
$cat text | sed 's/t/T/'
$sed 's/t/T/' text
</code></p>

<ul>
  <li>将<code>text</code>文本中每行所有的小写字母<code>t</code>替换为大写字母<code>T</code>.</li>
</ul>

<p><code>
$sed 's/t/T/g' text
$sed 's/t/T/g' text &gt; new.txt
$sed -i 's/t/T/g' text
</code></p>

<p>二、与正则表达式结合</p>

<ul>
  <li>如果一行中第一个字符是<code>t</code>，就将它替换为<code>T</code>，其他字符不变。</li>
</ul>

<p><code>
sed 's/^t/T/g' text
</code></p>

<ul>
  <li>如果一行中最后一个字符是<code>t</code>，就将它替换为<code>T</code>，其他字符不变。</li>
</ul>

<p><code>
sed 's/t$/T/g' text
</code></p>

<ul>
  <li>将所有的数字/小写字母、大写字母、所有的字母替换为<code>*</code>。</li>
</ul>

<p><code>
sed 's/[0-9]/*/g' text
sed 's/[a-z]/*/g' text
sed 's/[A-Z]/*/g' text
sed 's/[a-zA-Z]/*/g' text
</code></p>

<p>三、同时替换多个字符串</p>

<p><code>
sed 's/Twice/None/g' text | sed 's/Three/Two/g'
sed 's/Twice/None/g;s/Three/Two/g' text
sed 's/Twice/None/g;s/Three/Two/g;s/funny/tummy/g' text
</code></p>

<p>四、删除最后一个字符串</p>

<p><code>
sed ‘s/\w*//’ text
sed ‘s/\w*.//’ text
sed ‘s/\w*$//’ text
sed ‘s/\w*$/bob/’ text
</code></p>

<p>五、只显示匹配行的结果</p>

<p><code>
sed 's/T/t/g' text
sed -n 's/T/t/g' text
sed -n 's/T/t/pg' text
</code></p>

<p>六、忽略大小写的替换</p>

<p><code>
sed 's/that/bob/g' text
sed 's/that/bob/Ig' text
</code></p>

<p>七、使用脚本文件,</p>

<p><code>
sed -f mysedscript text
</code></p>

<p>其中的<code>mysedscript</code>内容是：
<blockquote><p>s/T/t/g<br/>s/e/E/g<br/>s/\w*.//</p></blockquote></p>

<p>八、只替换完整的一个单词，使用边界符</p>

<p><code>
sed 's/\bnew\b/old/g' text
</code></p>

<p>九、删除匹配行</p>

<p><code>
sed '/new$/D' text
sed '/^new$/D' text
sed '/\bnew\b/D' text
</code></p>

<p>十、 替换文件夹内所有文件内容</p>

<p>如果想要替换某个文件夹下所有文件中的某个字符串，该如何操作呢，此时可以使用<code>sed</code>命令。例如，
替换<code>example_folder</code>文件夹下所有文件中的字符串<code>orig_str</code>，替换为<code>dst_str</code>，此时可以使用<code>sed</code>命令：</p>

<p><code>
sed -i "s/orig_str/dst_str/g" `grep "orig_str" -rl /example_folder`
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令之Grep]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/25/linux-command-grep/"/>
    <updated>2017-08-25T22:46:22-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/25/linux-command-grep</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">语法结构</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">基础应用</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">高阶应用</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">参考文献</a></li>
</ul>

<p>本文主要记录 Linux 中常用命令之一 Grep 的使用方法。
<a href="https://en.wikipedia.org/wiki/Grep">grep</a> 是个命令行工具，它主要用于搜索文件中与规则表达式的纯文本数据相匹配的行。它是<code>globally search a regular expression and print</code>的简写，主要用在类 Unix 系统中。</p>

<!--more-->

<h2 id="section">语法结构</h2>

<blockquote>
  <p>grep [options] PATTERN [FILES…]</p>
</blockquote>

<p>先来总结几个基本的<code>options</code>的作用：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">选项</th>
      <th style="text-align: center">含义</th>
      <th style="text-align: center">示例</th>
      <th style="text-align: center">备注</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">–help</td>
      <td style="text-align: center">显示帮助信息</td>
      <td style="text-align: center">grep –help</td>
      <td style="text-align: center">一般选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-V(–version)</td>
      <td style="text-align: center">显示版本号信息</td>
      <td style="text-align: center">grep -V</td>
      <td style="text-align: center">一般选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-e pattern</td>
      <td style="text-align: center">匹配 pattern 所指的选项，可与<code>-f file</code>一起使用</td>
      <td style="text-align: center">grep -e “abc” -e “def” test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-f file</td>
      <td style="text-align: center">从 file 中获取 pattern，每行</td>
      <td style="text-align: center">grep -f file test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-i(–ignore-case)/-y</td>
      <td style="text-align: center">忽略匹配大小写</td>
      <td style="text-align: center">grep -i “abc” test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-v(–invert-match)</td>
      <td style="text-align: center">不匹配 pattern 中的某行</td>
      <td style="text-align: center">grep -v “abc” test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-w(–word-regexp)</td>
      <td style="text-align: center">只匹配全 pattern 字的行</td>
      <td style="text-align: center">grep -w “abc” test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-x(–line-regexp)</td>
      <td style="text-align: center">匹配全 pattern 行</td>
      <td style="text-align: center">grep -x “abc” test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-c(–count)</td>
      <td style="text-align: center">输出匹配的行数</td>
      <td style="text-align: center">grep -c “abc” test.txt</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-L(–files-without-match)</td>
      <td style="text-align: center">输出没有匹配的文件</td>
      <td style="text-align: center">grep -L “abc” *</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-l(–files-with-matches)</td>
      <td style="text-align: center">输出匹配的文件</td>
      <td style="text-align: center">grep -l “abc” *</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-m num(–max-count=num)</td>
      <td style="text-align: center">输出匹配的前 num 个</td>
      <td style="text-align: center">grep -m 3 “abc” test.txt</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-b(–byte-offset)</td>
      <td style="text-align: center">每行输出匹配字符在文件中的偏移</td>
      <td style="text-align: center">grep -b “abc” test.txt</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-H(–with-filename)</td>
      <td style="text-align: center">输出匹配的文件名</td>
      <td style="text-align: center">grep -H “abc” *</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-h(–no-filenmae)</td>
      <td style="text-align: center">输出不匹配的文件名</td>
      <td style="text-align: center">grep -h “abc” *</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-n(–line-number)</td>
      <td style="text-align: center">输出匹配所在文件的行号</td>
      <td style="text-align: center">grep -n “abc” test.txt</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-A num(–after-context=num)</td>
      <td style="text-align: center">输出匹配行后的 num 行内容</td>
      <td style="text-align: center">grep -A 2 “abc” test.txt</td>
      <td style="text-align: center">输出内容选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-B num(–before-context=num)</td>
      <td style="text-align: center">输出匹配行前的 num 行内容</td>
      <td style="text-align: center">grep -B 2 “abc” test.txt</td>
      <td style="text-align: center">输出内容选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-C num(-num/–context=num)</td>
      <td style="text-align: center">输出匹配行前后 num 行的内容</td>
      <td style="text-align: center">grep -C 2 “abc” test.txt</td>
      <td style="text-align: center">输出内容选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-r(–recursive)</td>
      <td style="text-align: center">递归搜索目录文件，但不搜索链接文件</td>
      <td style="text-align: center">grep -r “abc” ./</td>
      <td style="text-align: center">文件和目录选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-R(–dereference-recursive)</td>
      <td style="text-align: center">递归搜索所有目录文件，包含链接文件</td>
      <td style="text-align: center">grep -R “abc” ./</td>
      <td style="text-align: center">文件和目录选项</td>
    </tr>
  </tbody>
</table>

<p>除了<code>options</code>外，下面记录下<code>PATTERN</code>的使用：</p>

<ul>
  <li><code>.</code> : 匹配一个字符。</li>
  <li><code>?</code> : 最多匹配一个字符。</li>
  <li><code>*</code> : 匹配若干个字符，或者空字符。</li>
  <li><code>^</code> : 指代匹配字符位于一行的最开始。</li>
  <li><code>$</code> : 指代匹配字符位于一行的最末尾。</li>
  <li><code>{num}</code> : 重复匹配 num 次。</li>
  <li><code>{n,}</code> : 重复匹配至少 n 次。</li>
  <li><code>{,m}</code> : 重复匹配最多 m 次。</li>
  <li><code>{n,m}</code> : 重复匹配最少 n 次，最多 m 次。</li>
  <li><code>[   ]</code> : 包含匹配 [] 内的某个字符，如[a-d]代表’abcd’中的某个。</li>
</ul>

<h2 id="section-1">基础应用</h2>

<p>搜索<code>text.txt</code>文件中是否包含<code>abc</code>的字符串，并提示匹配的行号。</p>

<p><code>
grep -n abc text.txt
</code></p>

<p>搜索<code>text.txt</code>文件中不包含<code>abc</code>字符串的行，并显示出来。
<code>
grep -ni abc text.txt
</code></p>

<p>搜索<code>text.txt</code>文件中包含<code>abc</code>字符串的行，不区分大小写，并显示出来。
<code>
grep -nv abc text.txt
</code></p>

<p>搜索包含特殊字符的字符串，并显示出来，如搜索<code>a*b</code>。</p>

<p><code>
grep -f "a*b" text.txt
</code></p>

<p>搜索当前目录下所有文件包含<code>abc</code>字符串的行。</p>

<p><code>
grep -r abc *
</code></p>

<p>搜索包含<code>abc</code>或<code>aabc</code>或<code>aaabc</code>字符串的行。</p>

<p><code>
grep "a\{1,3\}bc" text.txt   
</code></p>

<p>边界表示<code>\b</code>。</p>

<p><code>
grep "\babc" text.txt //搜索起始字段为abc的字符串的行
grep "abc\b" text.txt //搜索结尾字段为abc的字符串的行
grep "\babc\b" text.txt //搜索起始结尾字段为abc的字符串的行，与-w选项相同
</code></p>

<p>搜索多个文件，仅仅输出匹配到的文件名。</p>

<p><code>
grep -l abc *
</code></p>

<h2 id="section-2">高阶应用</h2>

<p>使用<code>grep</code>的 OR/AND/NOT 操作。比如想要搜索某个文件中是否含有<code>abc</code>或<code>def</code>字符串，就会用到 grep 的 OR 操作；想要同时搜索既含有<code>abc</code>又含有<code>def</code>字符串，就会用到 grep 的 AND 操作；想要搜索不包含<code>abc</code>的字符串，就会用到 grep 的 NOT 操作。</p>

<p>OR 操作方法：</p>

<p><code>
grep "abc\|def" text.txt   //or   
grep -E "abc|def" text.txt //or  
egrep "abc|def" text.txt   //or  
grep -e "abc" -e "def" text.txt  //or  
</code></p>

<p>AND 操作方法：</p>

<p><code>
grep -E "pattern1.*pattern2|pattern2.*pattern1" text.txt //and
grep -E "pattern1" text.txt | grep -E "pattern2"  //and
</code></p>

<p>NOT 操作方法：</p>

<p><code>
grep -v "pattern1" text.txt
</code></p>

<h2 id="section-3">参考文献</h2>

<ol>
  <li><a href="https://www.gnu.org/software/grep/manual/grep.html">GNU Grep 3.0 - GNU.org</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Grep">GREP Command Wiki</a></li>
  <li><a href="https://www.computerhope.com/unix/ugrep.htm">Linux grep command</a></li>
</ol>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令之Find]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/25/linux-command-find/"/>
    <updated>2017-08-25T08:39:05-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/25/linux-command-find</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#find-" id="markdown-toc-find-">Find 命令概述</a></li>
  <li><a href="#find--1" id="markdown-toc-find--1">Find 命令示例</a></li>
  <li><a href="#section" id="markdown-toc-section">参考资料</a></li>
</ul>

<p>本文主要记录 Linux 中常用命令之一Find 的使用方法。</p>

<!--more-->

<h2 id="find-">Find 命令概述</h2>

<p>Linux 中的 Find 命令是 Linux 系统中最重要最常用的命令之一。它是用来在指定目录下查找文件的，并对查找到的文件进行处理。它的使用格式如下：</p>

<blockquote>
  <p>$find <指定目录> <指定条件> <指定动作></指定动作></指定条件></指定目录></p>
</blockquote>

<ul>
  <li>指定目录:所要搜索的目录，比如默认为当前目录，或指定特定的目录。</li>
  <li>指定条件:所要搜索的文件特征比如文件名称、文件大小、文件属性等。</li>
  <li>指定动作:对搜索结果进行特定的处理，比如对搜索到的结果删除、将搜索结果放到特定文件中。</li>
</ul>

<p>任何位于参数之前的字符串都被视为搜索目录。
它可以根据不同的命令参数选择不同的搜索方式，常用的参数选项有：</p>

<ul>
  <li>-name <filename>:指定搜索文件名称。</filename></li>
  <li>-type <filetype>:指定搜索文件的类型。</filetype></li>
  <li>-size <filesize>:指定搜索文件的大小。</filesize></li>
  <li>-user <username>:指定特定用户。</username></li>
  <li>-group <groupname>:指定特定组。</groupname></li>
  <li>-maxdepth/mindepth <num>:指定搜索目录级别。</num></li>
  <li>-exec <command />:假设 find 指令的回传值为 TRUE，就执行 command 指令。</li>
</ul>

<h2 id="find--1">Find 命令示例</h2>

<p>查看当前目录及其子目录下的所有文件。</p>

<p><code>
find
</code></p>

<p>根据名字查找文件。</p>

<p><code>
//find [dir-path] -name [filename]
$ find . -name testfile1.txt
$ find /home -name testfile1.txt
</code></p>

<p>查找某种特定类型的文件。</p>

<p><code>
$find . -name "*.txt"
</code></p>

<p>忽视大小写来查找文件。</p>

<p><code>
//find -iname [filename]
$ find -iname testfile1.txt
</code></p>

<p>查找与搜索模式不匹配的文件。</p>

<p><code>
$find . -not -name "*.txt"
$find . ! -name "*.txt"
</code></p>

<p>限定搜索目录级别。</p>

<p><code>
$find . -maxdepth 3 -name "*.txt"
$find . -mindepth 3 -name "*.txt"
$find . -mindepth 2 -maxdepth 4 -name "*.txt"
</code></p>

<p>显示所有的空文件。</p>

<p><code>
$find . -empty
</code></p>

<p>查找某个特定组的文件。</p>

<p><code>
$find . -group bing -name "*.txt"
</code></p>

<p>查找某个特定用户的文件。</p>

<p><code>
$find . -user bing -name "*.txt"
</code></p>

<p>查找最近修改过的文件。</p>

<p><code>
$find . -mmin 1 -name "*.txt"
</code></p>

<p>查找特定类型的文件。</p>

<p><code>
// find -type &lt;filetype&gt;
$find -type d //查找目录文件
</code></p>

<p>查找两种类型的文件。</p>

<p><code>
$find . \( -name a.out -o -name '*.o' -o name 'core' \) -exec rm {} \;
</code></p>

<p>对查找到的文件执行某些命令。</p>

<p><code>
$find $HOME/. -name *.txt -exec head -n 1 -v {} \; &gt; report.txt
</code></p>

<h2 id="section">参考资料</h2>

<ol>
  <li><a href="https://en.wikipedia.org/wiki/Find">Find Command Wiki</a></li>
  <li><a href="http://man7.org/linux/man-pages/man1/find.1.html">Find Command Man Page</a></li>
  <li><a href="https://www.howtoforge.com/tutorial/linux-find-command/">14 Practical Examples of Linux Find Command for Beginners</a></li>
  <li><a href="https://www.ibm.com/developerworks/cn/aix/library/es-unix-find.html">使用 UNIX find 命令的高级技术</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Addr2line 的介绍与使用]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/22/addr2line-use/"/>
    <updated>2016-12-22T07:26:02-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/22/addr2line-use</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#addr2line-" id="markdown-toc-addr2line-">addr2line 简介</a></li>
  <li><a href="#addr2line--1" id="markdown-toc-addr2line--1">addr2line 的使用示例</a></li>
  <li><a href="#addr2line--2" id="markdown-toc-addr2line--2">addr2line 的原理</a></li>
</ul>

<p><code>addr2line</code>的作用是将地址转化为文件名和行号。<br />
<!--more--></p>

<h2 id="addr2line-">addr2line 简介</h2>
<p>在编写程序时，经常会遇到出现程序 crah 的情况，此时如果有 core stack 打印出来还好，但如果没有 core stack 的话，debug 就会比较困难。addr2line 可以很好地解决这个问题。</p>

<p><code>addr2line</code>能够将地址转换为文件名和行号。给定一个可执行文件的地址或者一个可重定位目标的目标偏移，addr2line 就会利用 debug 信息来计算出与该地址关联的文件名和行号。</p>

<p>使用的可执行文件或可重定位目标使用<code>-e</code>选项来指定、可重定位目标的部分使用<code>-j</code>选项来指定。</p>

<p><code>addr2line</code>有两种操作模式：<br />
1. 在命令行下，直接指定十六进制的地址，addr2line 为每个地址显示文件名和行号。<br />
2. addr2line 从标准输入中读取十六进制地址，并且为每个地址输出文件名和行号到标准输出中。</p>

<p>输出格式为<code>FILENAME:LINENO</code>，默认情况下，每个输入地址对应一行输出。</p>

<h2 id="addr2line--1">addr2line 的使用示例</h2>
<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">div</span><span class="p">(</span><span class="kt">int</span> <span class="n">numerator</span><span class="p">,</span> <span class="kt">int</span> <span class="n">denominator</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">numerator</span> <span class="o">/</span> <span class="n">denominator</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numerator</span>   <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">denominator</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">div</span><span class="p">(</span><span class="n">numerator</span><span class="p">,</span> <span class="n">denominator</span><span class="p">);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>编译：gcc -o div -g div.c
生成可执行文件<code>div</code>后，执行该文件：./div 得到如下error:<br />
<code>
Floating point exception (core dumped)
</code></p>

<p>此时并没有任何其他提示信息，我们可以通过<code>dmesg</code>查看信息：<br />
<code>
[ 4709.210137] traps: div[2500] trap divide error ip:400524 sp:7ffcd27fd630 error:0 in div[400000+1000]
</code>
通过该信息可以看出，ip 指向的地址为<code>400524</code>，得到该地址后，我们就可以使用 addr2line 来定位出错的位置。 
<code>addr2line -e div 400524</code> 得到结果如下：<br />
<code>
/home/bing/work/study/div.c:5
</code></p>

<p>可以很直观的显示，该 core  dump 信息是在<code>div.c</code>的 line 5。</p>

<h2 id="addr2line--2">addr2line 的原理</h2>
<p><code>addr2line</code>之所以能够利用可执行文件将地址信息转换为行号，是因为在可执行 ELF 文件中存有这些对应的信息。可以使用<code>readelf</code>来查看这些信息。例如上面的<code>div</code>文件，通过readelf div 可以看到如下信息：
<code>
 Line Number Statements:
  [0x00000026]  Extended opcode 2: set Address to 0x400516
  [0x00000031]  Special opcode 8: advance Address by 0 to 0x400516 and Line by 3 to 4
  [0x00000032]  Special opcode 146: advance Address by 10 to 0x400520 and Line by 1 to 5
  [0x00000033]  Special opcode 104: advance Address by 7 to 0x400527 and Line by 1 to 6
  [0x00000034]  Special opcode 36: advance Address by 2 to 0x400529 and Line by 3 to 9
  [0x00000035]  Special opcode 216: advance Address by 15 to 0x400538 and Line by 1 to 10
  [0x00000036]  Special opcode 104: advance Address by 7 to 0x40053f and Line by 1 to 11
  [0x00000037]  Special opcode 105: advance Address by 7 to 0x400546 and Line by 2 to 13
  [0x00000038]  Special opcode 216: advance Address by 15 to 0x400555 and Line by 1 to 14
  [0x00000039]  Advance PC by 2 to 0x400557
  [0x0000003b]  Extended opcode 1: End of Sequence
</code>
从上面可以看出到 addr 在 0x400520-0x400527之间时，行号为5.</p>

]]></content>
  </entry>
  
</feed>
