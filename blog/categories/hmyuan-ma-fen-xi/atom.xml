<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hm源码分析 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/hmyuan-ma-fen-xi/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2016-09-03T22:08:45-07:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HM 源码分析（一）]]></title>
    <link href="http://lazybing.github.io/blog/2015/10/01/hm-source-code-analyse0/"/>
    <updated>2015-10-01T07:48:51-07:00</updated>
    <id>http://lazybing.github.io/blog/2015/10/01/hm-source-code-analyse0</id>
    <content type="html"><![CDATA[<p>在 HM 的源码分析中，经常会用到读取 syntax 值，此时用到 <code>xReadCode</code> <code>xReadUvlc</code> <code>xReadSvlc</code> <code>xReadFlag</code> 的函数，这篇就主要分析这几个函数的源码。</p>

<!--more-->


<p>对 syntax 的分析，主要是由<code>SyntaxElementParser</code>完成，位于<code>lib\libdecoder\SyntaxElementParser.h</code>中。
<figure class='code'><figcaption><span>syntaxelementparser.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">READ_CODE</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>     <span class="n">xReadCode</span> <span class="p">(</span> <span class="n">length</span><span class="p">,</span> <span class="n">code</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">READ_UVLC</span><span class="p">(</span>        <span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>     <span class="n">xReadUvlc</span> <span class="p">(</span>         <span class="n">code</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">READ_SVLC</span><span class="p">(</span>        <span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>     <span class="n">xReadSvlc</span> <span class="p">(</span>         <span class="n">code</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">READ_FLAG</span><span class="p">(</span>        <span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>     <span class="n">xReadFlag</span> <span class="p">(</span>         <span class="n">code</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">SyntaxElementParser</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="n">TComInputBitstream</span> <span class="o">*</span> <span class="n">m_pcBitstream</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">SyntaxElementParser</span><span class="p">()</span>
</span><span class='line'><span class="o">:</span> <span class="n">m_pcBitstream</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'><span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">virtual</span> <span class="o">~</span><span class="n">SyntaxElementParser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">xReadCode</span><span class="p">(</span><span class="n">UInt</span> <span class="n">length</span><span class="p">,</span> <span class="n">UInt</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">xReadUvlc</span><span class="p">(</span><span class="n">UInt</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">xReadSvlc</span><span class="p">(</span><span class="n">UInt</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">xReadFlag</span><span class="p">(</span><span class="n">UInt</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setBitstream</span><span class="p">(</span><span class="n">TComInputBitstream</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span> <span class="n">m_pcBitstream</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">TComInputBitstream</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">getBitstream</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_pcBitstream</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>其实读取 syntax 值的这几个函数，主要是 SPEC 中第 9 部分的代码实现。这几个函数共同调用了<code>Read</code>函数。
```
  m_numBitsRead += uiNumberOfBits;</p>

<p>  /<em> NB, bits are extracted from the MSB of each byte. </em>/
  UInt retval = 0;
  if (uiNumberOfBits &lt;= m_num_held_bits)
  {
    /<em> n=1, len(H)=7:   -VHH HHHH, shift_down=6, mask=0xfe
     * n=3, len(H)=7:   -VVV HHHH, shift_down=4, mask=0xf8
     </em>/
    retval = m_held_bits >> (m_num_held_bits - uiNumberOfBits);
    retval &amp;= ~(0xff &lt;&lt; uiNumberOfBits);
    m_num_held_bits -= uiNumberOfBits;
    ruiBits = retval;
    return;
  }</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
