<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hm源码分析 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/hmyuan-ma-fen-xi/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2016-09-03T21:59:18-07:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HM 源码分析（一）]]></title>
    <link href="http://lazybing.github.io/blog/2015/10/01/hm-source-code-analyse0/"/>
    <updated>2015-10-01T07:48:51-07:00</updated>
    <id>http://lazybing.github.io/blog/2015/10/01/hm-source-code-analyse0</id>
    <content type="html"><![CDATA[<p>在 HM 的源码分析中，经常会用到读取 syntax 值，此时用到 <code>xReadCode</code> <code>xReadUvlc</code> <code>xReadSvlc</code> <code>xReadFlag</code> 的函数，这篇就主要分析这几个函数的源码。</p>

<!--more-->


<p>对 syntax 的分析，主要是由<code>SyntaxElementParser</code>完成，位于<code>lib\libdecoder\SyntaxElementParser.h</code>中。
{% codeblock [lang:C++] syntaxelementparser.h}</p>

<h1>define READ_CODE(length, code, name)     xReadCode ( length, code )</h1>

<h1>define READ_UVLC(        code, name)     xReadUvlc (         code )</h1>

<h1>define READ_SVLC(        code, name)     xReadSvlc (         code )</h1>

<h1>define READ_FLAG(        code, name)     xReadFlag (         code )</h1>

<p>class SyntaxElementParser
{
protected:
    TComInputBitstream * m_pcBitstream;</p>

<pre><code>SyntaxElementParser()
: m_pcBitstream(NULL)
{};

virtual ~SyntaxElementParser();

void xReadCode(UInt length, UInt&amp; val);
void xReadUvlc(UInt&amp; val);
void xReadSvlc(UInt&amp; val);
void xReadFlag(UInt&amp; val);
</code></pre>

<p>public:
    void setBitstream(TComInputBitstream<em> p) { m_pcBitstream = p; }
    TComInputBitstream</em> getBitstream() { return m_pcBitstream; }
}
{% endcodeblock %}</p>

<p>其实读取 syntax 值的这几个函数，主要是 SPEC 中第 9 部分的代码实现。这几个函数共同调用了<code>Read</code>函数。
```
  m_numBitsRead += uiNumberOfBits;</p>

<p>  /<em> NB, bits are extracted from the MSB of each byte. </em>/
  UInt retval = 0;
  if (uiNumberOfBits &lt;= m_num_held_bits)
  {
    /<em> n=1, len(H)=7:   -VHH HHHH, shift_down=6, mask=0xfe
     * n=3, len(H)=7:   -VVV HHHH, shift_down=4, mask=0xf8
     </em>/
    retval = m_held_bits >> (m_num_held_bits - uiNumberOfBits);
    retval &amp;= ~(0xff &lt;&lt; uiNumberOfBits);
    m_num_held_bits -= uiNumberOfBits;
    ruiBits = retval;
    return;
  }</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
