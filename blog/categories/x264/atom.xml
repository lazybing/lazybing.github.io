<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:x264 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/x264/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2017-11-12T08:17:28-08:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[X264源码解析之X264_bitstream_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/11/12/bitstream-init/"/>
    <updated>2017-11-12T06:48:31-08:00</updated>
    <id>http://lazybing.github.io/blog/2017/11/12/bitstream-init</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#h264-spec-annex-b" id="markdown-toc-h264-spec-annex-b">H264 SPEC Annex B</a></li>
</ul>

<p>本文主要记录 X264 中对于 bitstream 的处理方法，它主要实现 SPEC 中<code>Annex B:Byte stream format</code>中的规定。
<!--more--></p>

<h2 id="h264-spec-annex-b">H264 SPEC Annex B</h2>

<p>首先看一下，H264 的 SPEC 中关于 Bitstream 中的规定。</p>

<p><figure class='code'><figcaption><span>AnndexB </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">byte_stream_nal_unit</span><span class="p">(</span><span class="n">NumBytesInNALunit</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">next_bits</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x000001</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>          <span class="n">next_bits</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x00000001</span><span class="p">)</span>
</span><span class='line'>        <span class="n">leading_zero_8bits</span> <span class="c1">//equal to 0x00 f(8)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="n">next_bits</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x000001</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zero_byte</span>  <span class="c1">//equal to 0x00 f(8)</span>
</span><span class='line'>
</span><span class='line'><span class="n">start_code_prefix_one_3bytes</span> <span class="c1">//equal to 0x000001 f(24)</span>
</span><span class='line'>
</span><span class='line'><span class="n">nal_unit</span><span class="p">(</span><span class="n">NumBytesInNALunit</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">more_data_in_byte_stream</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">next_bits</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x000001</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">next_bits</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x00000001</span><span class="p">)</span>
</span><span class='line'>    <span class="n">trailing_zero_8bits</span> <span class="c1">//equal to 0x00 f(8) } </span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>SPEC 中定义的解码的部分，因为我们根据上面的描述，可以理出 H264 的大致解析过程：</p>

<ol>
  <li>解码过程开始时，解码器把其当前的位置初始化为字节流的起始位置。然后提取，并丢弃每一个<code>leading_zero_8bits</code>语法元素(如果存在的话)，移动当前位置至某一时刻的字节处，直到比特流的当前位置紧接的四个字节为四字节序列<code>0x00000001</code>。</li>
  <li>当字节流里的紧接的四个字节构成四字节序列<code>0x00000001</code>，对比特流中下一个字节(为 zero_byte 语法元素)进行提取并丢弃时，字节流的当前位置设为紧接被丢弃的字节的字节位置。</li>
  <li>提取与丢弃比特流中下一个三字节序列(为 start_code_prefix_one_3bytes)，且比特流当前位置设为此紧接被丢弃的 3 字节序列的字节的位置。</li>
  <li>NumBytesInNALunit 设为自当前字节位置起至下述条件前的位置的最后一个字节，且包括最后一个字节的编号。
&gt; a. 一个三字节序列的排列等于<code>0x000000</code>，或
&gt; b. 字一个三字节序列的排列等于<code>0x000001</code>，或
&gt; c. 字节流的结束，由未规定的方式判决。</li>
  <li>NumBytesInNALunit 字节从比特流中移除，字节流的当前位置前移 NumBytesInNALunit 字节。这个字节序列为 <code>nal_unit(NumBytesInNALunit)</code>,并用 NAL 单元解码过程进行解码。</li>
  <li>当字节流中的当前位置不为字节流的结尾(由未规定的方式判决)，且字节流中的下一个字节不是等于<code>0x000001</code>开始的三字节序列，也不是等于<code>0x00000001</code>开始的四字节序列。解码器提取并丢弃每一个<code>trailing_zero_8bits</code>语法元素，移动字节流中的当前位置到某一时刻的一个字节处，直到字节流里的当前位置接下来的四个字节构成四字节的序列<code>0x00000001</code>或已至字节流的结尾(由未规定的当时判决)。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之参考帧]]></title>
    <link href="http://lazybing.github.io/blog/2017/10/19/reference-frame/"/>
    <updated>2017-10-19T07:53:49-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/10/19/reference-frame</id>
    <content type="html"><![CDATA[
<p>本篇博客主要记录<code>X264</code>中关于参考帧管理。</p>

<!--more-->

<p><code>X264</code>中的帧可以大致分为以下几类：参考帧(ference frame)、当前编码帧(current frame)、未使用帧(unused frame)等。对帧的管理操作
的基本操作由两种：从队列中获取帧(<code>x264_frame_pop</code>)、向队列中添加帧(<code>x264_frame_push_unused</code>)。</p>

<p>关于帧队列的管理是通过数组来的，下面先介绍最基本的帧队列的一些基本操作。</p>

<p>首先将<code>frame</code>帧插入到<code>list</code>队列中，实现代码如下：</p>

<p><figure class='code'><figcaption><span>x264_frame_push </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">x264_frame_push</span><span class="p">(</span><span class="kt">x264_frame_t</span> <span class="o">**</span><span class="n">list</span><span class="p">,</span> <span class="kt">x264_frame_t</span> <span class="o">*</span><span class="n">frame</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>从<code>list</code>队列中获取<code>frame</code>帧，实现代码如下：</p>

<p><figure class='code'><figcaption><span>x264_frame_pop </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">x264_frame_t</span> <span class="o">*</span><span class="nf">x264_frame_pop</span><span class="p">(</span> <span class="kt">x264_frame_t</span> <span class="o">**</span><span class="n">list</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">x264_frame_t</span> <span class="o">*</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span> <span class="n">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>当编码帧类型为<code>IDR</code>帧时，需要重置整个参考帧队列，<code>X264</code>中重置参考队列是通过<code>x264_reference_reset</code>函数完成，实现过程即为将<code>reference</code>队列
所有的参考帧设置为<code>unused</code>队列中的<code>unused</code>帧；实现代码如下：</p>

<p><figure class='code'><figcaption><span>x264_reference_reset </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">x264_reference_reset</span><span class="p">(</span> <span class="kt">x264_t</span> <span class="o">*</span><span class="n">h</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">frames</span><span class="p">.</span><span class="n">reference</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">x264_frame_push_unused</span><span class="p">(</span> <span class="n">h</span><span class="p">,</span> <span class="n">x264_frame_pop</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">frames</span><span class="p">.</span><span class="n">reference</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdec</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_poc</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fenc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_poc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之判断帧类型]]></title>
    <link href="http://lazybing.github.io/blog/2017/10/11/x264-slicetype-decide/"/>
    <updated>2017-10-11T08:59:17-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/10/11/x264-slicetype-decide</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[视频编解码算法之编码]]></title>
    <link href="http://lazybing.github.io/blog/2017/09/12/video-coding/"/>
    <updated>2017-09-12T07:34:26-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/09/12/video-coding</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#exp-golomb-" id="markdown-toc-exp-golomb-">Exp-Golomb 哥伦布编码</a></li>
  <li><a href="#cavlc-" id="markdown-toc-cavlc-">CAVLC 基于上下文自适应的可变长编码</a></li>
  <li><a href="#cabac-" id="markdown-toc-cabac-">CABAC 基于上下文的自适应二进制算术熵编码</a></li>
  <li><a href="#section" id="markdown-toc-section">参考文献</a></li>
</ul>

<p>本文记录<code>H.264</code>编解码器使用到的编码算法，包括<code>Exp-Golomb(哥伦布编码)</code>、<code>CAVLC(基于上下文自适应的可变长编码)</code>、<code>CABAC(基于上下文的自适应二进制算术熵编码)</code>。<br />
<!--more--></p>

<p>H264 编码格式的码流包含许多编码符合，这些编码符号包括各种<code>syntax</code>、参数、预测类型、不同编码的运动矢量、转换系数等等。H264/AVC 标准
有多种编码方法：</p>

<ul>
  <li>Fixed length code(定长编码):符号被转换成特定长度(n bits)的二进制码字。</li>
  <li>Exponential-Golomb variable length code(哥伦布变长编码):符号被编码成哥伦布码字，通常越短的哥伦布码字用于表示大概率出现的符号。</li>
  <li>CAVLC(基于上下文自适应的可变长编码):</li>
  <li>CABAC(基于上下文的自适应二进制算术熵编码):</li>
</ul>

<h2 id="exp-golomb-">Exp-Golomb 哥伦布编码</h2>

<h2 id="cavlc-">CAVLC 基于上下文自适应的可变长编码</h2>

<h2 id="cabac-">CABAC 基于上下文的自适应二进制算术熵编码</h2>

<h2 id="section">参考文献</h2>

<ol>
  <li><a href="http://files.cnblogs.com/files/irish/The_H.264_advanced_video_compression_standard.pdf">THE H.264 ADVANCED VIDEO COMPRESSION STANDARD</a></li>
  <li><a href="http://blog.csdn.net/yu_yuan_1314/article/details/8969950">指数哥伦布编码</a></li>
  <li><a href="http://www.cnblogs.com/TaigaCon/p/3571651.html">指数哥伦布编码</a></li>
  <li><a href="http://www.cnblogs.com/DwyaneTalk/p/4035206.html">H.264学习笔记6——指数哥伦布编码</a></li>
  <li><a href="http://wobblycucumber.blogspot.com/2013/12/cavlc-encoder-demo.html">CAVLC Encoder Demo</a></li>
  <li><a href="http://wobblycucumber.blogspot.com/2013/12/cavlc-encoding-tutorial.html">CAVLC Encoding Tutorial</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_quant_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/23/x264-quant-init/"/>
    <updated>2017-08-23T08:43:19-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/23/x264-quant-init</id>
    <content type="html"><![CDATA[
<p>本文主要记录 X264 中使用到的量化。该函数主要对<code>x264_quant_functions_t</code>结构体中的函数指针进行赋值，</p>

<!--more-->

<p>首先看其中的一个例子<code>quant_8x8</code>函数，它的定义位于<code>common/quant.c</code>中，定义如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">quant_8x8</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="n">dct</span><span class="p">[</span><span class="mi">64</span><span class="p">],</span> <span class="n">udctcoef</span> <span class="n">mf</span><span class="p">[</span><span class="mi">64</span><span class="p">],</span> <span class="n">udctcoef</span> <span class="n">bias</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nz</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">64</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">QUANT_ONE</span><span class="p">(</span> <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">mf</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">bias</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!!</span><span class="n">nz</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>其中<code>QUANT_ONE</code>定义如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define QUANT_ONE( coef, mf, f ) \</span>
</span><span class='line'><span class="cp">{ \</span>
</span><span class='line'><span class="cp">    if( (coef) &amp;gt; 0 ) \</span>
</span><span class='line'><span class="cp">        (coef) = (f + (coef)) * (mf) » 16; \</span>
</span><span class='line'><span class="cp">    else \</span>
</span><span class='line'><span class="cp">        (coef) = - ((f - (coef)) * (mf) » 16); \</span>
</span><span class='line'><span class="cp">    nz |= (coef); \</span>
</span><span class='line'><span class="cp">}</span>
</span></code></pre></td></tr></table></div></figure></p>

]]></content>
  </entry>
  
</feed>
