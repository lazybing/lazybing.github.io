<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:x264 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/x264/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2021-07-11T01:38:17-07:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[H.264 Rate Control Algorithm]]></title>
    <link href="http://lazybing.github.io/blog/2021/06/22/h264-rate-control-algorithm/"/>
    <updated>2021-06-22T06:49:35-07:00</updated>
    <id>http://lazybing.github.io/blog/2021/06/22/h264-rate-control-algorithm</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">基础知识</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">模糊复杂度估计</a></li>
  <li><a href="#vbv-algorithm" id="markdown-toc-vbv-algorithm">VBV Algorithm</a>    <ul>
      <li><a href="#lookahead-vbv-" id="markdown-toc-lookahead-vbv-">Lookahead vbv 调整</a></li>
      <li><a href="#vbv-" id="markdown-toc-vbv-">实时 VBV 调整</a></li>
      <li><a href="#mingop-vbv-" id="markdown-toc-mingop-vbv-">minGOP vbv 调整</a></li>
    </ul>
  </li>
  <li><a href="#mb-tree-algorithm" id="markdown-toc-mb-tree-algorithm">MB-Tree Algorithm</a>    <ul>
      <li><a href="#macroblock-tree-" id="markdown-toc-macroblock-tree-">Macroblock-Tree 的高层概述</a></li>
      <li><a href="#x264-lookahead" id="markdown-toc-x264-lookahead">x264 lookahead</a></li>
      <li><a href="#macroblock-tree-algorithm-mb-tree-" id="markdown-toc-macroblock-tree-algorithm-mb-tree-">MacroBlock-Tree Algorithm (MB-Tree 算法)</a></li>
    </ul>
  </li>
  <li><a href="#adaptive-quantization-algorithm" id="markdown-toc-adaptive-quantization-algorithm">Adaptive Quantization Algorithm</a></li>
</ul>

<p>码率控制是 H.264 编码器中非常重要的一个模块。码率控制主要包括两部分：码率分配(Bit Allocation)、量化参数调整(Quantitative Parameter Adjustment)。X264 的码率控制算法大致分为帧级码率控制、宏块级码率控制。帧级码率控制算法比如：VBV 调整。宏块级别码率控制比如：MBTree 算法、VAQ 感知量化算法。</p>

<!--more-->

<h1 id="section">基础知识</h1>

<p>码率控制的主要过程是：</p>

<ol>
  <li>根据前面已经编好的帧计算 SATD 值来预测当前帧的复杂度(第一帧 I 帧除外)；</li>
  <li>计算好复杂度后，根据复杂度和线性量化控制参数(qcomp)来计算 qpscale。qpscale 会影响最终编码时所用的 qp。</li>
  <li>根据目标码率和之前编码所用的比特数可以确定一个 rate_factor，若之前编码的比特数多与目标实际产生，则 rate_factor 减小。这个 rate_factor 是调整 qpscale 用的，还有 overflow 来对qpscale 来做溢出补偿处理来控制文件大小。</li>
  <li>最后根据计算公式得到 qp。</li>
</ol>

<p>参考文档：</p>

<p><a href="https://pianshen.com/article/4198342118">x264 码率控制算法原理</a></p>

<p>编码所需的 bits 与实际编码的复杂度和量化参数有关，复杂度越复杂，量化参数越小，所需 bits 越少。复杂度用运动补偿后残差的 SATD 表示。</p>

<p>qscale = 0.85 * 2^((qp - 12)/6.0)   (1) <br />
qp = 12 + 6 * log2(qscale / 0.85)   (2)</p>

<p>x264 中的代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">float</span> <span class="nf">qp2scale</span><span class="p">(</span><span class="kt">float</span> <span class="n">qp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">0.85</span> <span class="o">*</span> <span class="n">powf</span><span class="p">(</span><span class="mf">2.0f</span><span class="p">,</span> <span class="p">(</span><span class="n">qp</span> <span class="o">-</span> <span class="p">(</span><span class="mf">12.0f</span> <span class="o">+</span> <span class="n">QP_BD_OFFSET</span><span class="p">))</span> <span class="o">/</span> <span class="mf">6.0f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kr">inline</span> <span class="kt">float</span> <span class="n">qscale2qp</span><span class="p">(</span><span class="kt">float</span> <span class="n">qscale</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mf">12.0f</span> <span class="o">+</span> <span class="n">QP_BD_OFFSET</span><span class="p">)</span> <span class="o">+</span> <span class="mf">6.0f</span> <span class="o">*</span> <span class="n">log2f</span><span class="p">(</span><span class="n">qscale</span> <span class="o">/</span> <span class="mf">0.85f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1 id="section-1">模糊复杂度估计</h1>

<p>One Pass 编码中，由经过运动补偿后残差的 SATD 代表一帧的复杂度，SATD 是将残差做  Hadrmard 变换后再取绝对值的总和，它作为一种简单的时频交换，能在一定程度上衡量生产码流的大小。</p>

<p>模糊复杂度是基于已编码帧的复杂度加权得到的。使用复杂度加权，相对于使用单独一帧的复杂度，能避免 QP 的波动：</p>

<p>blurred_complexity = cplxsum/cplxcount  <br />
cplxsum[i]   = cplxsum[i - 1] * 0.5 + satd[i - 1]<br />
cplxcount[i] = cplxcount[i - 1] * 0.5 + 1</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">double</span> <span class="n">wanted_bits</span><span class="p">,</span> <span class="n">overflow</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">last_satd</span> <span class="o">=</span> <span class="n">x264_rc_analyse_slice</span><span class="p">(</span><span class="n">h</span><span class="p">);</span>
</span><span class='line'><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">short_term_cplxsum</span> <span class="o">*=</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">short_term_cplxcount</span> <span class="o">*=</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">short_term_cplxsum</span> <span class="o">+=</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">last_satd</span> <span class="o">/</span> <span class="p">(</span><span class="n">CLIP_DURATION</span><span class="p">(</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fenc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">f_duration</span><span class="p">)</span> <span class="o">/</span> <span class="n">BASE_FRAME_DURATION</span><span class="p">);</span>
</span><span class='line'><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">short_term_cplxcount</span><span class="o">++</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">rce</span><span class="p">.</span><span class="n">text_bits</span> <span class="o">=</span> <span class="n">rc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">last_satd</span><span class="p">;</span>
</span><span class='line'><span class="n">rce</span><span class="p">.</span><span class="n">blurred_complexity</span> <span class="o">=</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">short_term_cplxsum</span> <span class="o">/</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">short_term_cplxcount</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1 id="vbv-algorithm">VBV Algorithm</h1>

<p>VBV 是一种帧级别的码率控制算法，它是这样一种机制: VBV 相当于一个容器，每编码一帧，都从容器内取走对应 bit 的数据；与此同时，往容器内以固定的速度输入 bit。每编码完一帧，根据容器内的充盈状态(上溢/下溢)，更新接下来编码参数，使得容器的充盈程都总是处于合理的范围内。</p>

<p>视频缓冲检测器(VBV, Video Buffer Verifer)是 MPEG 视频缓冲模型，可以确保码率不会超过某个最大值。VBV Buffer Size 通常设置为 maximum rate 的两倍;如果客户端缓存比较小，设置 bufsize 等于 maxrate;如果想要限制码流的码率，设置 buffersize 为 maximum rate 的一半或更小。</p>

<p>先来看一下，x264 中关于 VBV 的几个变量定义：<br />
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="kt">x264_ratecontrol_t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b_vbv</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b_vbv_min_rate</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/*VBV stuff*/</span>
</span><span class='line'><span class="kt">double</span> <span class="n">buffer_size</span><span class="p">;</span>     <span class="c1">//VBV buffer size, 容器的总容量</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">buffer_fill_final</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">buffer_fill_final_min</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">buffer_fill</span><span class="p">;</span> <span class="c1">//planned buffer, if all in-progress frames hit their bit budget</span>
</span><span class='line'><span class="n">doublt</span> <span class="n">buffer_rate</span><span class="p">;</span> <span class="c1">//# of bits added to buffer_fill after each frame</span>
</span><span class='line'><span class="kt">double</span> <span class="n">vbv_max_rate</span><span class="p">;</span><span class="c1">//# of bits added to buffer_fill per second</span>
</span><span class='line'><span class="kt">predictor_t</span> <span class="o">*</span><span class="n">pred</span><span class="p">;</span>  <span class="c1">//predict frame size from satd</span>
</span><span class='line'><span class="kt">int</span> <span class="n">single_frame_vbv</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">rate_factor_max_increment</span><span class="p">;</span> <span class="c1">//Don&#39;t allow RF above(CRF + this value) } </span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>X264 中，关于 VBV 的调整在 clip_qscale 中。根据是否有 lookahead，可以分为 lookahead vbv 调整和实时 VBV 调整两种。</p>

<h2 id="lookahead-vbv-">Lookahead vbv 调整</h2>

<p>从 lookahead 模块可以得到未来若干帧的复杂度。vbv 算法的原理是：一样的 qscale 应用到 lookahead 中的所有帧中，检测会不会有帧使得 VBV 缓存下溢，并且 lookahead 中所有帧编码结束后，缓存填充度在一个合理的范围内，小步调整 qscale 直到满足上述要求。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">terminate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Avoid</span> <span class="n">an</span> <span class="n">infinite</span> <span class="n">loop</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">iterations</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">iterations</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1000</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">terminate</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">iterations</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="kt">double</span> <span class="n">frame_q</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>	<span class="kt">double</span> <span class="n">cur_bits</span> <span class="o">=</span> <span class="n">predict_size</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pred</span><span class="p">[</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sh</span><span class="p">.</span><span class="n">i_type</span><span class="p">],</span> <span class="n">q</span><span class="p">,</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">last_satd</span> <span class="p">);</span>
</span><span class='line'>	<span class="kt">double</span> <span class="n">buffer_fill_cur</span> <span class="o">=</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_fill</span> <span class="o">-</span> <span class="n">cur_bits</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">double</span> <span class="n">target_fill</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">double</span> <span class="n">total_duration</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">double</span> <span class="n">last_duration</span> <span class="o">=</span> <span class="n">fenc_cpb_duration</span><span class="p">;</span>
</span><span class='line'>	<span class="n">frame_q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sh</span><span class="p">.</span><span class="n">i_type</span> <span class="o">==</span> <span class="n">SLICE_TYPE_I</span> <span class="o">?</span> <span class="n">q</span> <span class="o">*</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="nl">f_ip_factor</span> <span class="p">:</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>	<span class="n">frame_q</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">frame_q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_pb_factor</span><span class="p">;</span>
</span><span class='line'>	<span class="n">frame_q</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">frame_q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_ip_factor</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* Loop over the planned future frames. */</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">buffer_fill_cur</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">buffer_fill_cur</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_size</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">total_duration</span> <span class="o">+=</span> <span class="n">last_duration</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buffer_fill_cur</span> <span class="o">+=</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vbv_max_rate</span> <span class="o">*</span> <span class="n">last_duration</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i_type</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fenc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_planned_type</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i_satd</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fenc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_planned_satd</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">i_type</span> <span class="o">==</span> <span class="n">X264_TYPE_AUTO</span> <span class="p">)</span>
</span><span class='line'>	<span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="n">i_type</span> <span class="o">=</span> <span class="n">IS_X264_TYPE_I</span><span class="p">(</span> <span class="n">i_type</span> <span class="p">)</span> <span class="o">?</span> <span class="nl">SLICE_TYPE_I</span> <span class="p">:</span> <span class="n">IS_X264_TYPE_B</span><span class="p">(</span> <span class="n">i_type</span> <span class="p">)</span> <span class="o">?</span> <span class="nl">SLICE_TYPE_B</span> <span class="p">:</span> <span class="n">SLICE_TYPE_P</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cur_bits</span> <span class="o">=</span> <span class="n">predict_size</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pred</span><span class="p">[</span><span class="n">i_type</span><span class="p">],</span> <span class="n">frame_q</span><span class="p">[</span><span class="n">i_type</span><span class="p">],</span> <span class="n">i_satd</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">buffer_fill_cur</span> <span class="o">-=</span> <span class="n">cur_bits</span><span class="p">;</span>
</span><span class='line'>    <span class="n">last_duration</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fenc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">f_planned_cpb_duration</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* Try to get to get the buffer at least 50% filled, but don&#39;t set an impossible goal. */</span>
</span><span class='line'><span class="n">target_fill</span> <span class="o">=</span> <span class="n">X264_MIN</span><span class="p">(</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_fill</span> <span class="o">+</span> <span class="n">total_duration</span> <span class="o">*</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vbv_max_rate</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_size</span> <span class="o">*</span> <span class="mf">0.5</span> <span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">buffer_fill_cur</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">target_fill</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">*=</span> <span class="mf">1.01</span><span class="p">;</span>
</span><span class='line'>    <span class="n">terminate</span> <span class="o">|=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* Try to get the buffer no more than 80% filled, but don&#39;t set an impossible goal. */</span>
</span><span class='line'><span class="n">target_fill</span> <span class="o">=</span> <span class="n">x264_clip3f</span><span class="p">(</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_fill</span> <span class="o">-</span> <span class="n">total_duration</span> <span class="o">*</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vbv_max_rate</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_size</span> <span class="o">*</span> <span class="mf">0.8</span><span class="p">,</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_size</span> <span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">b_vbv_min_rate</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">buffer_fill_cur</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">target_fill</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">/=</span> <span class="mf">1.01</span><span class="p">;</span>
</span><span class='line'>    <span class="n">terminate</span> <span class="o">|=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">break</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<h2 id="vbv-">实时 VBV 调整</h2>

<p>如果没有 lookahead，未来帧的复杂度未知，只能根据当前帧的复杂度，控制缓存的充盈程度。算法主要流程如下：</p>

<ol>
  <li>对于 P 帧和第一个 I 帧，让当前帧编码完成后，缓存区至少还有一半容量。</li>
  <li>限制每帧大小不能超过当前缓存量的一半。</li>
  <li>限制每帧大小至少是 buffer_rate 的一半。buffer_rate = vbv-maxrate/fps。</li>
  <li>限制 qscale 不能小于输入 qscale。</li>
</ol>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">pict_type</span> <span class="o">==</span> <span class="n">SLICE_TYPE_P</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span> <span class="n">pict_type</span> <span class="o">==</span> <span class="n">SLICE_TYPE_I</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">last_non_b_pict_type</span> <span class="o">==</span> <span class="n">SLICE_TYPE_I</span> <span class="p">)</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_fill</span><span class="o">/</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_size</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mf">0.5</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">q</span> <span class="o">/=</span> <span class="n">x264_clip3f</span><span class="p">(</span> <span class="mf">2.0</span><span class="o">*</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_fill</span><span class="o">/</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_size</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* Now a hard threshold to make sure the frame fits in VBV.</span>
</span><span class='line'><span class="cm"> * This one is mostly for I-frames. */</span>
</span><span class='line'><span class="kt">double</span> <span class="n">bits</span> <span class="o">=</span> <span class="n">predict_size</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pred</span><span class="p">[</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sh</span><span class="p">.</span><span class="n">i_type</span><span class="p">],</span> <span class="n">q</span><span class="p">,</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">last_satd</span> <span class="p">);</span>
</span><span class='line'><span class="cm">/* For small VBVs, allow the frame to use up the entire VBV. */</span>
</span><span class='line'><span class="kt">double</span> <span class="n">max_fill_factor</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_vbv_buffer_size</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">5</span><span class="o">*</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_vbv_max_bitrate</span> <span class="o">/</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fps</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* For single-frame VBVs, request that the frame use up the entire VBV. */</span>
</span><span class='line'><span class="kt">double</span> <span class="n">min_fill_factor</span> <span class="o">=</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">single_frame_vbv</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">bits</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_fill</span><span class="o">/</span><span class="n">max_fill_factor</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">qf</span> <span class="o">=</span> <span class="n">x264_clip3f</span><span class="p">(</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_fill</span><span class="o">/</span><span class="p">(</span><span class="n">max_fill_factor</span><span class="o">*</span><span class="n">bits</span><span class="p">),</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">1.0</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">/=</span> <span class="n">qf</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bits</span> <span class="o">*=</span> <span class="n">qf</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">bits</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_rate</span><span class="o">/</span><span class="n">min_fill_factor</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">qf</span> <span class="o">=</span> <span class="n">x264_clip3f</span><span class="p">(</span> <span class="n">bits</span><span class="o">*</span><span class="n">min_fill_factor</span><span class="o">/</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_rate</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">,</span> <span class="mf">1.0</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">*=</span> <span class="n">qf</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="n">X264_MAX</span><span class="p">(</span> <span class="n">q0</span><span class="p">,</span> <span class="n">q</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<h2 id="mingop-vbv-">minGOP vbv 调整</h2>

<p>B 帧 QP 不直接被 VBV 调整，它由 P 帧加一个偏移量得到。这一步检查当前 P 帧和（编码顺序）到下一个 P 帧之前的 B 帧的复杂度。适当调低 qscale (调高码率预算)，使得本 minGOPher 过后，缓存区没有上溢。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">double</span> <span class="n">bits</span> <span class="o">=</span> <span class="n">predict_size</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pred</span><span class="p">[</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sh</span><span class="p">.</span><span class="n">i_type</span><span class="p">],</span> <span class="n">q</span><span class="p">,</span> <span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">last_satd</span><span class="p">);</span>
</span><span class='line'><span class="kt">double</span> <span class="n">frame_size_maximum</span> <span class="o">=</span> <span class="n">X264_MIN</span><span class="p">(</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">frame_size_maximum</span><span class="p">,</span> <span class="n">X264_MAX</span><span class="p">(</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buffer_fill</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">bits</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">frame_size_maximum</span><span class="p">)</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">*=</span> <span class="n">bits</span> <span class="o">/</span> <span class="n">frame_size_maximum</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rcc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">b_vbv_min_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">X264_MAX</span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>参考文档:<br />
<a href="https://codesequoia.wordpress.com/2010/04/19/what-are-cbr-vbv-and-cpb/">What are CBR, VBV and CPB</a>  <br />
<a href="https://www.youtube.com/watch?v=Mn8v1ojV80M">The Hypothetical Reference Decoder(HRD)</a></p>

<h1 id="mb-tree-algorithm">MB-Tree Algorithm</h1>

<h2 id="macroblock-tree-">Macroblock-Tree 的高层概述</h2>

<p>MB-tree 算法的目的是预测信息量，该信息量表示每个宏块对未来帧的贡献。该信息允许MB-tree基于其贡献，加权每个树的质量宏块。为此，MB-tree的工作方向与预测方向相反，将信息从将来的帧传播回要编码的当前帧。</p>

<p>为此，MB-tree 需要知道多种信息，或者至少近似的信息量。首先，它必须知道即将分析的未来帧的帧类型。其次，它必须知道这些帧的运动向量。第三，它必须知道每个步骤要传播多少信息量，这会根据帧内和帧间消耗来计算。接下来描述的lookahead会说明如何获取这些信息。</p>

<h2 id="x264-lookahead">x264 lookahead</h2>

<p>x264 有个复杂的lookahead模块，该模块设计用来，在真正的编码模块分析之前，预测帧的编码消耗。它用这些预测信息来做很多的决定，比如自适应的B帧的位置、显示加权预测、以及缓冲区受阻的码率控制的比特分配。因为性能的原因，它的操作是对一半分辨率进行的，并且仅仅计算SATD残差，并不做量化和重建。</p>

<p>lookahead的核心是<code>x264_slicetype_frame_cost</code>函数，它会被重复的调用来计算p0/p1/b的帧代价。p0是被分析帧的前向预测帧，p1是被分析帧的后向预测帧，b是被分析的帧。如果p1等于b，则分析的帧是P帧。如果p0等于b，则分析的帧是I帧。因为<code>x264_slicetype_frame_cost</code>可能会在算法中被重复调用很多次，每次调用的结果都要保存下来以备未来使用。</p>

<p><code>x264_slicetype_frame_cost</code>针对每个宏块调用<code>x264_slicetype_mb_cost</code>。因为帧只有一半的分辨率，每个宏块是<code>8x8</code>的，而不是<code>16x16</code>的。<code>x264_slicetype_mb_cost</code>对每个参考帧执行向量搜索。向量搜索是典型的六边形运动搜索。</p>

<p>对于B帧，它还会检查一些可能的双向模式：一个模式类似于264的时间方向，零向量；一个模式使用运动矢量结果来自list0和list1运动搜索。<code>x264_slicetype_mb_cost</code>同样计算合适的帧内代价。所有的这些代价被保存下来，用于将来使用。这对于MB-tree非常重要，它需要这些信息用于计算。</p>

<p>这些分析的结果主要用于Viterbi算法中自适应B帧的放置。Viterbi 算法的输出不仅仅在下一帧的类型判断时使用到，而且在后面N帧的类型判断中会用到，其中N是lookahead的大小。该计划实际上是一个队列：it changes over time as frames are pulled from one end and encoded using the specified frame types, frames are added to the other end as new frames enter the encoder, and the plan is recalculated. 该计划的存在对于宏块树非常重要：它意味着很多需要知道未来帧帧类型的算法，有个可信赖的精准预测。即使GOP的结构是变化的。</p>

<p>结果，MB-tree知道未来N帧的帧类型，即近似的运动矢量和模式决策以及帧内/帧间模式代价。这样的计算成本接近于零，因为这些数据在做其他任务时，在编码器内部已经计算完了。即使这样，相对于总的编码时间，lookahead的计算消耗也是成本很低的。</p>

<h2 id="macroblock-tree-algorithm-mb-tree-">MacroBlock-Tree Algorithm (MB-Tree 算法)</h2>

<p>对于每一帧，我们在所有宏块上执行 propagate step，MacroBlock-Tree 操作的 propagate step 如下：</p>

<ol>
  <li>对于当前宏块，读取下面变量的值：
    <ul>
      <li>intra_cost: 该宏块的帧内模式的预测 SATD 代价。</li>
      <li>inter_cost: 该宏块的帧间模式的预测 SATD 代价。如果该值比 intra_cost 大，设置其为 intra_cost。</li>
      <li>propatate_in: 该宏块的 propagate_cost。因为没有任何信息，执行 propagate 的第一帧，它的 propagate_cost 值为 0。</li>
    </ul>
  </li>
  <li>计算要执行 propagate 的当前宏块对其参考帧的宏块的信息的分数，称为 propagate_fraction。计算方法为 1 - intra_cost / inter_cost。例如，如果 inter_cost 是 intra_cost 的 80%，我们说该宏块有 20% 的信息来自于它的参考帧。</li>
  <li>和当前宏块有关的所有信息总和大约为 intra_cost + propagate_cost（自身信息和提供给后续帧的信息），使用这个总和乘以继承率 propagate fraction, 可以得到来继承自参考帧的信息量 propagate amount。</li>
  <li>将 propagate_amount 划分给参考帧中相关的宏块，由于当前宏块在参考帧中运动搜索得到的补偿区域可能涉及多个宏块，即参考帧中的多个宏块都参与了当前宏块的运动补偿，所以我们根据参考帧宏块参与补偿的部分尺寸大小来分配 propagate amount。特别的，对于 B 帧，我们把 propatate amount 先平分给两个参考帧，再进一步分配给参考帧中的宏块。参考帧中的宏块最终被分到的 propagate amount 加起来就是它的 propagate cost。</li>
  <li>从前向预测的最后一帧向前一直计算到当前帧，可以得到当前帧中每个宏块对后续 n 帧的 propagate_cost，最后根据当前帧每个宏块的 propatate_cost，计算相应的偏移系数 qp_offset，所使用的公式如下：</li>
</ol>

<p>MacroblockQP = -strength * log2((intra_cost + propagate_cost) / intra_cost)。</p>

<p>其中强度系数 strength 为常量，对于未被参考的宏块而言，propagate_cost = 0, qp_offset = 0。</p>

<p>X264 源码中实现MB-Tree 的函数为 macroblock_tree，其中调用了如下三个函数来实现上述步骤：</p>

<ol>
  <li>slicetype_frame_cost():计算宏块的帧内代价和帧间代价。</li>
  <li>macroblock_tree_propagate():计算当前宏块的遗传代价。</li>
  <li>macroblock_tree_finish():计算量化参数偏移系数。</li>
</ol>

<p>参考文档：<br />
<a href="https://download.csdn.net/download/To_Be_IT_1/19848868?spm=1001.2014.3001.5501">A novel macroblock-tree algorithm for high-performance optimization of.pdf</a></p>

<h1 id="adaptive-quantization-algorithm">Adaptive Quantization Algorithm</h1>

<p>自适应量化就是根据宏块的复杂度来调整每个宏块量化时的量化参数。自适应量化的基本原理是：根据当前宏块的复杂度 SSD，与当前帧的平均复杂度做对比，若高于平均，则分配更多的码率，即用小于当前帧 QP 值的量化步长；低于平均值则分配更少的码率，即用大于当前帧的 QP 值的量化步长。</p>

<p>自适应量化主要有两个参数：aq-mode（自适应量化模式）、aq-strength（自适应量化强度）。自适应量化强度决定码率偏向于低细节(SSD)部分的强度。</p>

<p>X264 中，自适应量化的实现在<code>x264_adaptive_quant_frame</code>中：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* constants chosen to result in approximately the same overall bitrate as without AQ.</span>
</span><span class='line'><span class="cm"> * FIXME: while they’re written in 5 significant digits, they’re only tuned to 2. */</span>
</span><span class='line'><span class="kt">float</span> <span class="n">strength</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">avg_adj</span> <span class="o">=</span> <span class="mf">0.f</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">bias_strength</span> <span class="o">=</span> <span class="mf">0.f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_aq_mode</span> <span class="o">==</span> <span class="n">X264_AQ_AUTOVARIANCE</span> <span class="o">||</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_aq_mode</span> <span class="o">==</span> <span class="n">X264_AQ_AUTOVARIANCE_BIASED</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">bit_depth_correction</span> <span class="o">=</span> <span class="mf">1.f</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="err">« </span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">BIT_DEPTH</span><span class="o">-</span><span class="mi">8</span><span class="p">)));</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">avg_adj_pow2</span> <span class="o">=</span> <span class="mf">0.f</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">mb_y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mb_y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_mb_height</span><span class="p">;</span> <span class="n">mb_y</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">mb_x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mb_x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_mb_width</span><span class="p">;</span> <span class="n">mb_x</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">uint32_t</span> <span class="n">energy</span> <span class="o">=</span> <span class="n">ac_energy_mb</span><span class="p">(</span> <span class="n">h</span><span class="p">,</span> <span class="n">mb_x</span><span class="p">,</span> <span class="n">mb_y</span><span class="p">,</span> <span class="n">frame</span> <span class="p">);</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">qp_adj</span> <span class="o">=</span> <span class="n">powf</span><span class="p">(</span> <span class="n">energy</span> <span class="o">*</span> <span class="n">bit_depth_correction</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">0.125f</span> <span class="p">);</span>
</span><span class='line'>            <span class="n">frame</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">f_qp_offset</span><span class="p">[</span><span class="n">mb_x</span> <span class="o">+</span> <span class="n">mb_y</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_mb_stride</span><span class="p">]</span> <span class="o">=</span> <span class="n">qp_adj</span><span class="p">;</span>
</span><span class='line'>            <span class="n">avg_adj</span> <span class="o">+=</span> <span class="n">qp_adj</span><span class="p">;</span>
</span><span class='line'>            <span class="n">avg_adj_pow2</span> <span class="o">+=</span> <span class="n">qp_adj</span> <span class="o">*</span> <span class="n">qp_adj</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="n">avg_adj</span> <span class="o">/=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_mb_count</span><span class="p">;</span>
</span><span class='line'>    <span class="n">avg_adj_pow2</span> <span class="o">/=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_mb_count</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strength</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_aq_strength</span> <span class="o">*</span> <span class="n">avg_adj</span><span class="p">;</span>
</span><span class='line'>    <span class="n">avg_adj</span> <span class="o">=</span> <span class="n">avg_adj</span> <span class="o">-</span> <span class="mf">0.5f</span> <span class="o">*</span> <span class="p">(</span><span class="n">avg_adj_pow2</span> <span class="o">-</span> <span class="mf">14.f</span><span class="p">)</span> <span class="o">/</span> <span class="n">avg_adj</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bias_strength</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_aq_strength</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">strength</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_aq_strength</span> <span class="o">*</span> <span class="mf">1.0397f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">mb_y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mb_y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_mb_height</span><span class="p">;</span> <span class="n">mb_y</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">mb_x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mb_x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_mb_width</span><span class="p">;</span> <span class="n">mb_x</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">qp_adj</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">mb_xy</span> <span class="o">=</span> <span class="n">mb_x</span> <span class="o">+</span> <span class="n">mb_y</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_mb_stride</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_aq_mode</span> <span class="o">==</span> <span class="n">X264_AQ_AUTOVARIANCE_BIASED</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">qp_adj</span> <span class="o">=</span> <span class="n">frame</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">f_qp_offset</span><span class="p">[</span><span class="n">mb_xy</span><span class="p">];</span>
</span><span class='line'>            <span class="n">qp_adj</span> <span class="o">=</span> <span class="n">strength</span> <span class="o">*</span> <span class="p">(</span><span class="n">qp_adj</span> <span class="o">-</span> <span class="n">avg_adj</span><span class="p">)</span> <span class="o">+</span> <span class="n">bias_strength</span> <span class="o">*</span> <span class="p">(</span><span class="mf">1.f</span> <span class="o">-</span> <span class="mf">14.f</span> <span class="o">/</span> <span class="p">(</span><span class="n">qp_adj</span> <span class="o">*</span> <span class="n">qp_adj</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_aq_mode</span> <span class="o">==</span> <span class="n">X264_AQ_AUTOVARIANCE</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">qp_adj</span> <span class="o">=</span> <span class="n">frame</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">f_qp_offset</span><span class="p">[</span><span class="n">mb_xy</span><span class="p">];</span>
</span><span class='line'>            <span class="n">qp_adj</span> <span class="o">=</span> <span class="n">strength</span> <span class="o">*</span> <span class="p">(</span><span class="n">qp_adj</span> <span class="o">-</span> <span class="n">avg_adj</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">uint32_t</span> <span class="n">energy</span> <span class="o">=</span> <span class="n">ac_energy_mb</span><span class="p">(</span> <span class="n">h</span><span class="p">,</span> <span class="n">mb_x</span><span class="p">,</span> <span class="n">mb_y</span><span class="p">,</span> <span class="n">frame</span> <span class="p">);</span>
</span><span class='line'>            <span class="n">qp_adj</span> <span class="o">=</span> <span class="n">strength</span> <span class="o">*</span> <span class="p">(</span><span class="n">x264_log2</span><span class="p">(</span> <span class="n">X264_MAX</span><span class="p">(</span><span class="n">energy</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="mf">14.427f</span> <span class="o">+</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">BIT_DEPTH</span><span class="o">-</span><span class="mi">8</span><span class="p">)));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">quant_offsets</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">qp_adj</span> <span class="o">+=</span> <span class="n">quant_offsets</span><span class="p">[</span><span class="n">mb_xy</span><span class="p">];</span>
</span><span class='line'>        <span class="n">frame</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">f_qp_offset</span><span class="p">[</span><span class="n">mb_xy</span><span class="p">]</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">frame</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">f_qp_offset_aq</span><span class="p">[</span><span class="n">mb_xy</span><span class="p">]</span> <span class="o">=</span> <span class="n">qp_adj</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">frames</span><span class="p">.</span><span class="n">b_have_lowres</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">frame</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_inv_qscale_factor</span><span class="p">[</span><span class="n">mb_xy</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_exp2fix8</span><span class="p">(</span><span class="n">qp_adj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[H.264 Loop Filter Algorithm]]></title>
    <link href="http://lazybing.github.io/blog/2021/06/09/h264-loop-filter/"/>
    <updated>2021-06-09T17:05:54-07:00</updated>
    <id>http://lazybing.github.io/blog/2021/06/09/h264-loop-filter</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">引入环路滤波的原因</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">环路滤波的介绍</a></li>
</ul>

<p>本文将从去块滤波的引入原因出发，分析去块滤波的原理、强度、决策、实现，并给出一个具体的实例，最后会给出 x264 中关于 Deblock 的代码实现。</p>

<!--more-->

<h2 id="section">引入环路滤波的原因</h2>

<p>在编码过程中，会因如下原因引入块效应：</p>

<ol>
  <li>每个宏块的变换、量化过程都是独立进行的，采用的量化参数不同，这就会引入量化误差，导致相邻块边界步连续。</li>
  <li>在运动补偿中，相邻块的预测值可能来自不同图像的不同位置，导致预测残差信号在边界产生数值不连续。</li>
</ol>

<p>环路滤波的引入，可以调整相邻宏块边缘上的像素值，降低不连续性，使其看起来更平滑。</p>

<h2 id="section-1">环路滤波的介绍</h2>

<p>下面给出两篇论文中，关于环路滤波部分的介绍：首先给出<code>Overview of the H.264/AVC Video Coding Standard</code> 中的<code>K. In-Loop Deblocking Filter</code>的介绍。我把它翻译成长中文如下。</p>

<blockquote>
  <p>基于块的编码的一个特殊特征是偶然产生可见的块结构。块边缘通常以低于内部像素的精度重建，块通常被认为是当前压缩方法中最明显的伪影之一。为此，H.264/AVC 定义了一种自适应的环路去块滤波器，其中滤波的强度由若干语法元素的值控制。有关自适应去块滤波器的详细说明，请参阅<a href="">Adaptive deblocking filter</a>;</p>

  <p>图 16 给出了使用一维边缘的可视化的去块滤波器的原理。样本 p0 和 q0 以及 p1 和 q1 是否被滤波取决于使用的量化参数(QP)和量化阈值α(QP)和β(QP)。因此，仅当满足以下每个条件时，才进行 p0 和 q0 的滤波：<br />
1. |p0 - q0 | &lt; α(QP) <br />
2. |p1 - p0 | &lt; β(QP)<br />
3. |q1 - q0 | &lt; β(QP) <br />
其中 β(QP) 比 α(QP) 小的多。如果满足相应的以下条件，则进行 p1 或 q1 的滤波： |p2 - p0| &lt; β(QP) 或者 |q2 - q0| &lt; β(QP)</p>

  <p>基本思想是，如果测量块边缘附近的样本之间相对较大的绝对差，则很可能是块伪影，因此应减少。然而，如果该差异的幅度太大以致不能用编码中使用的量化的粗糙度来解释，则边缘更可能反映源图片的实际行为，并且不应被平滑。</p>

  <p>块效应降低，而内容的锐化程度基本不变。因此，主观质量显著提高。滤波器通常将比特率降低 5%-10%，同时产生与未滤波视频相同的客观质量。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[H264 Motion Estimation Algorithm]]></title>
    <link href="http://lazybing.github.io/blog/2021/05/17/h264-motion-estimation-algorithm/"/>
    <updated>2021-05-17T07:54:51-07:00</updated>
    <id>http://lazybing.github.io/blog/2021/05/17/h264-motion-estimation-algorithm</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">整数像素运动估计</a>    <ul>
      <li><a href="#diamond-search-algorithm" id="markdown-toc-diamond-search-algorithm">钻石搜索算法(Diamond Search Algorithm)</a></li>
      <li><a href="#hexagon-search-algorithm" id="markdown-toc-hexagon-search-algorithm">六边形搜索算法(Hexagon Search Algorithm)</a></li>
      <li><a href="#uneven-multi-hexagon-grid-search-algorithm" id="markdown-toc-uneven-multi-hexagon-grid-search-algorithm">非对称交叉多层次六边形网格搜索算法(Uneven Multi-hexagon-grid Search Algorithm)</a>        <ul>
          <li><a href="#umh-the-proposed-algorithm-for-umh" id="markdown-toc-umh-the-proposed-algorithm-for-umh">UMH 优化思路(The Proposed Algorithm For UMH)</a>            <ul>
              <li><a href="#search-range-decision-for-uneven-cross-pattern" id="markdown-toc-search-range-decision-for-uneven-cross-pattern">Search Range Decision for Uneven Cross Pattern</a></li>
              <li><a href="#optimize-for-multi-hexagon-grid-search" id="markdown-toc-optimize-for-multi-hexagon-grid-search">Optimize for Multi-hexagon-grid Search</a></li>
              <li><a href="#optimize-for-iterative-hexagon-search" id="markdown-toc-optimize-for-iterative-hexagon-search">Optimize for Iterative Hexagon Search</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-1" id="markdown-toc-section-1">分数像素运动估计</a>    <ul>
      <li><a href="#section-2" id="markdown-toc-section-2">亚像素搜索算法</a></li>
    </ul>
  </li>
</ul>

<p>运动估计是在参考帧中为当前编码的宏块寻找最佳匹配快，找到最佳匹配块后，运动估计会输出是运动矢量。</p>

<!--more-->

<p>运动估计的下一步是运动补偿(Motion Compensation)，即从当前块中减去匹配块得到残差块。在整个编码过程中，运动估计耗时占了整个编码过程的60%-80%不等，因此，对运动估计的优化是实现视频实时应用的关键。</p>

<p>H264 中运动估计的过程分为两步：1. 整数像素精度的估计。2. 分数像素级精度的估计。其中整数像素级的运动估计包括两类算法：全搜索算法、快速搜索算法(DIA/HEX/UMH)。</p>

<p>几个运动估计中用到的缩写：</p>

<ul>
  <li>MV: 运动矢量。被用来表示一个宏块基于该宏块中的另一个图像的位置。</li>
  <li>MVP:预测运动矢量。</li>
  <li>MVD：两个运动矢量的差值。</li>
  <li>SATD(Sum of Absolute Transformed Difference):即 hadamard 变换后再绝对值求和。</li>
  <li>SSD(Sum of Squared Difference) = SSE(Sum of Squared Error) 即差值的平方和。</li>
  <li>MAD(Mean Absolute Difference) = MAE(Mean Absolute Error) 即平均绝对差值。</li>
  <li>MSD(Mean Squared Difference) = MSE(Mean Squared Error) 即平均平方误差。</li>
</ul>

<h1 id="section">整数像素运动估计</h1>

<h2 id="diamond-search-algorithm">钻石搜索算法(Diamond Search Algorithm)</h2>

<p>钻石搜索算法有两种搜索模式： 大钻石搜索算法(LDSP)和小钻石搜索算法(SDSP)。大钻石搜索算法有 9 个搜索点，小钻石搜索算法有 5 个搜索点。</p>

<p>钻石搜索的步骤是：先使用 LDSP 进行搜索，直到最佳匹配点位于大菱形的中心位置；之后使用小菱形搜索，直至最佳匹配点位于小菱形的中心位置。</p>

<ul>
  <li>LDSP:</li>
</ul>

<ol>
  <li>从中心搜索位置开始，设置步长 S = 2</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>使用钻石搜索点图案搜索 8 个位置像素(X, Y), 以使(</td>
          <td>x</td>
          <td>+</td>
          <td>Y</td>
          <td>= S) 围绕位置 (0, 0)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>从搜索到的 9 个地点中选择，其中一个地点的费用最低</li>
  <li>如果在搜索窗口的中心找到了最小重量，请转到 SDSP 步骤</li>
  <li>如果在除中心以为的 8 个位置之一中找到最小重量，则将新的原点设置为此位置</li>
  <li>重复 LDSP</li>
</ol>

<ul>
  <li>SDSP：</li>
</ul>

<ol>
  <li>设置新的搜索原点</li>
  <li>将新步长设置为 S = S / 2</li>
  <li>重复搜索过程以找到重量最轻的位置</li>
  <li>选择权重最小的位置作为运动矢量权重最小的运动矢量位置。</li>
</ol>

<p><img src="/images/h264_me/diamond_search.png" title="‘H264 Motion Estimation Diamond Search’" ></p>

<p>上图可以看出，LDSP 又可分为两种模式，LDSP(1) 中的两个菱形，有 4 个重合点；LDSP(2) 中的两个菱形，有 6 个重合点。不重复计算这些点，可以节省运算复杂度。</p>

<p>SDSP 中, 4 个菱形的角距离中心点距离相等，因此 SDSP(1) 和 SDSP(2) 可以看出是一种模式。两个临近的搜索菱形，有 2 个重合点，不重复计算这些点，同样可以节省运算复杂度。</p>

<p>x264 中只采用了钻石搜索里的小钻石搜索算法, 搜索半径为 1。 具体代码实现如下:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//diamond search, radius 1</span>
</span><span class='line'><span class="n">bcost</span> <span class="err">«</span><span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i_me_range</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">do</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">COST_MV_X4_DIR</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">costs</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COPY1_IF_LT</span><span class="p">(</span><span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="err">« </span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COPY1_IF_LT</span><span class="p">(</span><span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="err">« </span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COPY1_IF_LT</span><span class="p">(</span><span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="err">« </span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COPY1_IF_LT</span><span class="p">(</span><span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="err">« </span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="mi">12</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">bcost</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">15</span><span class="p">))</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bmx</span> <span class="o">-=</span> <span class="p">(</span><span class="n">bcost</span> <span class="err">« </span><span class="mi">28</span><span class="p">)</span><span class="err"> »</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bmy</span> <span class="o">-=</span> <span class="p">(</span><span class="n">bcost</span> <span class="err">« </span><span class="mi">30</span><span class="p">)</span><span class="err"> »</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bcost</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="o">~</span><span class="mi">15</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="err">–</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">CHECK_MVRANGE</span><span class="p">(</span><span class="n">bmx</span><span class="p">,</span> <span class="n">bmy</span><span class="p">));</span>
</span><span class='line'><span class="n">bcost</span><span class="err"> »</span> <span class="mi">4</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>注意：这段代码写的比较 trick，先把 bcost 左移四位，留出的最后四位，每一位都代表一个搜索点，初始化时，默认菱形中心点为最佳匹配点。若菱形周边点 cost 更小，就将该点作为中心点继续进行菱形搜索，直到最佳匹配点确为中心点，跳出循环。</p>

<p>这段代码的速度优化空间，正如上面分析的那样，可以避开两个相邻菱形的搜索重叠搜索点。</p>

<h2 id="hexagon-search-algorithm">六边形搜索算法(Hexagon Search Algorithm)</h2>

<p>所谓的六边形搜索算法，不止包括六边形搜索(搜索半径为 2)，还有小菱形搜索和正方形搜索(搜索半径为 1)两种。</p>

<p><img src="/images/h264_me/Hexagon_Search_Algorithm.png" title="‘H264 Motion Estimation Hexagon Search’" ></p>

<p>六边形搜索算法采用 1 个大模板(六边形模板)和 2 个小模板（小菱形模板和小正方形模板），具体步骤如下：</p>

<ol>
  <li>
    <p>以搜索起点为中心，采用上图中左边的六边形模板进行搜索。计算区域中心及周围 6 个点处的匹配误差并比较，如最小 MBD 点位于模板中心点，则转至步骤 2；否则以上一次的 MBD 点作为中心点，以六边形模板为模板进行反复搜索。</p>
  </li>
  <li>
    <p>以上一次的 MBD 点为中心点，采用小菱形模板搜索和小正方形模板搜索，计算各点的匹配误差，找到 MBD点, 即为最优匹配点。</p>
  </li>
</ol>

<p>从上图中的六边形搜索可以看出，两个临近的六边形，有三个重叠搜索点，因此，可以通过减少重复计算，来提升搜索性能。事实上，x264 中已经采用了这种优化方法。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* equivalent to the above, but eliminates duplicate candidates */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* hexagon &lt;em&gt;/</span>
</span><span class='line'><span class="cm">COST_MV_X3_DIR( -2,0, -1, 2,  1, 2, costs   );</span>
</span><span class='line'><span class="cm">COST_MV_X3_DIR(  2,0,  1,-2, -1,-2, costs+4 ); /&lt;/em&gt; +4 for 16-byte alignment */</span>
</span><span class='line'><span class="n">bcost</span> <span class="err">«</span><span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">«</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="err">«</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="err">«</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">4</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="err">«</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">5</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="err">«</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">6</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="err">«</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">7</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span> <span class="n">bcost</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">7</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="p">(</span><span class="n">bcost</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">7</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bmx</span> <span class="o">+=</span> <span class="n">hex2</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">bmy</span> <span class="o">+=</span> <span class="n">hex2</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* half hexagon, not overlapping the previous iteration */</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="n">i_me_range</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">CHECK_MVRANGE</span><span class="p">(</span><span class="n">bmx</span><span class="p">,</span> <span class="n">bmy</span><span class="p">);</span> <span class="n">i</span><span class="o">--</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">COST_MV_X3_DIR</span><span class="p">(</span> <span class="n">hex2</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">hex2</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="n">hex2</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">hex2</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="n">hex2</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">hex2</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="n">costs</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">bcost</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="o">~</span><span class="mi">7</span><span class="p">;</span>
</span><span class='line'>    <span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="p">(</span><span class="n">bcost</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">7</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dir</span> <span class="o">+=</span> <span class="p">(</span><span class="n">bcost</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">7</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dir</span> <span class="o">=</span> <span class="n">mod6m1</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">bmx</span> <span class="o">+=</span> <span class="n">hex2</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">bmy</span> <span class="o">+=</span> <span class="n">hex2</span><span class="p">[</span><span class="n">dir</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span> <span class="n">bcost</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* square refine */</span>
</span><span class='line'><span class="n">bcost</span> <span class="err">«</span><span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="n">COST_MV_X4_DIR</span><span class="p">(</span>  <span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">costs</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">«</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="err">«</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="err">«</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="err">«</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="mi">4</span> <span class="p">);</span>
</span><span class='line'><span class="n">COST_MV_X4_DIR</span><span class="p">(</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="n">costs</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">«</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="mi">5</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="err">«</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="mi">6</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="err">«</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="mi">7</span> <span class="p">);</span>
</span><span class='line'><span class="n">COPY1_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="p">(</span><span class="n">costs</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="err">«</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="mi">8</span> <span class="p">);</span>
</span><span class='line'><span class="n">bmx</span> <span class="o">+=</span> <span class="n">square1</span><span class="p">[</span><span class="n">bcost</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">15</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">bmy</span> <span class="o">+=</span> <span class="n">square1</span><span class="p">[</span><span class="n">bcost</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">15</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">bcost</span><span class="err"> »</span><span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="uneven-multi-hexagon-grid-search-algorithm">非对称交叉多层次六边形网格搜索算法(Uneven Multi-hexagon-grid Search Algorithm)</h2>

<p>运动估计中，起始搜索点和提前终止技术非常重要。</p>

<p>UMH 算法是基于 MV 具有时空相关性，因此可以结合上一帧和上一步中 MV 的方向和角度，来修改多层六边形的形状。</p>

<p>UMH 算法包含四中搜索模式:不均匀交叉搜索、多六边形网格搜索、迭代六边形搜索、菱形搜索。主要流程步骤如下:</p>

<p><img src="/images/h264_me/umhexagon.png" title="‘H264 Motion Estimation UMHexagonS Search’" ></p>

<ol>
  <li>
    <p>选取合适的搜索起点。有以下几种起点的选择。</p>

    <p>①  mvp: 由于还是整像素搜索，所以这里对 MVP 取整，得到的整数的 mv 后采用小菱形搜索以得到比较优秀的 mv。② 原点：即 mv 为0，即当前块的位置。
 ③  上层块 mv。④ 共同位置块 mv，取上一参考图像与当前块相同位置的块为 mv，然后取整。⑤  共同位置参考 mv 通过参考图像距离计算后得到的 mv，然后取整。</p>
  </li>
  <li>
    <p>小菱形搜索和中菱形搜索。</p>

    <p>首先对中值 MV 和(0, 0)点进行小钻石搜索，计算出每个搜索点的 SAD 值，并找出新的 MBD 搜索点。如果新的 MBD 点的 SAD 值比门限1 的值(2000)还要大，就执行 Step4，否则继续。</p>

    <p>对搜索点进行中钻石搜索，来找出新的 MBD 搜索点。若 SAD 值小于门限值2(500)，停止搜索。否则继续。</p>
  </li>
  <li>
    <p>对称交叉搜索和六边形搜索。</p>

    <p>对上一步中找到的新的 MBD 搜索点，执行对称交叉搜索(半径为 7)和六边形搜索(半径为 2),计算这 20 个点的 SAD 值，并且找出本步最新的 MBD 点。</p>

    <p>如果该步找到的 MBD 点与上一步中的 MBD 点吻合，停止搜索。否则继续。</p>
  </li>
  <li>
    <p>非对称交叉搜索。执行非对称的交叉搜索，找到最新的 MBD 点。</p>
  </li>
  <li>
    <p>5x5搜索和多六边形网格搜索。执行 5x5 全搜索和多六边形网格搜索。</p>
  </li>
  <li>
    <p>迭代六边形搜索。设置上步中的 MBD 点作为搜索中心，执行迭代六边形搜索。</p>
  </li>
</ol>

<p>x264 中关于 UMH 算法的代码如下</p>

<p><figure class='code'><figcaption><span>X264_ME_UMH </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">case</span> <span class="nl">X264_ME_UMH</span><span class="p">:</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* Uneven-cross Multi-Hexagon-grid Search</span>
</span><span class='line'><span class="cm">         * as in JM, except with different early termination */</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">const</span> <span class="kt">uint8_t</span> <span class="n">pixel_size_shift</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ucost1</span><span class="p">,</span> <span class="n">ucost2</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">cross_start</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* refine predictors */</span>
</span><span class='line'>        <span class="n">ucost1</span> <span class="o">=</span> <span class="n">bcost</span><span class="p">;</span>
</span><span class='line'>        <span class="n">DIA1_ITER</span><span class="p">(</span> <span class="n">pmx</span><span class="p">,</span> <span class="n">pmy</span> <span class="p">);</span> <span class="c1">//1. 小菱形搜索算法用于median MV, the small diamond search</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">pmx</span> <span class="o">|</span> <span class="n">pmy</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">DIA1_ITER</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span> <span class="c1">//1. 小菱形搜索算法用于(0, 0), the small diamond search</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">i_pixel</span> <span class="o">==</span> <span class="n">PIXEL_4x4</span> <span class="p">)</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">me_hex2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ucost2</span> <span class="o">=</span> <span class="n">bcost</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">bmx</span> <span class="o">|</span> <span class="n">bmy</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">((</span><span class="n">bmx</span><span class="o">-</span><span class="n">pmx</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">bmy</span><span class="o">-</span><span class="n">pmy</span><span class="p">))</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">DIA1_ITER</span><span class="p">(</span> <span class="n">bmx</span><span class="p">,</span> <span class="n">bmy</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">bcost</span> <span class="o">==</span> <span class="n">ucost2</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">cross_start</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="n">omx</span> <span class="o">=</span> <span class="n">bmx</span><span class="p">;</span> <span class="n">omy</span> <span class="o">=</span> <span class="n">bmy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* early termination */</span> <span class="cp">#define SAD_THRESH(v) ( bcost &amp;lt; ( v &amp;gt;&amp;gt; pixel_size_shift[i_pixel] ) )</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">bcost</span> <span class="o">==</span> <span class="n">ucost2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">SAD_THRESH</span><span class="p">(</span><span class="mi">2000</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">COST_MV_X4</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span> <span class="p">);</span> <span class="c1">//2. 中菱形搜索算法，找出新的MBD, the middle diamond search point</span>
</span><span class='line'>            <span class="n">COST_MV_X4</span><span class="p">(</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span><span class="mi">2</span> <span class="p">);</span> <span class="c1">//2. 中菱形搜索算法，找出新的MBD, the middle diamond search point</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">bcost</span> <span class="o">==</span> <span class="n">ucost1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">SAD_THRESH</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">bcost</span> <span class="o">==</span> <span class="n">ucost2</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">range</span> <span class="o">=</span> <span class="p">(</span><span class="n">i_me_range</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">CROSS</span><span class="p">(</span> <span class="mi">3</span><span class="p">,</span> <span class="n">range</span><span class="p">,</span> <span class="n">range</span> <span class="p">);</span> <span class="c1">//3. 对称的交叉搜索, symmetric cross search(radius 7)</span>
</span><span class='line'>                <span class="n">COST_MV_X4</span><span class="p">(</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">);</span> <span class="c1">//3. 六边形搜索，octagon search(radius 2)</span>
</span><span class='line'>                <span class="n">COST_MV_X4</span><span class="p">(</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span> <span class="c1">//3. 六边形搜索，octagon search(radius 2)</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">bcost</span> <span class="o">==</span> <span class="n">ucost2</span> <span class="p">)</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="n">cross_start</span> <span class="o">=</span> <span class="n">range</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* adaptive search range */</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">i_mvc</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* range multipliers based on casual inspection of some statistics of</span>
</span><span class='line'><span class="cm">             * average distance between current predictor and final mv found by ESA.</span>
</span><span class='line'><span class="cm">             * these have not been tuned much by actual encoding. */</span>
</span><span class='line'>            <span class="k">static</span> <span class="k">const</span> <span class="kt">uint8_t</span> <span class="n">range_mul</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="p">{</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span> <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span> <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span> <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span> <span class="p">},</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">mvd</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">sad_ctx</span><span class="p">,</span> <span class="n">mvd_ctx</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">denom</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">i_mvc</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">i_pixel</span> <span class="o">==</span> <span class="n">PIXEL_16x16</span> <span class="p">)</span>
</span><span class='line'>                    <span class="cm">/* mvc is probably the same as mvp, so the difference isn&#39;t meaningful.</span>
</span><span class='line'><span class="cm">                     * but prediction usually isn&#39;t too bad, so just use medium range */</span>
</span><span class='line'>                    <span class="n">mvd</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="n">mvd</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span> <span class="n">m</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mvp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">mvc</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">abs</span><span class="p">(</span> <span class="n">m</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mvp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">mvc</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="cm">/* calculate the degree of agreement between predictors. */</span>
</span><span class='line'>                <span class="cm">/* in 16x16, mvc includes all the neighbors used to make mvp,</span>
</span><span class='line'><span class="cm">                 * so don&#39;t count mvp separately. */</span>
</span><span class='line'>                <span class="n">denom</span> <span class="o">=</span> <span class="n">i_mvc</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">mvd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">i_pixel</span> <span class="o">!=</span> <span class="n">PIXEL_16x16</span> <span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">mvd</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span> <span class="n">m</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mvp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">mvc</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">abs</span><span class="p">(</span> <span class="n">m</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mvp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">mvc</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>                    <span class="n">denom</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">mvd</span> <span class="o">+=</span> <span class="n">x264_predictor_difference</span><span class="p">(</span> <span class="n">mvc</span><span class="p">,</span> <span class="n">i_mvc</span> <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">sad_ctx</span> <span class="o">=</span> <span class="n">SAD_THRESH</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">SAD_THRESH</span><span class="p">(</span><span class="mi">2000</span><span class="p">)</span> <span class="o">?</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">SAD_THRESH</span><span class="p">(</span><span class="mi">4000</span><span class="p">)</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>            <span class="n">mvd_ctx</span> <span class="o">=</span> <span class="n">mvd</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">10</span><span class="o">*</span><span class="n">denom</span> <span class="o">?</span> <span class="mi">0</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">mvd</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">20</span><span class="o">*</span><span class="n">denom</span> <span class="o">?</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">mvd</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">40</span><span class="o">*</span><span class="n">denom</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">i_me_range</span> <span class="o">=</span> <span class="n">i_me_range</span> <span class="o">*</span> <span class="n">range_mul</span><span class="p">[</span><span class="n">mvd_ctx</span><span class="p">][</span><span class="n">sad_ctx</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* FIXME if the above DIA2/OCT2/CROSS found a new mv, it has not updated omx/omy.</span>
</span><span class='line'><span class="cm">         * we are still centered on the same place as the DIA2. is this desirable? */</span>
</span><span class='line'>        <span class="n">CROSS</span><span class="p">(</span> <span class="n">cross_start</span><span class="p">,</span> <span class="n">i_me_range</span><span class="p">,</span> <span class="n">i_me_range</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span> <span class="p">);</span> <span class="c1">//4. 非对称交叉搜索, an uneven cross search</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">COST_MV_X4</span><span class="p">(</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="mi">2</span> <span class="p">);</span> <span class="c1">//5. 5x5 search</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* hexagon grid */</span>
</span><span class='line'>        <span class="n">omx</span> <span class="o">=</span> <span class="n">bmx</span><span class="p">;</span> <span class="n">omy</span> <span class="o">=</span> <span class="n">bmy</span><span class="p">;</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">uint16_t</span> <span class="o">*</span><span class="n">p_cost_omvx</span> <span class="o">=</span> <span class="n">p_cost_mvx</span> <span class="o">+</span> <span class="n">omx</span><span class="o">*</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">uint16_t</span> <span class="o">*</span><span class="n">p_cost_omvy</span> <span class="o">=</span> <span class="n">p_cost_mvy</span> <span class="o">+</span> <span class="n">omy</span><span class="o">*</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">do</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">static</span> <span class="k">const</span> <span class="kt">int8_t</span> <span class="n">hex4</span><span class="p">[</span><span class="mi">16</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">//5. 多六边形网格搜索, multi-hexagon-grid search</span>
</span><span class='line'>                <span class="p">{</span> <span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">},</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">},</span> <span class="p">{</span> <span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">},</span>
</span><span class='line'>                <span class="p">{</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">},</span> <span class="p">{</span> <span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span> <span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>                <span class="p">{</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'>                <span class="p">{</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="mi">4</span><span class="o">*</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">X264_MIN4</span><span class="p">(</span> <span class="n">mv_x_max</span><span class="o">-</span><span class="n">omx</span><span class="p">,</span> <span class="n">omx</span><span class="o">-</span><span class="n">mv_x_min</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">mv_y_max</span><span class="o">-</span><span class="n">omy</span><span class="p">,</span> <span class="n">omy</span><span class="o">-</span><span class="n">mv_y_min</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">mx</span> <span class="o">=</span> <span class="n">omx</span> <span class="o">+</span> <span class="n">hex4</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">my</span> <span class="o">=</span> <span class="n">omy</span> <span class="o">+</span> <span class="n">hex4</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">CHECK_MVRANGE</span><span class="p">(</span><span class="n">mx</span><span class="p">,</span> <span class="n">my</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                        <span class="n">COST_MV</span><span class="p">(</span> <span class="n">mx</span><span class="p">,</span> <span class="n">my</span> <span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="n">pixel</span> <span class="o">*</span><span class="n">pix_base</span> <span class="o">=</span> <span class="n">p_fref_w</span> <span class="o">+</span> <span class="n">omx</span> <span class="o">+</span> <span class="p">(</span><span class="n">omy</span><span class="o">-</span><span class="mi">4</span><span class="o">*</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">stride</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">dy</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">stride</span><span class="p">;</span> <span class="err">#</span><span class="n">define</span> <span class="n">SADS</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">x0</span><span class="p">,</span><span class="n">y0</span><span class="p">,</span><span class="n">x1</span><span class="p">,</span><span class="n">y1</span><span class="p">,</span><span class="n">x2</span><span class="p">,</span><span class="n">y2</span><span class="p">,</span><span class="n">x3</span><span class="p">,</span><span class="n">y3</span><span class="p">)</span>\
</span><span class='line'>                <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pixf</span><span class="p">.</span><span class="n">fpelcmp_x4</span><span class="p">[</span><span class="n">i_pixel</span><span class="p">](</span> <span class="n">p_fenc</span><span class="p">,</span>\
</span><span class='line'>                        <span class="n">pix_base</span> <span class="n">x0</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="p">(</span><span class="n">y0</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">k</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span><span class="o">*</span><span class="n">dy</span><span class="p">,</span>\
</span><span class='line'>                        <span class="n">pix_base</span> <span class="n">x1</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="p">(</span><span class="n">y1</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">k</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span><span class="o">*</span><span class="n">dy</span><span class="p">,</span>\
</span><span class='line'>                        <span class="n">pix_base</span> <span class="n">x2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="p">(</span><span class="n">y2</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">k</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span><span class="o">*</span><span class="n">dy</span><span class="p">,</span>\
</span><span class='line'>                        <span class="n">pix_base</span> <span class="n">x3</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="p">(</span><span class="n">y3</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">k</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span><span class="o">*</span><span class="n">dy</span><span class="p">,</span>\
</span><span class='line'>                        <span class="n">stride</span><span class="p">,</span> <span class="n">costs</span><span class="o">+</span><span class="mi">4</span><span class="o">*</span><span class="n">k</span> <span class="p">);</span>\
</span><span class='line'>                <span class="n">pix_base</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">*</span><span class="n">dy</span><span class="p">;</span> <span class="err">#</span><span class="n">define</span> <span class="n">ADD_MVCOST</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="n">costs</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">+=</span> <span class="n">p_cost_omvx</span><span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="mi">4</span><span class="o">*</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">p_cost_omvy</span><span class="p">[</span><span class="n">y</span><span class="o">*</span><span class="mi">4</span><span class="o">*</span><span class="n">i</span><span class="p">]</span> <span class="err">#</span><span class="n">define</span> <span class="n">MIN_MV</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>     <span class="n">COPY2_IF_LT</span><span class="p">(</span> <span class="n">bcost</span><span class="p">,</span> <span class="n">costs</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">dir</span><span class="p">,</span> <span class="n">x</span><span class="o">*</span><span class="mi">16</span><span class="o">+</span><span class="p">(</span><span class="n">y</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">15</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                <span class="n">SADS</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="o">+</span><span class="mi">0</span><span class="p">,</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">SADS</span><span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">+</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">+</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">SADS</span><span class="p">(</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">+</span><span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="mi">4</span><span class="p">,</span><span class="o">+</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">+</span><span class="mi">4</span><span class="p">,</span><span class="o">+</span><span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">SADS</span><span class="p">(</span> <span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="o">+</span><span class="mi">4</span><span class="p">,</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span> <span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="o">+</span><span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span>  <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span>  <span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span>  <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span>  <span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span>  <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span>  <span class="mi">6</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span>  <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span>  <span class="mi">8</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span>  <span class="mi">9</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span> <span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span> <span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span> <span class="mi">14</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">ADD_MVCOST</span><span class="p">(</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span>  <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span>  <span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span>  <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span>  <span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span>  <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span>  <span class="mi">6</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span>  <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span>  <span class="mi">8</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span>  <span class="mi">9</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span> <span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span> <span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span> <span class="mi">14</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">MIN_MV</span><span class="p">(</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">);</span> <span class="err">#</span><span class="n">undef</span> <span class="n">SADS</span> <span class="err">#</span><span class="n">undef</span> <span class="n">ADD_MVCOST</span> <span class="err">#</span><span class="n">undef</span> <span class="n">MIN_MV</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">dir</span> <span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">bmx</span> <span class="o">=</span> <span class="n">omx</span> <span class="o">+</span> <span class="n">i</span><span class="o">*</span><span class="p">(</span><span class="n">dir</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">bmy</span> <span class="o">=</span> <span class="n">omy</span> <span class="o">+</span> <span class="n">i</span><span class="o">*</span><span class="p">((</span><span class="n">dir</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">28</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">28</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">while</span><span class="p">(</span> <span class="o">++</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">i_me_range</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">bmy</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">mv_y_max</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">bmy</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">mv_y_min</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">bmx</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">mv_x_max</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">bmx</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">mv_x_min</span> <span class="p">)</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">me_hex2</span><span class="p">;</span>   <span class="c1">//6. iterative hexagon search</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<h3 id="umh-the-proposed-algorithm-for-umh">UMH 优化思路(The Proposed Algorithm For UMH)</h3>

<p>由于视频帧间具有时间相关性，大多数视频序列，当前宏块的方向与上一帧中相同位置宏块的方向高度相关。这意味着连续帧间，运动矢量有高度一致性。因此，当前宏块的运动方向可以通过之前帧对应坐标的方向来预测。基于运动方向预测，不同形状的搜索模式应用到 UMH 搜索模式。目标就是提升估计的运行时间，同时获得相同的质量。</p>

<p>方向可以通过运动矢量的角度来度量，可以使用如下公式：arcsin(-y / sqrt(x^2 + y^2)) * 180 / π 。</p>

<p>下面提出的算法使用上一帧中相同坐标块的运动矢量动态设置搜索非对称搜索模式的搜索长度，决定多六边形网格搜索的四分之一模式。同时，它根据上一步的方向来设计迭代六边形搜索模式。</p>

<h4 id="search-range-decision-for-uneven-cross-pattern">Search Range Decision for Uneven Cross Pattern</h4>

<p>在大多数视频序列中，水平方向上的运动要比垂直方向上的运动更加剧烈。正如上面提到的非对称交叉搜索中，水平方向上的长度是垂直方向上的长度的两倍。</p>

<p>在某些特殊的视频序列中，垂直方向上的运动比水平方向上的运动更加剧烈。因此我们可以动态的设置非对称交叉搜索模式的长度，来确保运动估计的质量。</p>

<p>基于连续帧的相关性，我们可以使用上一帧中相同坐标块的 MV（pmv）来预测当前块的的运动矢量，并且设置非对称交叉搜索模式的长度。如下：</p>

<p><code>
if (pmv.dx &gt; 2 * pmv.dy)
    PATTERN_SEARCH(CROSS1, 21, 1) //an uneven cross search: search length in vertical direction is 15 and in horizontal direction is 7.
else if (pmv.dy &gt; 2 * pmv.dx)
    PATTERN_SEARCH(CROSS2, 21, 1) //an uneven cross search: search length in vertical direction is 7 and in horizontal direction is 15.
else
    PATTERN_SEARCH(CROSS3, 21, 1) //an uneven cross search: search length in vertical direction is the same as in horizontal direction.
</code></p>

<h4 id="optimize-for-multi-hexagon-grid-search">Optimize for Multi-hexagon-grid Search</h4>

<p>多六边形网格搜索包括两部分：5x5 搜索和多六边形网格搜索。</p>

<p>大多数真实世界的视频序列都有中心偏移运动矢量分布。有超过 80% 的运动矢量在 5x5 区域的预测内，而有 70% 的运动矢量在 3x3 区域的预测内。尽管 5x5 的区域，比 3x3 的区域有更高(10%)的预测概率,但是搜索点的数量是它的 3 倍之多。因此我们选择 3x3 搜索而不是 5x5 搜索。</p>

<p>x264 中已经对 5x5 全搜索做了优化，甚至比上面提到的优化，还要更加彻底，x264 中关于 5x5 的全搜索，仅检查 4 个搜索点。它的代码更新迭代过程如下：</p>

<p><figure class='code'><figcaption><span>5x5_ESA </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">5</span><span class="n">x5</span> <span class="n">ESA</span> <span class="n">method</span> <span class="mi">1</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">omx</span> <span class="o">=</span> <span class="n">bmx</span><span class="p">;</span> <span class="n">omy</span> <span class="o">=</span> <span class="n">bmy</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="n">bcost</span> <span class="o">==</span> <span class="n">ucost2</span><span class="p">)</span> <span class="o">?</span> <span class="mi">4</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">24</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">square2</span><span class="p">[</span><span class="mi">24</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span>  <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">COST_MV</span><span class="p">(</span><span class="n">omx</span> <span class="o">+</span> <span class="n">square2</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">omy</span> <span class="o">+</span> <span class="n">square2</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">///////////////////////////&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">5</span><span class="n">x5</span> <span class="n">ESA</span> <span class="n">method</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">omx</span> <span class="o">=</span> <span class="n">bmx</span><span class="p">;</span> <span class="n">omy</span> <span class="o">=</span> <span class="n">bmy</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">bcost</span> <span class="o">!=</span> <span class="n">ucost2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">COST_MV_X4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">COST_MV_X4</span><span class="p">(</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">);</span>
</span><span class='line'><span class="n">COST_MV_X4</span><span class="p">(</span>  <span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class='line'><span class="n">COST_MV_X4</span><span class="p">(</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class='line'><span class="n">COST_MV_X4</span><span class="p">(</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span> <span class="p">);</span>
</span><span class='line'><span class="n">COST_MV_X4</span><span class="p">(</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">optimize</span> <span class="mi">5</span><span class="n">x5</span> <span class="n">ESA</span> <span class="n">method</span> <span class="mi">3</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">COST_MV_x4</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>第二部分是多六边形网格搜索，它有 64 个点需要检查。在此步骤中，我们根据当前宏块的运动方向预测，设计了 4 种模式，它有 20 个搜索点需要检查，这回极大的降低计算复杂度。算法描述如下：</p>

<p><img src="/images/h264_me/multi_hexagon_grid.png" title="‘H264 Motion Estimation UMHexagonS Search’" ></p>

<p>计算 pmv(x, y)的角度α：</p>

<p>a) 如果 α = 0-90，寻找 20 个搜索点，如图3(b),并找到新的 MBD，之后处理第 6 步<br />
b) 如果 α = 90-180，寻找 20 个搜索点，如图3(c),并找到新的 MBD，之后处理第 6 步<br />
c) 如果 α = 180-270，寻找 20 个搜索点，如图3(d),并找到新的 MBD，之后处理第 6 步<br />
d) 如果 α = -90-0，寻找 20 个搜索点，如图3(e),并找到新的 MBD，之后处理第 6 步</p>

<p>x264 中并没有进行此项优化，此处可能有一个搜索优化空间。</p>

<h4 id="optimize-for-iterative-hexagon-search">Optimize for Iterative Hexagon Search</h4>

<p>第六步是迭代六边形搜索模式，设置第五步中的 MBD 点作为搜索中心，最开始有 7 个点需要检查。然后在搜索过程中，六边形搜索不断前进，中心移动到六个端点中的任何一个。每次总是有三个新的点出现，而其他三个点是重复的。该算法根据前一步的方向设计新的六边形图案，避免了重复搜索冗余点。对第 6 步的优化过程如下：</p>

<p><img src="/images/h264_me/iterative_hexagon.png" title="‘H264 Motion Estimation UMHexagonS Search’" ></p>

<p>步骤6-1：</p>

<p>图4(a) 所示的六边形位于步骤 5 的 MBD 点的中心。如果在本步骤中找到的 MBD 点仍然与在上一步中找到的 MBD 点一致，则转至步骤6-3；否则计算上一步方向的角度，进行下一步处理。</p>

<p>a) 如果 α = 0-90,如图4(b)所示，搜索四个点；并寻找新的 MBD 点并执行步骤 6-2。<br />
b) 如果 α = 90-180,如图4(c)所示，搜索四个点；并寻找新的 MBD 点并执行步骤 6-2。<br />
a) 如果 α = 180-270,如图4(d)所示，搜索四个点；并寻找新的 MBD 点并执行步骤 6-2。<br />
a) 如果 α = -90-0,如图4(e)所示，搜索四个点；并寻找新的 MBD 点并执行步骤 6-2。</p>

<p>步骤6-2：</p>

<p>以上一步搜索的 MBD 点为中心，形成一个新的六边形。检查三个新的候选点，再次确定 MBD 点。如果 MBD 仍然与上一步中发现的 MBD 点重合，则转至步骤6-3；否则，如果 4 所示重复此步骤。</p>

<p>步骤6-3：</p>

<p>将搜索模式从六边形切换到小尺寸的六边形搜索。将检查基于角度评估的两个候选点。先的 MBD 点是运动矢量的最终解。</p>

<p>图 4(f) 显示了该方法的一个例子。</p>

<p>X264 中已经采用了此种优化方法，实现代码就是上一种的 X264_ME_HEX 代码。</p>

<h1 id="section-1">分数像素运动估计</h1>

<h2 id="section-2">亚像素搜索算法</h2>

<p>当整数像素搜索算法优化完毕后，亚像素搜索算法的时间占比就会提升，此时对亚像素搜索算法的优化，就不能忽视了。</p>

<H.264 标准="">中规定，运动估计为1/4像素精度，因此在 H.264 编码和解码的过程中，需要将画面中的像素进行插值——简单地说就是把原先的 1 个像素点拓展成 4x4 一共 16 个点。

下图显示了  H.264 编码和解码过程中像素插值情况。可以看出原先的 G 点的右下方通过插值的方式产生了 a、b、c、d 等一共 16 个点。  

<img src="/images/h264_me/Interpolation_of_luma_half-pel.PNG" title="'H264 Motion Estimation UMHexagonS Search'" >    

如图所示，1/4 像素内插一般分成两成：1. 半像素内插。这一步通过 6 抽头滤波器获得 5 个半像素点。2. 线性内插。这一步通过简单的线性内插获得剩余的 1/4 像素点。   

<img src="/images/h264_me/Interpolation_of_luma_quanter-pel.PNG" title="'H264 Motion Estimation UMHexagonS Search'" >   

图中半像素内插点为 b、m、h、s、j五个点。半像素内插方法是对整像素点进行 6 抽头滤波得到，滤波器的权重为(1/32, -5/32, 5/8, 5/8, -5/32, 1/32)。例如 b 的计算公式为： `b = round((E - 5F + 20G + 20H - 5I + J)/32)`。  

剩下几个半像素点的计算关系如下：

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>m: 由 B、D、H、N、S、U计算  
</span><span class='line'>h：由A、C、G、M、R、T计算  
</span><span class='line'>s：由K、L、M、N、P、Q计算  
</span><span class='line'>j：由cc、dd、h、m、ee、ff计算。 
</span><span class='line'>需要注意j点的运算量比较大，因为cc、dd、ee、ff都需要通过半像素内插方法进行计算。</span></code></pre></td></tr></table></div></figure>
在获得半像素点之后，就可以通过简单的线性内插获得 1/4 像素内插点了。1/4 像素内插的方式如下图所示。例如图中 a 点的计算公式如下： `A = round((G + b) / 2)`

在这里有一点需要注意： 位于 4 个角的 e、g、p、r 四个点并不是通过j 点计算的，而是通过b、h、s、m四个半像素点计算的。


</H.264>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之x264_macroblock_encode函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/12/25/x264-macroblock-encode/"/>
    <updated>2017-12-25T19:52:38-08:00</updated>
    <id>http://lazybing.github.io/blog/2017/12/25/x264-macroblock-encode</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#x264macroblockencode-" id="markdown-toc-x264macroblockencode-">x264_macroblock_encode 概述</a>    <ul>
      <li><a href="#ipcm-" id="markdown-toc-ipcm-">I_PCM 编码模式</a></li>
      <li><a href="#pskip--bskip-" id="markdown-toc-pskip--bskip-">P_Skip 模式和 B_Skip 模式编码</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录 X264 中对于<code>x264_macroblock_encode</code>函数的分析，该函数主要变换和量化，对应 X264 中的宏块编码模块。<br />
<!--more--></p>

<h2 id="x264macroblockencode-">x264_macroblock_encode 概述</h2>

<p>该函数主要在<code>x264_slice_write()</code>函数调用，它主要完成了编码器中的变换、量化部分，该函数主要是封装了<code>x264_macroblock_encode_internal()</code>函数，它包括如下几个步骤：</p>

<p><figure class='code'><figcaption><span>x264_macroblock_encode </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">x264_macroblock_encode</span><span class="p">(</span><span class="kt">x264_t</span> <span class="o">*</span><span class="n">h</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">CHROMA444</span><span class="p">)</span>
</span><span class='line'>        <span class="n">x264_macroblock_encode_internal</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">x264_macroblock_encode_internal</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<ol>
  <li>如果宏块类型为 PCM 类型，直接存储重建帧数据。</li>
  <li>如果宏块类型为 Skip 类型，调用<code>x264_macroblock_encode_skip()</code>编码 Skip 类型宏块，包括<code>P_SKIP</code>和<code>B_SKIP</code>类型。</li>
  <li>如果宏块类型为<code>I_16x16</code>，调用<code>x264_mb_encode_i16x16()</code>编码 Intra 16x16 类型的宏块，该函数除了进行 DCT 变换之外，还对 16 个小块的 DC 系数进行 Hadamard 变换。</li>
  <li>如果宏块类型为<code>I_4x4</code>，调用<code>x264_mb_encode_i4x4()</code>编码 Intra 4x4 类型的宏块。</li>
  <li>帧间宏块编码，该部分并没有单独的函数完成，而是写在了<code>x264_macroblock_encode_internal</code>函数内部。</li>
  <li>调用<code>x264_mb_encode_chroma()</code>函数编码色度卡。</li>
</ol>

<h3 id="ipcm-">I_PCM 编码模式</h3>

<p>I_PCM 是一种帧内编码模式，在该模式下，编码器直接传输图像的像素值，而不经过预测和变换。在一些特殊的情况下，特别是图像
内容不规则或者量化参数非常低时，该模式比常规的操作（帧内预测-变换-量化-编码）效率更高。</p>

<p>I_PCM 模式用于以下目的：</p>

<ol>
  <li>允许编码器精确地表示像素值。</li>
  <li>提供表示不规则图像内容的准确性，而不引起重大的数据量增加。</li>
  <li>严格限制宏块解码比特数，但不降低编码效率。</li>
</ol>

<p>对 I_PCM 类型的编码，实现代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">…</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_type</span> <span class="o">==</span> <span class="n">I_PCM</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//if PCM is chosen, we need to store reconstructed frame data</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">plane_count</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mc</span><span class="p">.</span><span class="n">copy</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;h-&amp;gt;mb.pic.p_fdec[p], FDEC_STRIDE, h-&amp;gt;mb.pic.p_fenc[p], FENC_STRIDE, 16&quot;</span><span class="o">&gt;</span><span class="n">PIXEL_16x16</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">chroma</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">16</span><span class="err"> »</span> <span class="n">CHROMA_V_SHIFT</span><span class="p">;</span>
</span><span class='line'>        <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mc</span><span class="p">.</span><span class="n">copy</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;h-&amp;gt;mb.pic.p_fdec[1], FDEC_STRIDE, h-&amp;gt;mb.pic.p_fenc[1], FENC_STRIDE, height&quot;</span><span class="o">&gt;</span><span class="n">PIXEL_8x8</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mc</span><span class="p">.</span><span class="n">copy</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;h-&amp;gt;mb.pic.p_fdec[2], FDEC_STRIDE, h-&amp;gt;mb.pic.p_fenc[2], FENC_STRIDE, height&quot;</span><span class="o">&gt;</span><span class="n">PIXEL_8x8</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">…</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="pskip--bskip-">P_Skip 模式和 B_Skip 模式编码</h3>

<ul>
  <li>P_Skip 类型宏块：即 COPY 宏块，无像素残差，无运动矢量残差(MVD)。直接利用预测 MV 得到的像素预测值。像素重构值= 像素预测值。</li>
  <li>B_Skip 类型宏块：无像素残差，无运动矢量残差(MVD)。解码时，通过 Direct 预测模式(时间或空间)计算出前、后向 MV 后，直接利用前、后向 MV 得到像素预测值。像素重构值 = 像素预测值。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之x264_macroblock_analyse函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/11/13/x264-macroblock-analyse/"/>
    <updated>2017-11-13T07:06:23-08:00</updated>
    <id>http://lazybing.github.io/blog/2017/11/13/x264-macroblock-analyse</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">宏块分析概述</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">帧内预测</a>    <ul>
      <li><a href="#intra16x16-" id="markdown-toc-intra16x16-">Intra16x16 预测模式分析</a></li>
      <li><a href="#intra4x4-" id="markdown-toc-intra4x4-">Intra4x4 预测模式分析</a></li>
    </ul>
  </li>
  <li><a href="#section-2" id="markdown-toc-section-2">帧间预测</a>    <ul>
      <li><a href="#section-3" id="markdown-toc-section-3">运动补偿块</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">运动矢量</a></li>
      <li><a href="#mv-" id="markdown-toc-mv-">MV 预测</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">帧间预测函数分析</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录 X264 中对于<code>x264_macroblock_analyse</code>函数的分析，该函数主要完成 2 个任务：对于帧内宏块，分析帧内预测模式；对于帧间宏块，进行运动估计、分析帧间预测模式。 <br />
<!--more--></p>

<h2 id="section">宏块分析概述</h2>

<p>首先看一下<code>x264_macroblock_analyse</code>函数实现过程的大体过程：</p>

<p>```
void x264_macroblock_analyse(x264_t *)
{
    h-&gt;mb.i_qp = x264_ratecontrol_mb_qp(h); //get QP of the MB
    …
    x264_mb_analyse_init(h, &amp;analysis, h-&gt;mb.i_qp);</p>

<pre><code>if(h-&gt;sh.i_type == SLICE_TYPE_I)
{
    x264_mb_analyse_intra(h, &amp;analysis, CONST_MAX);
}
else if(h-&gt;sh.i_type == SLICE_TYPE_P)
{
    x264_macroblock_probe_pskip(h);

    x264_mb_analyse_inter_p16x16(h, &amp;analysis);

    x264_mb_analyse_inter_p8x8(h, &amp;analysis);

    x264_mb_analyse_inter_p4x4(h, &amp;analysis, i);
    
    x264_mb_analyse_inter_p8x4(h, &amp;analysis, i);

    x264_mb_analyse_inter_p4x8(h, &amp;analysis, i);

    x264_mb_analyse_inter_p16x8(h, &amp;analysis, i_cost);

    x264_mb_analyse_inter_p8x16(h, &amp;analysis, i_cost);

    x264_me_refine_qpel(h, &amp;analysis.xxxx);
}
else if(h-&gt;sh.i_type == SLICE_TYPE_B)
{
    x264_mb_analyse_inter_b16x16(h, &amp;analysis);
    x264_mb_analyse_inter_b8x8( h, &amp;analysis );
    x264_mb_analyse_inter_b16x8( h, &amp;analysis );
} } ```
</code></pre>

<p>上面只是给出了该函数中调用的函数，并没有给出实际编码中的逻辑判断。它的实现如下：</p>

<ol>
  <li>如果当前是I Slice, 调用<code>x264_mb_analyse_intra()</code>进行Intra宏块的帧内预测模式分析。</li>
  <li>如果当前是P Slice, 则进行下面流程的分析：</li>
</ol>

<blockquote>
  <p>a.调用<code>x264_macroblock_probe_pskip()</code>分析是否为skip宏块，如果是skip宏块，则不再进行下面分析。<br />
b.调用<code>x264_mb_analyse_inter_p16x16()</code>分析P16x16帧间预测的代价。<br />
c.调用<code>x264_mb_analyse_inter_p8x8</code>分析P8x8帧间预测的代价。<br />
d.如果 P8x8 代价值小于 P16x16，则依次对 4 个 8x8 的子宏块分割进行判断： <br />
 * 调用<code>x264_mb_analyse_inter_p4x4()</code>分析 P4x4 帧间预测的代价。<br />
 * 如果P4x4代价值小于P8x8，则调用<code>x264_mb_analyse_inter_p8x4()</code>和<code>x264_mb_analyse_inter_p4x8()</code>分析P8x4和P4x8帧间预测的代价。<br />
e.如果P8x8代价值小于P16x16,调用<code>x264_mb_analyse_inter_p16x8()</code>和<code>x264_mb_analyse_inter_p8x16()</code>分析P16x8和P8x16帧间预测的代价。<br />
f.此外，还要调用<code>x264_mb_analyse_intra()</code>，检查当前宏块作为 Intra 宏块编码的代价是否小于作为 P 宏块编码的代价。</p>
</blockquote>

<ol>
  <li>如果当前是B Slice，则进行和 P Slice 类似的处理。</li>
</ol>

<h2 id="section-1">帧内预测</h2>

<p>帧内预测模式种，预测块 P 是基于已编码重建块和当前块形成的，对亮度像素来说，P 块用于 4x4 子块或者 16x16 宏块的相关操作。其中 4x4 宏块，有 9 种可选预测模式，适用于
带有大量细节的图像编码；16x16 宏块适用于比较平坦的图像，该宏块有 4 种预测模式，预测整个 16x16 亮度块。色度块也有 4 种预测模式，与 16x16 亮度块预测模式类似。编码器
通常会选择使 P 块和编码块之间差异最小的预测模式。</p>

<p>除此之外，还有一种帧内预测模式称为 I_PCM 编码模式。该模式下，编码器直接传输图像像素值，而不经过预测和变换。在一些特殊的情况下，特别是
图像内容不规则或者量化参数非常低时该模式比常规操作(帧内预测-变换-量化-熵编码)效率更高。I_PCM 模式用于以下目的：</p>

<ol>
  <li>允许编码器精确的表示像素值</li>
  <li>提供表示不规则图像内容的准确值，而不引起重大的数据量增加</li>
  <li>严格限制宏块解码比特数，但不损害编码效率</li>
</ol>

<p>关于帧内预测的原理介绍部分，参考<a href="http://lazybing.github.io/blog/2017/06/30/x264-intra-prediction/">X264 源码解析之帧内预测</a>。</p>

<p><code>x264_mb_analyse_intra</code>中关于帧内预测模式的选择判断，整体思路是，遍历所有可能的预测模式，包括 4 种 16x16 的预测模式、9 种 4x4 的预测模式，具体流程如下：</p>

<h3 id="intra16x16-">Intra16x16 预测模式分析</h3>
<p>对于非<code>AVC-Intra Compat</code>，首先根据当前宏块左边、上边宏块的可参考情况，判断该宏块可能存在的预测模式。
对于每个宏块，根据重建宏块和预测模式，调用<code>predict_16x16[]</code>做帧内预测;调用<code>x264_pixel_function_t</code>中的<code>mbcmp[]</code>计算编码代价。
选择最小的编码代价，记录编码代价的值，并记录编码模式。核心代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">…</span>
</span><span class='line'><span class="k">for</span><span class="p">(;</span> <span class="o">*</span><span class="n">predict_mode</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">predict_mode</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i_satd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i_mode</span> <span class="o">=</span> <span class="o">*</span><span class="n">predict_mode</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">b_lossless</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x264_predict_lossless_16x16</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i_mode</span><span class="p">);</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">predict_16x16</span><span class="p">[</span><span class="n">i_mode</span><span class="p">](</span><span class="n">p_dst</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">i_satd</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pixf</span><span class="p">.</span><span class="n">mbcmp</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">](</span><span class="n">p_dst</span><span class="p">,</span> <span class="n">FDEC_STRIDE</span><span class="p">,</span> <span class="n">psr</span><span class="p">,</span> <span class="n">FENC_STRIDE</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">lambda</span> <span class="o">*</span> <span class="n">bs_size_ue</span><span class="p">(</span><span class="n">x264_mb_pred_mode16x16_fix</span><span class="p">[</span><span class="n">i_mode</span><span class="p">]);</span>
</span><span class='line'><span class="n">COPY2_IF_LT</span><span class="p">(</span><span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_satd_i16x16</span><span class="p">,</span> <span class="n">i_satd</span><span class="p">,</span> <span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_predict16x16</span><span class="p">,</span> <span class="n">i_mode</span><span class="p">);</span>
</span><span class='line'><span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_satd_i16x16_dir</span><span class="p">[</span><span class="n">i_mode</span><span class="p">]</span> <span class="o">=</span> <span class="n">i_satd</span><span class="p">;</span> <span class="p">}</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<h3 id="intra4x4-">Intra4x4 预测模式分析</h3>

<p>循环处理 16 个 4x4 的块：首先调用<code>x264_mb_predict_intra4x4_mode()</code>函数根据周围宏块情况判断该宏块可用的预测模式。之后循环计算 9 种 Intra4x4 的帧内预测模式，调用<code>predict_4x4[]</code>函数根据重建帧宏块进行帧内预测，调用<code>x264_pixel_funtion_t</code>中的<code>mbcmp[]</code>计算编码代码。
获取最小代缴的 Intra4x4 模式。将 16 个 4x4 宏块的最小代价相加，得到总代价。核心代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">…</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int8_t</span> <span class="o">*</span><span class="n">predict_mode</span> <span class="o">=</span> <span class="n">predict_4x4_mode_available</span><span class="p">(</span><span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">b_avoid_topright</span><span class="p">,</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_neighbour4</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">idx</span><span class="p">);</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="o">*</span><span class="n">predict_mode</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">predict_mode</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i_satd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i_mode</span> <span class="o">=</span> <span class="o">*</span><span class="n">predict_mode</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">b_lossless</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">x264_predict_lossless_4x4</span><span class="p">(</span> <span class="n">h</span><span class="p">,</span> <span class="n">p_dst_by</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">i_mode</span> <span class="p">);</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">predict_4x4</span><span class="p">[</span><span class="n">i_mode</span><span class="p">](</span> <span class="n">p_dst_by</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">i_satd</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pixf</span><span class="p">.</span><span class="n">mbcmp</span><span class="p">[</span><span class="n">PIXEL_4x4</span><span class="p">](</span> <span class="n">p_dst_by</span><span class="p">,</span> <span class="n">FDEC_STRIDE</span><span class="p">,</span> <span class="n">p_src_by</span><span class="p">,</span> <span class="n">FENC_STRIDE</span> <span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">i_pred_mode</span> <span class="o">==</span> <span class="n">x264_mb_pred_mode4x4_fix</span><span class="p">(</span><span class="n">i_mode</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">i_satd</span> <span class="o">-=</span> <span class="n">lambda</span> <span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">i_satd</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">i_best</span> <span class="o">=</span> <span class="n">i_satd</span><span class="p">;</span>
</span><span class='line'>        <span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_predict4x4</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">i_mode</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">COPY2_IF_LT</span><span class="p">(</span> <span class="n">i_best</span><span class="p">,</span> <span class="n">i_satd</span><span class="p">,</span> <span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_predict4x4</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">i_mode</span> <span class="p">);</span> <span class="p">}</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<h2 id="section-2">帧间预测</h2>

<p>帧间预测时指利用视频时间域相关性，使用临近已编码图像像素预测当前图像的像素，以达到有效去除视频时域冗余的目的。
由于视频序列通常包括较强的时域相关性，因此预测残差值接近于0，将残差信号作为后续模块的输入进行变换、量化、扫描、熵编码，可实现对视频信号的高效压缩。</p>

<p>接下来主要介绍基于<code>Baseline Profile</code>支持的 P 帧预测模式工具以及<code>Main Profile</code>和<code>Extended Profile</code>支持的 B 帧和加权预测等帧间预测工具。</p>

<h3 id="section-3">运动补偿块</h3>

<p>每个宏块(16x16 像素)可分割为 4 种方式：一个 16x16,两个 16x8, 两个 8x16,四个 8x8。其运动补偿也有相应的四种。8x8 模式的每个子宏块还
可以继续分割，分割方式为：一个 8x8，两个 4x8，两个 8x4，四个 4x4。</p>

<p>每个分割或子宏块都有一个独立的运动补偿。每个 MV 必须被编码、传输，分割的选择也需要编码到压缩码流中。对于大的尺寸而言，MV 选择和分割
类型只需少量的比特，但运动补偿残差在多细节区域能量将非常高。小尺寸分割运动补偿残差能量低，但需要较多的比特表示 MV 和分割选择。分割
尺寸的选择影响了压缩性能。整体而言，大的分割尺寸适合平坦的区域，而小尺寸适合多细节区域。</p>

<p>宏块的色度成分(Cr 和 Cb)则为相应亮度的一半(水平和垂直各一半)。色度块采用和亮度块同样的分割模式，只是尺寸减半(水平和垂直方向都减半)。
例如，8x16 的亮度块相应色度块尺寸为 4x8，8x4 亮度块相应色度块尺寸为 4x2 等等。色度块的 MV 也是通过相应亮度 MV 水平和垂直分量减半而得。</p>

<h3 id="section-4">运动矢量</h3>

<p>帧间编码宏块的每个分割或子宏块都是从参考图像某一相同尺寸区域预测而得。两者之间的差异(MV)对亮度成分采用 1/4 像素精度，色度 1/8 像素精度。
亚像素位置的亮度和色度像素并不存在于参考图像中，需利用临近已编码点进行内插而得。如果 MV 的垂直和水平分量为正数，则参考块相应像素实际存在，
如果其中一个或两个为分数，则预测像素要通过参考帧中相应像素内插获得。</p>

<h3 id="mv-">MV 预测</h3>

<p>每个分割 MV 的编码需要相当数目的比特，特别是使用小分割尺寸时。为了减少传输比特数，可利用邻近分割的 MV 较强的相关性，MV 可由邻近已编码分割
的 MV 预测而得。预测矢量 MVp 基于已计算 MV 和 MVD（预测与当前的差异）并被编码和传送。MVp 则取决于运动补偿尺寸和邻近 MV 的有无。</p>

<p>示例如下：</p>

<p><img src="/images/macroblock_analyse/mv_prediction_macroblock.png"></p>

<p>E 为当前宏块或宏块分割子宏块。A、B、C 分别为 E 的左、上、右上方的三个相对应块。如果 E 的左边不止一个分割，取其中最上的一个为 A；上方
不止一个分割时，取最左边一个为 B。</p>

<p>1)  传输分割不包括 16x8 和 8x16 时，MVP 为 A、B、C 分割 MV 的中值；<br />
2） 16x8 分割，上面部分 MVp 由 B 预测，下面部分 MVp 由 A 预测；<br />
3） 8x16 分割，左面部分 MVp 由 A 预测，右面部分 MVp 由 B 预测；<br />
4） skipped MB 类型同 1 。</p>

<h3 id="section-5">帧间预测函数分析</h3>

<p>帧间预测的帧类型大多是 P 帧或 B 帧。对于 P 帧，它的宏块分析流程为：</p>

<ol>
  <li>调用<code>x264_macroblock_probe_pskip()</code>分析是否为 Skip 宏块，如果是则不进行后面的分析。</li>
  <li>调用<code>x264_mb_analyse_inter_p16x16()</code>分析 P16x16 帧间预测的代价。</li>
  <li>调用<code>x264_mb_analyse_inter_p8x8()</code>分析 P8x8 帧间预测的代价。</li>
  <li>如果 P8x8 代价小于 P16x16, 则依次对 4 个 8x8 的子宏块分割进行判断：<br />
 i. 调用<code>x264_mb_analyse_inter_p4x4()</code>分析 P4x4 的帧间预测代价。<br />
 ii. 如果 P4x4 代价值小于 P8x8，则调用<code>x264_mb_analyse_inter_p8x4()</code>和<code>x264_mb_analyse_inter_p4x8()</code>分析 P8x4 和 P4x8 帧间预测的代价。</li>
  <li>如果 P8x8 代价值小于 P16x8，调用<code>x264_mb_analyse_inter_p16x8()</code>和<code>x264_mb_analyse_inter_p8x16()</code>分析 P16x8 和 P8x16 帧间预测的代价。</li>
</ol>

]]></content>
  </entry>
  
</feed>
