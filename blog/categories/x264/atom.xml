<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:x264 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/x264/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2017-08-22T08:47:41-07:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_mc_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/22/x264-mc-init/"/>
    <updated>2017-08-22T07:48:31-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/22/x264-mc-init</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">运动补偿原理</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">参考资料</a></li>
</ul>

<p>本文主要记录 X264 中使用到的运动补偿。该函数主要对<code>x264_mc_functions_t</code>结构体中的函数指针进行赋值，
完成了像素内插、拷贝、求平均的函数等等。</p>

<!--more-->

<h3 id="section">运动补偿原理</h3>

<p><a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF">运动补偿</a>是一种描述相邻帧（相邻指编码关系上的相邻，播放顺序未必相邻）差别的方法，具体来说是描述前一帧的每个小块怎样移动到当前帧中的某个位置去。该方法常被视频压缩/视频编解码器用来减少视频序列中的时域冗余，还可用来进行去交织以及运动插值的操作。</p>

<p>一个视频序列包含一定数量的图片–通常称为帧（frame）。相邻的图片通常很相似，也就是说，包含了很多冗余。使用运动补偿的目的是通过消除这种冗余，来提高压缩比。
最早的运动补偿的设计只是简单的从当前帧中减去参考帧，从而得到通常含有较少能量（或者称为信息）的”残差”，从而可以用较低的码率进行编码。解码器可以通过简单的加法完全恢复编码帧。<br />
一个稍微复杂一点的设计是估计一下整帧场景的移动和场景中物体的移动，并将这些运动通过一定的参数编码到码流中去。这样预测帧上的像素值就是由参考帧上具有一定位移的相应像素值而生成的。这样的方法比简单的相减可以获得能量更小的残差，从而获得更好的压缩比–当然，用来描述运动的参数不能在码流中占据太大的部分，否则就会抵消复杂的运动估计带来的好处。<br />
通常，图像帧是一组一组进行处理的。每组的第一帧（通常是第一帧）在编码的时候不使用运动估计的办法，这种帧称为帧内编码帧（Intra frame）或者I帧。该组中的其它帧使用帧间编码帧（Inter frame），通常是P帧。这种编码方式通常被称为IPPPP，表示编码的时候第一帧是I帧，其它帧是P帧。<br />
在进行预测的时候，不仅仅可以从过去的帧来预测当前帧，还可以使用未来的帧来预测当前帧。当然在编码的时候，未来的帧必须比当前帧更早的编码，也就是说，编码的顺序和播放的顺序是不同的。通常这样的当前帧是使用过去和未来的I帧或者P帧同时进行预测，被称为双向预测帧，即B帧。这种编码方式的编码顺序的一个例子为IBBPBBPBBPBB。</p>

<p>运动补偿的方法包含：<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E5.85.A8.E5.B1.80.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">全局运动补偿</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E5.88.86.E5.9D.97.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">分块运动补偿</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E5.8F.AF.E5.8F.98.E5.88.86.E5.9D.97.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">可变分块运动补偿</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E9.87.8D.E5.8F.A0.E5.88.86.E5.9D.97.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">重叠分块运动个补偿</a>。</p>

<p>运动估计就是寻找最优或次优的运动向量的过程。某个块的预测误差量常常是指在运动补偿区域所有像素中，预测像素和实际像素数值的均方差或者绝对差别总和。</p>

<h3 id="section-1">参考资料</h3>

<ol>
  <li><a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF">运动补偿——维基百科</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之块滤波]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/22/deblock-filter/"/>
    <updated>2017-07-22T06:16:09-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/22/deblock-filter</id>
    <content type="html"><![CDATA[
<p>本文主要介绍 X264 中滤波的部分。<br />
<!--more--></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_zigzag_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/21/x264-zigzag-init/"/>
    <updated>2017-07-21T17:22:55-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/21/x264-zigzag-init</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#define-zigiyx-leveli--dctx4y" id="markdown-toc-define-zigiyx-leveli--dctx4y">define ZIG(i,y,x) level[i] = dct[x*4+y];</a></li>
</ul>

<p>本文主要记录 X264 中使用到的 zigzag 技术。
<!--more--></p>

<p>X264 中关于 zigzag 的函数定义在<code>dct.c</code>的<code>x264_zigzag_init</code>中。</p>

<p>首先看一下源码中关于 zigzag 的定义如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">x264_zigzag_init</span><span class="p">(</span> <span class="kt">int</span> <span class="n">cpu</span><span class="p">,</span> <span class="kt">x264_zigzag_function_t</span> <span class="o">*</span><span class="n">pf_progressive</span><span class="p">,</span> <span class="kt">x264_zigzag_function_t</span> <span class="o">*</span><span class="n">pf_interlaced</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pf_interlaced</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">scan_8x8</span>   <span class="o">=</span> <span class="n">zigzag_scan_8x8_field</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf_progressive</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">scan_8x8</span>  <span class="o">=</span> <span class="n">zigzag_scan_8x8_frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf_interlaced</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">scan_4x4</span>   <span class="o">=</span> <span class="n">zigzag_scan_4x4_field</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf_progressive</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">scan_4x4</span>  <span class="o">=</span> <span class="n">zigzag_scan_4x4_frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf_interlaced</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sub_8x8</span>    <span class="o">=</span> <span class="n">zigzag_sub_8x8_field</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf_progressive</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sub_8x8</span>   <span class="o">=</span> <span class="n">zigzag_sub_8x8_frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf_interlaced</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sub_4x4</span>    <span class="o">=</span> <span class="n">zigzag_sub_4x4_field</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf_progressive</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sub_4x4</span>   <span class="o">=</span> <span class="n">zigzag_sub_4x4_frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf_interlaced</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sub_4x4ac</span>  <span class="o">=</span> <span class="n">zigzag_sub_4x4ac_field</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf_progressive</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sub_4x4ac</span> <span class="o">=</span> <span class="n">zigzag_sub_4x4ac_frame</span><span class="p">;</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>从源码中可以看出 zigzag 扫描有两种分类方法：按照宏块大小可分为8x8扫描和4x4扫描、按照图像类型可分为<code>frame</code>扫描和<code>field</code>扫描。<br />
首先看一下最简单的4x4宏块帧扫描的代码描述：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define ZIGZAG4_FRAME\</span>
</span><span class='line'><span class="cp">    ZIGDC( 0,0,0) ZIG( 1,0,1) ZIG( 2,1,0) ZIG( 3,2,0)\</span>
</span><span class='line'><span class="cp">    ZIG( 4,1,1) ZIG( 5,0,2) ZIG( 6,0,3) ZIG( 7,1,2)\</span>
</span><span class='line'><span class="cp">    ZIG( 8,2,1) ZIG( 9,3,0) ZIG(10,3,1) ZIG(11,2,2)\</span>
</span><span class='line'><span class="cp">    ZIG(12,1,3) ZIG(13,2,3) ZIG(14,3,2) ZIG(15,3,3)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;define-zigiyx-leveli--dctx4y&quot;</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">ZIG</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">)</span> <span class="n">level</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">y</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span><span class="n">define</span> <span class="n">ZIGDC</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">)</span> <span class="n">ZIG</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">void</span> <span class="n">zigzag_scan_4x4_frame</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="n">level</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="n">dctcoef</span> <span class="n">dct</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ZIGZAG4_FRAME</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>将上面的定义展开如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">level</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面的代码只是简单的把一个4x4 宏块的二维数组扫描成了一个一维线性数组，但具体的扫描行为不够形象。</p>

<p>在<a href="http://files.cnblogs.com/files/irish/The_H.264_advanced_video_compression_standard.pdf">The H.264 advanced video compression standard</a>里有如下描述：</p>

<p><blockquote><p>Blocks of transform coefficients are scanned, i.e. converted to linear array, prior to entropy coding. The scan order is intended to group together significant coefficients, i.e. non-zero quantized coefficients. In a typical block in a progressive frame, non-zero coefficients tend to be clustered around the top left’DC’ coefficient. In this case, a zigzag scan order may be the most efficient, shown in 4x4 and 8x8 blocks. After scanning the block in a zigzag order, the coefficients are placed in a linear array in which most of the non-zero coefficients tend to occur near the start of the array.</p></p><p><p>However, in an interlaced field or a field of a progressive frame converted from interlaced content, vertical frequencies in each block tend to dominate because the field is vertically sub-sampled from the original scene. This means that non-zero coefficients ten to occur at the top and towards the left side of the block. A block in a field macroblock is therefore scanned in a modified field scan order.<br /></p><footer><strong>Block scan orders</strong></footer></blockquote></p>

<p>通过描述可以看出，通过扫描后，非零系统会集中在一维线性数组最开始的几个位置。示例图如下：</p>

<p><img src="/images/zigzag/progressive_scan_orders.png"></p>

<p><img src="/images/zigzag/field_scan_orders.png"></p>

<p>上面的图片给出了扫描的顺序，X264 中的源码，与 4x4 frame 类似，此处不在重复。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之码流控制]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/15/x264-rake-control/"/>
    <updated>2017-07-15T07:19:27-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/15/x264-rake-control</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">码率控制基本概念</a></li>
  <li><a href="#x264-" id="markdown-toc-x264-">X264 中码率控制</a>    <ul>
      <li><a href="#x264--qp" id="markdown-toc-x264--qp">X264 中关于 QP</a></li>
    </ul>
  </li>
  <li><a href="#section-1" id="markdown-toc-section-1">参考文档</a></li>
</ul>

<p>本文主要记录 X264 中使用到的码流控制。</p>

<!--more-->

<h2 id="section">码率控制基本概念</h2>

<p>码率控制是指视频编码中决定输出码率的过程。首先介绍一下 X264 中使用到的与码率控制相关的几个概念：</p>

<ul>
  <li>
    <p>CQP(Constant QP),恒定QP（Quantization Parameter）,追求量化失真的恒定，瞬时码率会随场景
复杂度而波动，该模式基本被淘汰(被 CRF 取代)，只有用”-pq 0”来进行无损编码还有价值。</p>
  </li>
  <li>
    <p>CRF(Constant Rate Factor),恒定质量因子，与恒定 QP 类似，但追求主观感知到的质量恒定，瞬时码率也
会随场景复杂度波动。对于快速运动或细节丰富的场景会适当增大量化失真（因为人眼不易注意到），反之
对于静止或平坦区域则减少量化失真。</p>
  </li>
  <li>
    <p>ABR(Average Bitrate),平均码率，追求整个文件的码率平均达到指定值（对于流媒体有何特殊之处？）。
瞬时码率也会随着场景复杂度波动，但最终要受平均值的约束。</p>
  </li>
  <li>
    <p>CBR(Constant Bitrate),恒定码率。前面几个模式都属于可变码率（瞬时码率在波动），即VBR（Variable Bitrate）；
恒定码率与之相对，即码率保持不变。</p>
  </li>
</ul>

<p>x264 并没有直接提供 CBR 这种模式，但可以通过在 VBR 模式的基础上做进一步限制来达到恒定码率的目标。
CRF 和 ABR 模式都能通过<code>--vbv-maxrate</code> <code>--vbv-bufsize</code>来限制码率波动。</p>

<p>关于这几个概念的参考如下：</p>

<p>1.<a href="https://codesequoia.wordpress.com/2010/04/19/what-are-cbr-vbv-and-cpb/">Waht are CBR,VBV and CPB?</a><br />
2.<a href="https://trac.ffmpeg.org/wiki/Encode/H.264">FFmpeg and H.264 Encoding Guide</a><br />
3.<a href="http://slhck.info/video/2017/02/24/crf-guide.html">CRF Guide(Constant Rate Factor in X264 and X265)</a><br />
4.<a href="https://en.wikibooks.org/wiki/MeGUI/x264_Settings">MeGUI/x264 setting</a></p>

<h2 id="x264-">X264 中码率控制</h2>

<p>X264 中对于码率控制方法有三种：X264_RC_CQP、X264_RC_CRF、X264_RC_ABR。默认情况是选择 CRF 方法，设置是在
<code>x264_param_default</code>函数里设置的</p>

<p><code>
param-&gt;rc.i_rc_method = X264_RC_CRF;
param-&gt;rc.f_rf_constant = 23;
</code>
关于这三种方法，网上有提到优先级是<code>ABR&gt;CQP&gt;CRF</code>的，但分析 X264 的源码，并没有看出有优先级顺序，关于码率控制方法的设置代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">OPT</span><span class="p">(</span><span class="err">“</span><span class="n">bitrate</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_bitrate</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_rc_method</span> <span class="o">=</span> <span class="n">X264_RC_ABR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">OPT2</span><span class="p">(</span><span class="err">“</span><span class="n">qp</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">qp_constant</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_rc_method</span> <span class="o">=</span> <span class="n">X264_RC_CQP</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">OPT</span><span class="p">(</span><span class="err">“</span><span class="n">crf</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rc</span><span class="p">.</span><span class="n">f_rf_constant</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_rc_method</span> <span class="o">=</span> <span class="n">X264_RC_CRF</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="x264--qp">X264 中关于 QP</h3>

<p>首先看一段 X264 中关于 QP 值的代码，该段代码在<code>x264_ratecontrol_new</code>：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">rc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ip_offset</span> <span class="o">=</span> <span class="mf">6.0</span> <span class="o">*</span> <span class="n">log2f</span><span class="p">(</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_ip_factor</span><span class="p">);</span>
</span><span class='line'><span class="n">rc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pb_offset</span> <span class="o">=</span> <span class="mf">6.0</span> <span class="o">*</span> <span class="n">log2f</span><span class="p">(</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_pb_factor</span><span class="p">);</span>
</span><span class='line'><span class="n">rc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">qp_constant</span><span class="p">[</span><span class="n">SLICE_TYPE_P</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span><span class="p">;</span>
</span><span class='line'><span class="n">rc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">qp_constant</span><span class="p">[</span><span class="n">SLICE_TYPE_I</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_clip3</span><span class="p">(</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span> <span class="o">-</span> <span class="n">rc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ip_offset</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">QP_MAX</span><span class="p">);</span>
</span><span class='line'><span class="n">rc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">qp_constant</span><span class="p">[</span><span class="n">SLICE_TYPE_B</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_clip3</span><span class="p">(</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span> <span class="o">+</span> <span class="n">rc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pb_offset</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">QP_MAX</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>从上面的代码可以看出，默认的<code>i_qp_constant</code>或者通过命令行传入的<code>qp</code> <code>qp_constant</code>实际设置的是 P 帧的 QP。
I 帧和 B 帧的 QP 设置是根据<code>f_ip_factor</code> <code>f_pb_factor</code>计算得到。</p>

<p>在研究编码算法的时候，一般会选用 CQP 方法，设定 QP 为 24、28、32、36、40等（一般选 4 个 QP 值），然后比较算法优劣。
在 X264 中，关于QPmin、QPmax、QPstep的默认设置如下：<br />
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">param</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_min</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">param</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_max</span> <span class="o">=</span> <span class="n">QP_MAX</span><span class="p">;</span>
</span><span class='line'><span class="n">param</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_step</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <p>QPmin,默认值：0.定义 X264 可以使用的最小量化值，量化值越小，输出视频质量越好。当 QP 小于某一个值后，
编码输出的宏块质量与原始块极为相近，此时没必要继续降低 QP。如果开启了自适应量化器（默认开启），不建议
提高 QPmin 的值，因为这会降低平滑背景区域的视觉质量。</p>
  </li>
  <li>
    <p>QPmax，默认值：51.定义 X264 可以使用的最大量化值。默认值 51 是 H.264 规格中可供使用的最大量化值。如果
想要控制 X264 输出的最低品质，可以将此值设置的小一些。QPmin 和 QPmax 在CRF，ABR方法下是有效的，过低的设置
QPmax，可能造成 ABR 码率控制失败。不建议调整该参数。</p>
  </li>
  <li>
    <p>QPstep，默认值：4.设置两帧间量化值的最大变化幅度。</p>
  </li>
</ul>

<p>帧间 QP 变化，帧内宏块 QP 不变，输出码率未知，各帧输出视觉质量有变化（高 QP 底码率的情况下会更明显）。</p>

<p>比较三种码率控制方式如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">码率控制方法</th>
      <th style="text-align: center">视觉质量稳定性</th>
      <th style="text-align: center">即时输出码率</th>
      <th style="text-align: center">输出文件大小</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">CBR</td>
      <td style="text-align: center">不稳定</td>
      <td style="text-align: center">恒定</td>
      <td style="text-align: center">可控</td>
    </tr>
    <tr>
      <td style="text-align: center">VBR</td>
      <td style="text-align: center">稳定</td>
      <td style="text-align: center">变化</td>
      <td style="text-align: center">不可控</td>
    </tr>
    <tr>
      <td style="text-align: center">ABR</td>
      <td style="text-align: center">基本稳定</td>
      <td style="text-align: center">变化</td>
      <td style="text-align: center">可控</td>
    </tr>
  </tbody>
</table>

<h2 id="section-1">参考文档</h2>

<ol>
  <li><a href="https://mailman.videolan.org/pipermail/x264-devel/2010-February/006933.html">Making sense out of x264 rate control methods</a></li>
  <li><a href="http://slhck.info/video/2017/03/01/rate-control.html">Understanding Rate Control Modes (x264, x265)</a></li>
  <li><a href="http://slhck.info/video/2017/02/24/crf-guide.html">CRF Guide (Constant Rate Factor in x264 and x265)</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_dct_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/10/x264-dct-init/"/>
    <updated>2017-07-10T08:48:23-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/10/x264-dct-init</id>
    <content type="html"><![CDATA[
<p>本文主要记录 X264 中对于 DCT 变换的初始化过程。</p>

<!--more-->

<p>DCT 变化理论比较抽象，先从 X264 中代码入手，然后经过 DCT 变换后，比较变换前和变换后的数据，能够更好的理解 DCT 变换。</p>

<p>X264 中对 DCT 各类函数的定义都在<code>common/dct.c</code>里面。其中 sub4x4_dct 定义如下：</p>

<p><figure class='code'><figcaption><span>sub4x4_dct </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">pixel_sub_wxh</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">diff</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i_size</span><span class="p">,</span>
</span><span class='line'>                                  <span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i_pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i_pix2</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">i_size</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">i_size</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">diff</span><span class="p">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i_size</span><span class="p">]</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
</span><span class='line'>        <span class="n">pix1</span> <span class="o">+=</span> <span class="n">i_pix1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pix2</span> <span class="o">+=</span> <span class="n">i_pix2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">void</span> <span class="n">sub4x4_dct</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="n">dct</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">dctcoef</span> <span class="n">d</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>    <span class="n">dctcoef</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">pixel_sub_wxh</span><span class="p">(</span> <span class="n">d</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">pix1</span><span class="p">,</span> <span class="n">FENC_STRIDE</span><span class="p">,</span> <span class="n">pix2</span><span class="p">,</span> <span class="n">FDEC_STRIDE</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s03</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s12</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">d03</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">d12</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">+</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">d03</span> <span class="o">+</span>   <span class="n">d12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">-</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tmp</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span>   <span class="n">d03</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">d12</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s03</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s12</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">d03</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">d12</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">+</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">d03</span> <span class="o">+</span>   <span class="n">d12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">-</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span>   <span class="n">d03</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">d12</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>其中的<code>pixel_sub_wxh</code>是获取 pix1 和 pix2 两块数据的残差。这里对 pix1 和 pix2 随意举两个相似的4x4的矩阵作为例子，
之所以要<code>随意</code>是为了突出其普遍性，适用于大多数的 DCT 变换；而<code>相似</code>是因为 pix1 为编码块，pix2 为预测块，它们理论上就应该是相似的。为此举例如下：</p>

<p>$pix1[4x4]=[(23,24,27,29),(24,25,28,28),(26,28,29,29),(26,25,28,30)];$<br />
$pix2[4x4]=[(20,23,27,29),(23,24,26,27),(25,26,25,28),(26,24,28,30)];$</p>

<p>将 pix1 和 pix2 经过<code>pixel_sub_wxh</code>的计算后，得到矩阵d[4x4]为[(3,1,0,0),(1,1,2,1),(1,2,4,1),(0,1,0,0)]。<br />
经第一个for循环后得到tmp[4x4]=[]</p>

]]></content>
  </entry>
  
</feed>
