<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:x264 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/x264/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2019-05-09T17:23:07-07:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之x264_macroblock_encode函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/12/25/x264-macroblock-encode/"/>
    <updated>2017-12-25T19:52:38-08:00</updated>
    <id>http://lazybing.github.io/blog/2017/12/25/x264-macroblock-encode</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#x264macroblockencode-" id="markdown-toc-x264macroblockencode-">x264_macroblock_encode 概述</a>    <ul>
      <li><a href="#ipcm-" id="markdown-toc-ipcm-">I_PCM 编码模式</a></li>
      <li><a href="#pskip--bskip-" id="markdown-toc-pskip--bskip-">P_Skip 模式和 B_Skip 模式编码</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录 X264 中对于<code>x264_macroblock_encode</code>函数的分析，该函数主要变换和量化，对应 X264 中的宏块编码模块。<br />
<!--more--></p>

<h2 id="x264macroblockencode-">x264_macroblock_encode 概述</h2>

<p>该函数主要在<code>x264_slice_write()</code>函数调用，它主要完成了编码器中的变换、量化部分，该函数主要是封装了<code>x264_macroblock_encode_internal()</code>函数，它包括如下几个步骤：</p>

<p><figure class='code'><figcaption><span>x264_macroblock_encode </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">x264_macroblock_encode</span><span class="p">(</span><span class="kt">x264_t</span> <span class="o">*</span><span class="n">h</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">CHROMA444</span><span class="p">)</span>
</span><span class='line'>        <span class="n">x264_macroblock_encode_internal</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">x264_macroblock_encode_internal</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<ol>
  <li>如果宏块类型为 PCM 类型，直接存储重建帧数据。</li>
  <li>如果宏块类型为 Skip 类型，调用<code>x264_macroblock_encode_skip()</code>编码 Skip 类型宏块，包括<code>P_SKIP</code>和<code>B_SKIP</code>类型。</li>
  <li>如果宏块类型为<code>I_16x16</code>，调用<code>x264_mb_encode_i16x16()</code>编码 Intra 16x16 类型的宏块，该函数除了进行 DCT 变换之外，还对 16 个小块的 DC 系数进行 Hadamard 变换。</li>
  <li>如果宏块类型为<code>I_4x4</code>，调用<code>x264_mb_encode_i4x4()</code>编码 Intra 4x4 类型的宏块。</li>
  <li>帧间宏块编码，该部分并没有单独的函数完成，而是写在了<code>x264_macroblock_encode_internal</code>函数内部。</li>
  <li>调用<code>x264_mb_encode_chroma()</code>函数编码色度卡。</li>
</ol>

<h3 id="ipcm-">I_PCM 编码模式</h3>

<p>I_PCM 是一种帧内编码模式，在该模式下，编码器直接传输图像的像素值，而不经过预测和变换。在一些特殊的情况下，特别是图像
内容不规则或者量化参数非常低时，该模式比常规的操作（帧内预测-变换-量化-编码）效率更高。</p>

<p>I_PCM 模式用于以下目的：</p>

<ol>
  <li>允许编码器精确地表示像素值。</li>
  <li>提供表示不规则图像内容的准确性，而不引起重大的数据量增加。</li>
  <li>严格限制宏块解码比特数，但不降低编码效率。</li>
</ol>

<p>对 I_PCM 类型的编码，实现代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">…</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_type</span> <span class="o">==</span> <span class="n">I_PCM</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//if PCM is chosen, we need to store reconstructed frame data</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">plane_count</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mc</span><span class="p">.</span><span class="n">copy</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;h-&amp;gt;mb.pic.p_fdec[p], FDEC_STRIDE, h-&amp;gt;mb.pic.p_fenc[p], FENC_STRIDE, 16&quot;</span><span class="o">&gt;</span><span class="n">PIXEL_16x16</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">chroma</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">16</span><span class="err"> »</span> <span class="n">CHROMA_V_SHIFT</span><span class="p">;</span>
</span><span class='line'>        <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mc</span><span class="p">.</span><span class="n">copy</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;h-&amp;gt;mb.pic.p_fdec[1], FDEC_STRIDE, h-&amp;gt;mb.pic.p_fenc[1], FENC_STRIDE, height&quot;</span><span class="o">&gt;</span><span class="n">PIXEL_8x8</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mc</span><span class="p">.</span><span class="n">copy</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;h-&amp;gt;mb.pic.p_fdec[2], FDEC_STRIDE, h-&amp;gt;mb.pic.p_fenc[2], FENC_STRIDE, height&quot;</span><span class="o">&gt;</span><span class="n">PIXEL_8x8</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">…</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="pskip--bskip-">P_Skip 模式和 B_Skip 模式编码</h3>

<ul>
  <li>P_Skip 类型宏块：即 COPY 宏块，无像素残差，无运动矢量残差(MVD)。直接利用预测 MV 得到的像素预测值。像素重构值= 像素预测值。</li>
  <li>B_Skip 类型宏块：无像素残差，无运动矢量残差(MVD)。解码时，通过 Direct 预测模式(时间或空间)计算出前、后向 MV 后，直接利用前、后向 MV 得到像素预测值。像素重构值 = 像素预测值。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之x264_macroblock_analyse函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/11/13/x264-macroblock-analyse/"/>
    <updated>2017-11-13T07:06:23-08:00</updated>
    <id>http://lazybing.github.io/blog/2017/11/13/x264-macroblock-analyse</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">宏块分析概述</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">帧内预测</a>    <ul>
      <li><a href="#intra16x16-" id="markdown-toc-intra16x16-">Intra16x16 预测模式分析</a></li>
      <li><a href="#intra4x4-" id="markdown-toc-intra4x4-">Intra4x4 预测模式分析</a></li>
    </ul>
  </li>
  <li><a href="#section-2" id="markdown-toc-section-2">帧间预测</a>    <ul>
      <li><a href="#section-3" id="markdown-toc-section-3">运动补偿块</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">运动矢量</a></li>
      <li><a href="#mv-" id="markdown-toc-mv-">MV 预测</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">帧间预测函数分析</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录 X264 中对于<code>x264_macroblock_analyse</code>函数的分析，该函数主要完成 2 个任务：对于帧内宏块，分析帧内预测模式；对于帧间宏块，进行运动估计、分析帧间预测模式。 <br />
<!--more--></p>

<h2 id="section">宏块分析概述</h2>

<p>首先看一下<code>x264_macroblock_analyse</code>函数实现过程的大体过程：</p>

<p>```
void x264_macroblock_analyse(x264_t *)
{
    h-&gt;mb.i_qp = x264_ratecontrol_mb_qp(h); //get QP of the MB
    …
    x264_mb_analyse_init(h, &amp;analysis, h-&gt;mb.i_qp);</p>

<pre><code>if(h-&gt;sh.i_type == SLICE_TYPE_I)
{
    x264_mb_analyse_intra(h, &amp;analysis, CONST_MAX);
}
else if(h-&gt;sh.i_type == SLICE_TYPE_P)
{
    x264_macroblock_probe_pskip(h);

    x264_mb_analyse_inter_p16x16(h, &amp;analysis);

    x264_mb_analyse_inter_p8x8(h, &amp;analysis);

    x264_mb_analyse_inter_p4x4(h, &amp;analysis, i);
    
    x264_mb_analyse_inter_p8x4(h, &amp;analysis, i);

    x264_mb_analyse_inter_p4x8(h, &amp;analysis, i);

    x264_mb_analyse_inter_p16x8(h, &amp;analysis, i_cost);

    x264_mb_analyse_inter_p8x16(h, &amp;analysis, i_cost);

    x264_me_refine_qpel(h, &amp;analysis.xxxx);
}
else if(h-&gt;sh.i_type == SLICE_TYPE_B)
{
    x264_mb_analyse_inter_b16x16(h, &amp;analysis);
    x264_mb_analyse_inter_b8x8( h, &amp;analysis );
    x264_mb_analyse_inter_b16x8( h, &amp;analysis );
} } ```
</code></pre>

<p>上面只是给出了该函数中调用的函数，并没有给出实际编码中的逻辑判断。它的实现如下：</p>

<ol>
  <li>如果当前是I Slice, 调用<code>x264_mb_analyse_intra()</code>进行Intra宏块的帧内预测模式分析。</li>
  <li>如果当前是P Slice, 则进行下面流程的分析：</li>
</ol>

<blockquote>
  <p>a.调用<code>x264_macroblock_probe_pskip()</code>分析是否为skip宏块，如果是skip宏块，则不再进行下面分析。<br />
b.调用<code>x264_mb_analyse_inter_p16x16()</code>分析P16x16帧间预测的代价。<br />
c.调用<code>x264_mb_analyse_inter_p8x8</code>分析P8x8帧间预测的代价。<br />
d.如果 P8x8 代价值小于 P16x16，则依次对 4 个 8x8 的子宏块分割进行判断： <br />
 * 调用<code>x264_mb_analyse_inter_p4x4()</code>分析 P4x4 帧间预测的代价。<br />
 * 如果P4x4代价值小于P8x8，则调用<code>x264_mb_analyse_inter_p8x4()</code>和<code>x264_mb_analyse_inter_p4x8()</code>分析P8x4和P4x8帧间预测的代价。<br />
e.如果P8x8代价值小于P16x16,调用<code>x264_mb_analyse_inter_p16x8()</code>和<code>x264_mb_analyse_inter_p8x16()</code>分析P16x8和P8x16帧间预测的代价。<br />
f.此外，还要调用<code>x264_mb_analyse_intra()</code>，检查当前宏块作为 Intra 宏块编码的代价是否小于作为 P 宏块编码的代价。</p>
</blockquote>

<ol>
  <li>如果当前是B Slice，则进行和 P Slice 类似的处理。</li>
</ol>

<h2 id="section-1">帧内预测</h2>

<p>帧内预测模式种，预测块 P 是基于已编码重建块和当前块形成的，对亮度像素来说，P 块用于 4x4 子块或者 16x16 宏块的相关操作。其中 4x4 宏块，有 9 种可选预测模式，适用于
带有大量细节的图像编码；16x16 宏块适用于比较平坦的图像，该宏块有 4 种预测模式，预测整个 16x16 亮度块。色度块也有 4 种预测模式，与 16x16 亮度块预测模式类似。编码器
通常会选择使 P 块和编码块之间差异最小的预测模式。</p>

<p>除此之外，还有一种帧内预测模式称为 I_PCM 编码模式。该模式下，编码器直接传输图像像素值，而不经过预测和变换。在一些特殊的情况下，特别是
图像内容不规则或者量化参数非常低时该模式比常规操作(帧内预测-变换-量化-熵编码)效率更高。I_PCM 模式用于以下目的：</p>

<ol>
  <li>允许编码器精确的表示像素值</li>
  <li>提供表示不规则图像内容的准确值，而不引起重大的数据量增加</li>
  <li>严格限制宏块解码比特数，但不损害编码效率</li>
</ol>

<p>关于帧内预测的原理介绍部分，参考<a href="http://lazybing.github.io/blog/2017/06/30/x264-intra-prediction/">X264 源码解析之帧内预测</a>。</p>

<p><code>x264_mb_analyse_intra</code>中关于帧内预测模式的选择判断，整体思路是，遍历所有可能的预测模式，包括 4 种 16x16 的预测模式、9 种 4x4 的预测模式，具体流程如下：</p>

<h3 id="intra16x16-">Intra16x16 预测模式分析</h3>
<p>对于非<code>AVC-Intra Compat</code>，首先根据当前宏块左边、上边宏块的可参考情况，判断该宏块可能存在的预测模式。
对于每个宏块，根据重建宏块和预测模式，调用<code>predict_16x16[]</code>做帧内预测;调用<code>x264_pixel_function_t</code>中的<code>mbcmp[]</code>计算编码代价。
选择最小的编码代价，记录编码代价的值，并记录编码模式。核心代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">…</span>
</span><span class='line'><span class="k">for</span><span class="p">(;</span> <span class="o">*</span><span class="n">predict_mode</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">predict_mode</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i_satd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i_mode</span> <span class="o">=</span> <span class="o">*</span><span class="n">predict_mode</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">b_lossless</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x264_predict_lossless_16x16</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i_mode</span><span class="p">);</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">predict_16x16</span><span class="p">[</span><span class="n">i_mode</span><span class="p">](</span><span class="n">p_dst</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">i_satd</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pixf</span><span class="p">.</span><span class="n">mbcmp</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">](</span><span class="n">p_dst</span><span class="p">,</span> <span class="n">FDEC_STRIDE</span><span class="p">,</span> <span class="n">psr</span><span class="p">,</span> <span class="n">FENC_STRIDE</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">lambda</span> <span class="o">*</span> <span class="n">bs_size_ue</span><span class="p">(</span><span class="n">x264_mb_pred_mode16x16_fix</span><span class="p">[</span><span class="n">i_mode</span><span class="p">]);</span>
</span><span class='line'><span class="n">COPY2_IF_LT</span><span class="p">(</span><span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_satd_i16x16</span><span class="p">,</span> <span class="n">i_satd</span><span class="p">,</span> <span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_predict16x16</span><span class="p">,</span> <span class="n">i_mode</span><span class="p">);</span>
</span><span class='line'><span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_satd_i16x16_dir</span><span class="p">[</span><span class="n">i_mode</span><span class="p">]</span> <span class="o">=</span> <span class="n">i_satd</span><span class="p">;</span> <span class="p">}</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<h3 id="intra4x4-">Intra4x4 预测模式分析</h3>

<p>循环处理 16 个 4x4 的块：首先调用<code>x264_mb_predict_intra4x4_mode()</code>函数根据周围宏块情况判断该宏块可用的预测模式。之后循环计算 9 种 Intra4x4 的帧内预测模式，调用<code>predict_4x4[]</code>函数根据重建帧宏块进行帧内预测，调用<code>x264_pixel_funtion_t</code>中的<code>mbcmp[]</code>计算编码代码。
获取最小代缴的 Intra4x4 模式。将 16 个 4x4 宏块的最小代价相加，得到总代价。核心代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">…</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int8_t</span> <span class="o">*</span><span class="n">predict_mode</span> <span class="o">=</span> <span class="n">predict_4x4_mode_available</span><span class="p">(</span><span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">b_avoid_topright</span><span class="p">,</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_neighbour4</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">idx</span><span class="p">);</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="o">*</span><span class="n">predict_mode</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">predict_mode</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i_satd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i_mode</span> <span class="o">=</span> <span class="o">*</span><span class="n">predict_mode</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">.</span><span class="n">b_lossless</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">x264_predict_lossless_4x4</span><span class="p">(</span> <span class="n">h</span><span class="p">,</span> <span class="n">p_dst_by</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">i_mode</span> <span class="p">);</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">predict_4x4</span><span class="p">[</span><span class="n">i_mode</span><span class="p">](</span> <span class="n">p_dst_by</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">i_satd</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pixf</span><span class="p">.</span><span class="n">mbcmp</span><span class="p">[</span><span class="n">PIXEL_4x4</span><span class="p">](</span> <span class="n">p_dst_by</span><span class="p">,</span> <span class="n">FDEC_STRIDE</span><span class="p">,</span> <span class="n">p_src_by</span><span class="p">,</span> <span class="n">FENC_STRIDE</span> <span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">i_pred_mode</span> <span class="o">==</span> <span class="n">x264_mb_pred_mode4x4_fix</span><span class="p">(</span><span class="n">i_mode</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">i_satd</span> <span class="o">-=</span> <span class="n">lambda</span> <span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">i_satd</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">i_best</span> <span class="o">=</span> <span class="n">i_satd</span><span class="p">;</span>
</span><span class='line'>        <span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_predict4x4</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">i_mode</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">COPY2_IF_LT</span><span class="p">(</span> <span class="n">i_best</span><span class="p">,</span> <span class="n">i_satd</span><span class="p">,</span> <span class="n">a</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_predict4x4</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">i_mode</span> <span class="p">);</span> <span class="p">}</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<h2 id="section-2">帧间预测</h2>

<p>帧间预测时指利用视频时间域相关性，使用临近已编码图像像素预测当前图像的像素，以达到有效去除视频时域冗余的目的。
由于视频序列通常包括较强的时域相关性，因此预测残差值接近于0，将残差信号作为后续模块的输入进行变换、量化、扫描、熵编码，可实现对视频信号的高效压缩。</p>

<p>接下来主要介绍基于<code>Baseline Profile</code>支持的 P 帧预测模式工具以及<code>Main Profile</code>和<code>Extended Profile</code>支持的 B 帧和加权预测等帧间预测工具。</p>

<h3 id="section-3">运动补偿块</h3>

<p>每个宏块(16x16 像素)可分割为 4 种方式：一个 16x16,两个 16x8, 两个 8x16,四个 8x8。其运动补偿也有相应的四种。8x8 模式的每个子宏块还
可以继续分割，分割方式为：一个 8x8，两个 4x8，两个 8x4，四个 4x4。</p>

<p>每个分割或子宏块都有一个独立的运动补偿。每个 MV 必须被编码、传输，分割的选择也需要编码到压缩码流中。对于大的尺寸而言，MV 选择和分割
类型只需少量的比特，但运动补偿残差在多细节区域能量将非常高。小尺寸分割运动补偿残差能量低，但需要较多的比特表示 MV 和分割选择。分割
尺寸的选择影响了压缩性能。整体而言，大的分割尺寸适合平坦的区域，而小尺寸适合多细节区域。</p>

<p>宏块的色度成分(Cr 和 Cb)则为相应亮度的一半(水平和垂直各一半)。色度块采用和亮度块同样的分割模式，只是尺寸减半(水平和垂直方向都减半)。
例如，8x16 的亮度块相应色度块尺寸为 4x8，8x4 亮度块相应色度块尺寸为 4x2 等等。色度块的 MV 也是通过相应亮度 MV 水平和垂直分量减半而得。</p>

<h3 id="section-4">运动矢量</h3>

<p>帧间编码宏块的每个分割或子宏块都是从参考图像某一相同尺寸区域预测而得。两者之间的差异(MV)对亮度成分采用 1/4 像素精度，色度 1/8 像素精度。
亚像素位置的亮度和色度像素并不存在于参考图像中，需利用临近已编码点进行内插而得。如果 MV 的垂直和水平分量为正数，则参考块相应像素实际存在，
如果其中一个或两个为分数，则预测像素要通过参考帧中相应像素内插获得。</p>

<h3 id="mv-">MV 预测</h3>

<p>每个分割 MV 的编码需要相当数目的比特，特别是使用小分割尺寸时。为了减少传输比特数，可利用邻近分割的 MV 较强的相关性，MV 可由邻近已编码分割
的 MV 预测而得。预测矢量 MVp 基于已计算 MV 和 MVD（预测与当前的差异）并被编码和传送。MVp 则取决于运动补偿尺寸和邻近 MV 的有无。</p>

<p>示例如下：</p>

<p><img src="/images/macroblock_analyse/mv_prediction_macroblock.png"></p>

<p>E 为当前宏块或宏块分割子宏块。A、B、C 分别为 E 的左、上、右上方的三个相对应块。如果 E 的左边不止一个分割，取其中最上的一个为 A；上方
不止一个分割时，取最左边一个为 B。</p>

<p>1)  传输分割不包括 16x8 和 8x16 时，MVP 为 A、B、C 分割 MV 的中值；<br />
2） 16x8 分割，上面部分 MVp 由 B 预测，下面部分 MVp 由 A 预测；<br />
3） 8x16 分割，左面部分 MVp 由 A 预测，右面部分 MVp 由 B 预测；<br />
4） skipped MB 类型同 1 。</p>

<h3 id="section-5">帧间预测函数分析</h3>

<p>帧间预测的帧类型大多是 P 帧或 B 帧。对于 P 帧，它的宏块分析流程为：</p>

<ol>
  <li>调用<code>x264_macroblock_probe_pskip()</code>分析是否为 Skip 宏块，如果是则不进行后面的分析。</li>
  <li>调用<code>x264_mb_analyse_inter_p16x16()</code>分析 P16x16 帧间预测的代价。</li>
  <li>调用<code>x264_mb_analyse_inter_p8x8()</code>分析 P8x8 帧间预测的代价。</li>
  <li>如果 P8x8 代价小于 P16x16, 则依次对 4 个 8x8 的子宏块分割进行判断：<br />
 i. 调用<code>x264_mb_analyse_inter_p4x4()</code>分析 P4x4 的帧间预测代价。<br />
 ii. 如果 P4x4 代价值小于 P8x8，则调用<code>x264_mb_analyse_inter_p8x4()</code>和<code>x264_mb_analyse_inter_p4x8()</code>分析 P8x4 和 P4x8 帧间预测的代价。</li>
  <li>如果 P8x8 代价值小于 P16x8，调用<code>x264_mb_analyse_inter_p16x8()</code>和<code>x264_mb_analyse_inter_p8x16()</code>分析 P16x8 和 P8x16 帧间预测的代价。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_bitstream_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/11/12/bitstream-init/"/>
    <updated>2017-11-12T06:48:31-08:00</updated>
    <id>http://lazybing.github.io/blog/2017/11/12/bitstream-init</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#h264-spec-annex-b" id="markdown-toc-h264-spec-annex-b">H264 SPEC Annex B</a></li>
  <li><a href="#jm--annexb-" id="markdown-toc-jm--annexb-">JM 中关于 AnnexB 的源码分析</a></li>
  <li><a href="#if-trace" id="markdown-toc-if-trace">if TRACE</a>    <ul>
      <li><a href="#x264--bitstream-" id="markdown-toc-x264--bitstream-">X264 中 Bitstream 的源码分析</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录 X264 中对于 bitstream 的处理方法，它主要实现 SPEC 中<code>Annex B:Byte stream format</code>中的规定。
<!--more--></p>

<h2 id="h264-spec-annex-b">H264 SPEC Annex B</h2>

<p>首先看一下，H264 的 SPEC 中关于 Bitstream 中的规定。</p>

<p><figure class='code'><figcaption><span>AnndexB </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">byte_stream_nal_unit</span><span class="p">(</span><span class="n">NumBytesInNALunit</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">next_bits</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x000001</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>          <span class="n">next_bits</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x00000001</span><span class="p">)</span>
</span><span class='line'>        <span class="n">leading_zero_8bits</span> <span class="c1">//equal to 0x00 f(8)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="n">next_bits</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x000001</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zero_byte</span>  <span class="c1">//equal to 0x00 f(8)</span>
</span><span class='line'>
</span><span class='line'><span class="n">start_code_prefix_one_3bytes</span> <span class="c1">//equal to 0x000001 f(24)</span>
</span><span class='line'>
</span><span class='line'><span class="n">nal_unit</span><span class="p">(</span><span class="n">NumBytesInNALunit</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">more_data_in_byte_stream</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">next_bits</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x000001</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">next_bits</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x00000001</span><span class="p">)</span>
</span><span class='line'>    <span class="n">trailing_zero_8bits</span> <span class="c1">//equal to 0x00 f(8) } </span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>SPEC 中定义的解码的部分，因为我们根据上面的描述，可以理出 H264 的大致解析过程：</p>

<ol>
  <li>解码过程开始时，解码器把其当前的位置初始化为字节流的起始位置。然后提取，并丢弃每一个<code>leading_zero_8bits</code>语法元素(如果存在的话)，移动当前位置至某一时刻的字节处，直到比特流的当前位置紧接的四个字节为四字节序列<code>0x00000001</code>。</li>
  <li>当字节流里的紧接的四个字节构成四字节序列<code>0x00000001</code>，对比特流中下一个字节(为 zero_byte 语法元素)进行提取并丢弃时，字节流的当前位置设为紧接被丢弃的字节的字节位置。</li>
  <li>提取与丢弃比特流中下一个三字节序列(为 start_code_prefix_one_3bytes)，且比特流当前位置设为此紧接被丢弃的 3 字节序列的字节的位置。</li>
  <li>NumBytesInNALunit 设为自当前字节位置起至下述条件前的位置的最后一个字节，且包括最后一个字节的编号。
a. 一个三字节序列的排列等于<code>0x000000</code>，或
b. 字一个三字节序列的排列等于<code>0x000001</code>，或 
c. 字节流的结束，由未规定的方式判决。</li>
  <li>NumBytesInNALunit 字节从比特流中移除，字节流的当前位置前移 NumBytesInNALunit 字节。这个字节序列为 <code>nal_unit(NumBytesInNALunit)</code>,并用 NAL 单元解码过程进行解码。</li>
  <li>当字节流中的当前位置不为字节流的结尾(由未规定的方式判决)，且字节流中的下一个字节不是等于<code>0x000001</code>开始的三字节序列，也不是等于<code>0x00000001</code>开始的四字节序列。解码器提取并丢弃每一个<code>trailing_zero_8bits</code>语法元素，移动字节流中的当前位置到某一时刻的一个字节处，直到字节流里的当前位置接下来的四个字节构成四字节的序列<code>0x00000001</code>或已至字节流的结尾(由未规定的当时判决)。</li>
</ol>

<h2 id="jm--annexb-">JM 中关于 AnnexB 的源码分析</h2>

<p>在看<code>X264</code>源码之前，让我们先看一下 JM 中关于 AnnexB 的解码的源码实现部分。</p>

<p><code>JM</code>中关于 AnnexB 部分的描述在<code>jm\decod\src\annexb.c</code>中,首先看一下其中最重要的一个函数<code>int GetAnnexbNALU(NALU_t *nalu)</code>,该函数的声明如下：</p>

<p><code>
/*
 * Brief: Returns the size of the NALU( bits between start codes in case of
 *        Annex B, nalu-&gt;buf and nalu-&gt;len are filled. Other field in
 *        nalu-&gt;remain uninitialized( will be taken care of by NALUtoRBSP.
 * Return: 0 if there is nothing any more to read(EOF)
 *         -1 in case of any error
 * note Side-effect: Returns length of start-code in bytes.
 * 
 * Note: GetAnnexbNALU expects start codes at byte aligned positions in the file
 */
int GetAnnexbNALU(NALU_t *nalu);
</code></p>

<p><code>GetAnnexbNALU</code>的定义如下：</p>

<p><figure class='code'><figcaption><span>GetAnnexbNALU </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">GetAnnexbNALU</span><span class="p">(</span><span class="n">NALU_t</span> <span class="o">*</span><span class="n">nalu</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">info2</span><span class="p">,</span> <span class="n">info3</span><span class="p">,</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">StartCodeFound</span><span class="p">,</span> <span class="n">rewind</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">Buf</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">LeadingZero8BitsCount</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">TrailingZero8Bits</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">((</span><span class="n">Buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">max_size</span> <span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">no_mem_exit</span><span class="p">(</span><span class="err">“</span><span class="nl">GetAnnexbNALU</span><span class="p">:</span> <span class="n">Buf</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//如果start_code前还有数据，丢弃start_code前leading_zero_8bits</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">feof</span><span class="p">(</span><span class="n">bits</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">fgetc</span><span class="p">(</span><span class="n">bits</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="n">feof</span><span class="p">(</span><span class="n">bits</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">pos</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span> <span class="err">“</span><span class="n">GetAnnexbNALU</span> <span class="n">can</span><span class="err">’</span><span class="n">t</span> <span class="n">read</span> <span class="n">start</span> <span class="n">code</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">!=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span> <span class="p">(</span><span class="err">“</span><span class="nl">GetAnnexbNALU</span><span class="p">:</span> <span class="n">no</span> <span class="n">Start</span> <span class="n">Code</span> <span class="n">at</span> <span class="n">the</span> <span class="n">begin</span> <span class="n">of</span> <span class="n">the</span> <span class="n">NALU</span><span class="p">,</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="n">pos</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span> <span class="p">(</span><span class="err">“</span><span class="nl">GetAnnexbNALU</span><span class="p">:</span> <span class="n">no</span> <span class="n">Start</span> <span class="n">Code</span> <span class="n">at</span> <span class="n">the</span> <span class="n">begin</span> <span class="n">of</span> <span class="n">the</span> <span class="n">NALU</span><span class="p">,</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pos</span><span class="o">==</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">startcodeprefix_len</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="n">LeadingZero8BitsCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">LeadingZero8BitsCount</span> <span class="o">=</span> <span class="n">pos</span><span class="o">-</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">startcodeprefix_len</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//the 1st byte stream NAL unit can has leading_zero_8bits, but subsequent ones are not</span>
</span><span class='line'>  <span class="c1">//allowed to contain it since these zeros(if any) are considered trailing_zero_8bits</span>
</span><span class='line'>  <span class="c1">//of the previous byte stream NAL unit.</span>
</span><span class='line'>  <span class="c1">//字节流数据的第一个 NAL 单元才会有leading_zero_8bits;后面的 NALU 不会包含 leading_zero_8bits,</span>
</span><span class='line'>  <span class="c1">//因为这些 leading_zero_8bits 会被看做前一个 NAL 单元后面的 trailing_zero_8bits</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">IsFirstByteStreamNALU</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">LeadingZero8BitsCount</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span> <span class="p">(</span><span class="err">“</span><span class="nl">GetAnnexbNALU</span><span class="p">:</span> <span class="n">The</span> <span class="n">leading_zero_8bits</span> <span class="n">syntax</span> <span class="n">can</span> <span class="n">only</span> <span class="n">be</span> <span class="n">present</span> <span class="n">in</span> <span class="n">the</span> <span class="n">first</span> <span class="n">byte</span> <span class="n">stream</span> <span class="n">NAL</span> <span class="n">unit</span><span class="p">,</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">IsFirstByteStreamNALU</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">StartCodeFound</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">info2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">info3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">StartCodeFound</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">feof</span> <span class="p">(</span><span class="n">bits</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Count the trailing_zero_8bits</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="n">TrailingZero8Bits</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">TrailingZero8Bits</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">startcodeprefix_len</span><span class="o">-</span><span class="n">LeadingZero8BitsCount</span><span class="o">-</span><span class="n">TrailingZero8Bits</span><span class="p">;</span>
</span><span class='line'>      <span class="n">memcpy</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Buf</span><span class="p">[</span><span class="n">LeadingZero8BitsCount</span><span class="o">+</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">startcodeprefix_len</span><span class="p">],</span> <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">len</span><span class="p">);</span>   <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">forbidden_bit</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">»</span><span class="mi">7</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nal_reference_idc</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">»</span><span class="mi">5</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>      <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nal_unit_type</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0x1f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// printf (“GetAnnexbNALU, eof case: pos %d nalu-&amp;gt;len %d, nalu-&amp;gt;reference_idc %d, nal_unit_type %d \n”, pos, nalu-&amp;gt;len, nalu-&amp;gt;nal_reference_idc, nalu-&amp;gt;nal_unit_type);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;if-trace&quot;</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">TRACE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fprintf</span> <span class="p">(</span><span class="n">p_trace</span><span class="p">,</span> <span class="err">“\</span><span class="n">n</span><span class="err">\</span><span class="n">nLast</span> <span class="n">NALU</span> <span class="n">in</span> <span class="n">File</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fprintf</span> <span class="p">(</span><span class="n">p_trace</span><span class="p">,</span> <span class="err">“</span><span class="n">Annex</span> <span class="n">B</span> <span class="n">NALU</span> <span class="n">w</span><span class="o">/</span> <span class="o">%</span><span class="n">s</span> <span class="n">startcode</span><span class="p">,</span> <span class="n">len</span> <span class="o">%</span><span class="n">d</span><span class="p">,</span> <span class="n">forbidden_bit</span> <span class="o">%</span><span class="n">d</span><span class="p">,</span> <span class="n">nal_reference_idc</span> <span class="o">%</span><span class="n">d</span><span class="p">,</span> <span class="n">nal_unit_type</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>    <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">startcodeprefix_len</span> <span class="o">==</span> <span class="mi">4</span><span class="o">?</span><span class="err">”</span><span class="kt">long</span><span class="err">”</span><span class="o">:</span><span class="err">”</span><span class="kt">short</span><span class="err">”</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">len</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">forbidden_bit</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nal_reference_idc</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nal_unit_type</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fflush</span> <span class="p">(</span><span class="n">p_trace</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//找 start_code，先找0x00000001,后找0x000001</span>
</span><span class='line'>    <span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">fgetc</span> <span class="p">(</span><span class="n">bits</span><span class="p">);</span>
</span><span class='line'>    <span class="n">info3</span> <span class="o">=</span> <span class="n">FindStartCode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">4</span><span class="p">],</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">info3</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">info2</span> <span class="o">=</span> <span class="n">FindStartCode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">3</span><span class="p">],</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">StartCodeFound</span> <span class="o">=</span> <span class="p">(</span><span class="n">info2</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">info3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//Count the trailing_zero_8bits</span>
</span><span class='line'>  <span class="c1">//计算 trailing_zero_8bits,如果start_code为0x000001,trailing_zero_8bits 肯定不存在</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">info3</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>	<span class="c1">//if the detected start code is 00 00 01, trailing_zero_8bits is sure not to be present</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">5</span><span class="o">-</span><span class="n">TrailingZero8Bits</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">TrailingZero8Bits</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Here, we have found another start code (and read length of startcode bytes more than we should</span>
</span><span class='line'>  <span class="c1">// have.  Hence, go back in the file</span>
</span><span class='line'>  <span class="n">rewind</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">info3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rewind</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">info2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rewind</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span> <span class="nl">Panic</span><span class="p">:</span> <span class="n">Error</span> <span class="n">in</span> <span class="n">next</span> <span class="n">start</span> <span class="n">code</span> <span class="n">search</span> <span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">fseek</span> <span class="p">(</span><span class="n">bits</span><span class="p">,</span> <span class="n">rewind</span><span class="p">,</span> <span class="n">SEEK_CUR</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">snprintf</span> <span class="p">(</span><span class="n">errortext</span><span class="p">,</span> <span class="n">ET_SIZE</span><span class="p">,</span> <span class="err">“</span><span class="nl">GetAnnexbNALU</span><span class="p">:</span> <span class="n">Cannot</span> <span class="n">fseek</span> <span class="o">%</span><span class="n">d</span> <span class="n">in</span> <span class="n">the</span> <span class="n">bit</span> <span class="n">stream</span> <span class="n">file</span><span class="err">”</span><span class="p">,</span> <span class="n">rewind</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class='line'>    <span class="n">error</span><span class="p">(</span><span class="n">errortext</span><span class="p">,</span> <span class="mi">600</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Here the leading zeros(if any), Start code, the complete NALU, trailing zeros(if any)</span>
</span><span class='line'>  <span class="c1">// and the next start code is in the Buf.</span>
</span><span class='line'>  <span class="c1">// The size of Buf is pos, pos+rewind are the number of bytes excluding the next</span>
</span><span class='line'>  <span class="c1">// start code, and (pos+rewind)-startcodeprefix_len-LeadingZero8BitsCount-TrailingZero8Bits</span>
</span><span class='line'>  <span class="c1">// is the size of the NALU.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="n">pos</span><span class="o">+</span><span class="n">rewind</span><span class="p">)</span><span class="o">-</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">startcodeprefix_len</span><span class="o">-</span><span class="n">LeadingZero8BitsCount</span><span class="o">-</span><span class="n">TrailingZero8Bits</span><span class="p">;</span>
</span><span class='line'>  <span class="n">memcpy</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Buf</span><span class="p">[</span><span class="n">LeadingZero8BitsCount</span><span class="o">+</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">startcodeprefix_len</span><span class="p">],</span> <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>  <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">forbidden_bit</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">»</span><span class="mi">7</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nal_reference_idc</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">»</span><span class="mi">5</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nal_unit_type</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0x1f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//printf (“GetAnnexbNALU, regular case: pos %d nalu-&amp;gt;len %d, nalu-&amp;gt;reference_idc %d, nal_unit_type %d \n”, pos, nalu-&amp;gt;len, nalu-&amp;gt;nal_reference_idc, nalu-&amp;gt;nal_unit_type);</span>
</span><span class='line'><span class="cp">#if TRACE</span>
</span><span class='line'>  <span class="n">fprintf</span> <span class="p">(</span><span class="n">p_trace</span><span class="p">,</span> <span class="err">“\</span><span class="n">n</span><span class="err">\</span><span class="n">nAnnex</span> <span class="n">B</span> <span class="n">NALU</span> <span class="n">w</span><span class="o">/</span> <span class="o">%</span><span class="n">s</span> <span class="n">startcode</span><span class="p">,</span> <span class="n">len</span> <span class="o">%</span><span class="n">d</span><span class="p">,</span> <span class="n">forbidden_bit</span> <span class="o">%</span><span class="n">d</span><span class="p">,</span> <span class="n">nal_reference_idc</span> <span class="o">%</span><span class="n">d</span><span class="p">,</span> <span class="n">nal_unit_type</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>    <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">startcodeprefix_len</span> <span class="o">==</span> <span class="mi">4</span><span class="o">?</span><span class="err">”</span><span class="kt">long</span><span class="err">”</span><span class="o">:</span><span class="err">”</span><span class="kt">short</span><span class="err">”</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">len</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">forbidden_bit</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nal_reference_idc</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nal_unit_type</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fflush</span> <span class="p">(</span><span class="n">p_trace</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">(</span><span class="n">pos</span><span class="o">+</span><span class="n">rewind</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>找<code>start_code</code>的定义如下,该函数的参数<code>zeros_in_startcode</code>可能为 3 或 4,寻找<code>0x000001</code>或<code>0x00000001</code>。</p>

<p><figure class='code'><figcaption><span>FindStartCode </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;!</span>
</span><span class='line'> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;***</span>
</span><span class='line'> <span class="o">*</span> <span class="err">\</span><span class="n">brief</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">returns</span> <span class="k">if</span> <span class="n">new</span> <span class="n">start</span> <span class="n">code</span> <span class="n">is</span> <span class="n">found</span> <span class="n">at</span> <span class="n">byte</span> <span class="n">aligned</span> <span class="n">position</span> <span class="n">buf</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">new</span><span class="o">-</span><span class="n">startcode</span> <span class="n">is</span> <span class="n">of</span> <span class="n">form</span> <span class="n">N</span> <span class="mh">0x00</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">followed</span> <span class="n">by</span> <span class="n">a</span> <span class="mh">0x01</span> <span class="n">byte</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span>  <span class="err">\</span><span class="k">return</span>
</span><span class='line'> <span class="o">*</span>     <span class="mi">1</span> <span class="k">if</span> <span class="n">start</span><span class="o">-</span><span class="n">code</span> <span class="n">is</span> <span class="n">found</span> <span class="n">or</span>                      <span class="err">\</span><span class="n">n</span>
</span><span class='line'> <span class="o">*</span>     <span class="mi">0</span><span class="p">,</span> <span class="n">indicating</span> <span class="n">that</span> <span class="n">there</span> <span class="n">is</span> <span class="n">no</span> <span class="n">start</span> <span class="n">code</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span>  <span class="err">\</span><span class="n">param</span> <span class="n">Buf</span>
</span><span class='line'> <span class="o">*</span>     <span class="n">pointer</span> <span class="n">to</span> <span class="n">byte</span><span class="o">-</span><span class="n">stream</span>
</span><span class='line'> <span class="o">*</span>  <span class="err">\</span><span class="n">param</span> <span class="n">zeros_in_startcode</span>
</span><span class='line'> <span class="o">*</span>     <span class="n">indicates</span> <span class="n">number</span> <span class="n">of</span> <span class="mh">0x00</span> <span class="n">bytes</span> <span class="n">in</span> <span class="n">start</span><span class="o">-</span><span class="n">code</span><span class="p">.</span>
</span><span class='line'> <span class="o">**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;**</span>
</span><span class='line'> <span class="err">*/</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">FindStartCode</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">Buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">zeros_in_startcode</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">info</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">info</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">zeros_in_startcode</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">info</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">info</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="x264--bitstream-">X264 中 Bitstream 的源码分析</h2>

<p><code>X264</code>中关于<code>AnnexB</code>部分的描述主要是在<code>common/bitstream.c</code>中的<code>void x264_bitstream_init(int cpu, x264_bitstream_function_t *pf)</code>完成。
其中的<code>x264_bitstream_function_t</code>结构体定义如下：</p>

<p><figure class='code'><figcaption><span>x264_bitstream_function_t </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">nal_escape</span><span class="p">)</span> <span class="p">(</span> <span class="kt">uint8_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dst</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">end</span> <span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">cabac_block_residual_internal</span><span class="p">)(</span> <span class="n">dctcoef</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b_interlaced</span><span class="p">,</span>
</span><span class='line'>                                           <span class="kt">intptr_t</span> <span class="n">ctx_block_cat</span><span class="p">,</span> <span class="kt">x264_cabac_t</span> <span class="o">*</span><span class="n">cb</span> <span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">cabac_block_residual_rd_internal</span><span class="p">)(</span> <span class="n">dctcoef</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b_interlaced</span><span class="p">,</span>
</span><span class='line'>                                              <span class="kt">intptr_t</span> <span class="n">ctx_block_cat</span><span class="p">,</span> <span class="kt">x264_cabac_t</span> <span class="o">*</span><span class="n">cb</span> <span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">cabac_block_residual_8x8_rd_internal</span><span class="p">)(</span> <span class="n">dctcoef</span> <span class="o">*</span><span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b_interlaced</span><span class="p">,</span>
</span><span class='line'>                                                  <span class="kt">intptr_t</span> <span class="n">ctx_block_cat</span><span class="p">,</span> <span class="kt">x264_cabac_t</span> <span class="o">*</span><span class="n">cb</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="kt">x264_bitstream_function_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>其中<code>x264_bitstream_init</code>的定义如下：</p>

<p><figure class='code'><figcaption><span>X264_bitstream_init </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">X264_bitstream_init</span><span class="p">(</span><span class="kt">int</span> <span class="n">cpu</span><span class="p">,</span> <span class="kt">x264_bitstream_function_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pf</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">pf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pf</span><span class="p">));</span>
</span><span class='line'>    <span class="n">pf</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nal_escape</span> <span class="o">=</span> <span class="n">x264_nal_escape_c</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">cabac_block_residual_internal</span> <span class="o">=</span> <span class="n">x264_cabac_block_residual_internal_sse2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">cabac_block_residual_rd_internal</span> <span class="o">=</span> <span class="n">x264_cabac_block_residual_rd_internal_sse2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pf</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">cabac_block_residual_8x8_rd_internal</span> <span class="o">=</span> <span class="n">x264_cabac_block_residual_8x8_rd_internal_sse2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>其中的<code>x264_nal_escape_c</code>定义如下：</p>

<p><figure class='code'><figcaption><span>x264_nal_escape_c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="nf">x264_nal_escape_c</span><span class="p">(</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">end</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">src</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">end</span> <span class="p">)</span> <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">src</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">src</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">end</span> <span class="p">)</span> <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">src</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="n">src</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">end</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">src</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mh">0x03</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">dst</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">dst</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>            <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="mh">0x03</span><span class="p">;</span>
</span><span class='line'>        <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">src</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dst</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>最后，给出 X264 中关于每个 NALU 的编码的实现：</p>

<p><figure class='code'><figcaption><span>x264_nal_encode </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**</span>
</span><span class='line'> <span class="o">*</span> <span class="nl">x264_nal_encode</span><span class="p">:</span>
</span><span class='line'> <span class="o">**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;**&lt;/</span><span class="n">strong</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="n">x264_nal_encode</span><span class="p">(</span> <span class="kt">x264_t</span> <span class="o">*</span><span class="n">h</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">x264_nal_t</span> <span class="o">*</span><span class="n">nal</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">src</span> <span class="o">=</span> <span class="n">nal</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">p_payload</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">end</span> <span class="o">=</span> <span class="n">nal</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">p_payload</span> <span class="o">+</span> <span class="n">nal</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_payload</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">orig_dst</span> <span class="o">=</span> <span class="n">dst</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">b_annexb</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">nal</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">b_long_startcode</span> <span class="p">)</span>
</span><span class='line'>        <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="mh">0x00</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="mh">0x00</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="mh">0x00</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="mh">0x01</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="cm">/* save room for size later */</span>
</span><span class='line'>    <span class="n">dst</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* nal header */</span>
</span><span class='line'><span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="p">(</span> <span class="mh">0x00</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">7</span> <span class="p">)</span> <span class="o">|</span> <span class="p">(</span> <span class="n">nal</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_ref_idc</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">5</span> <span class="p">)</span> <span class="o">|</span> <span class="n">nal</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">dst</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">bsf</span><span class="p">.</span><span class="n">nal_escape</span><span class="p">(</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">end</span> <span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="n">dst</span> <span class="o">-</span> <span class="n">orig_dst</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Write the size header for mp4/etc */</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">param</span><span class="p">.</span><span class="n">b_annexb</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/* Size doesn&#39;t include the size of the header we&#39;re writing now. */</span>
</span><span class='line'>    <span class="n">orig_dst</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">24</span><span class="p">;</span>
</span><span class='line'>    <span class="n">orig_dst</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">16</span><span class="p">;</span>
</span><span class='line'>    <span class="n">orig_dst</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>    <span class="n">orig_dst</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">nal</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_payload</span> <span class="o">=</span> <span class="n">size</span><span class="o">+</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="n">nal</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">p_payload</span> <span class="o">=</span> <span class="n">orig_dst</span><span class="p">;</span>
</span><span class='line'><span class="n">x264_emms</span><span class="p">();</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之参考帧]]></title>
    <link href="http://lazybing.github.io/blog/2017/10/19/reference-frame/"/>
    <updated>2017-10-19T07:53:49-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/10/19/reference-frame</id>
    <content type="html"><![CDATA[
<p>本篇博客主要记录<code>X264</code>中关于参考帧管理。</p>

<!--more-->

<p><code>X264</code>中的帧可以大致分为以下几类：参考帧(ference frame)、当前编码帧(current frame)、未使用帧(unused frame)等。对帧的管理操作
的基本操作由两种：从队列中获取帧(<code>x264_frame_pop</code>)、向队列中添加帧(<code>x264_frame_push_unused</code>)。</p>

<p>关于帧队列的管理是通过数组来的，下面先介绍最基本的帧队列的一些基本操作。</p>

<p>首先将<code>frame</code>帧插入到<code>list</code>队列中，实现代码如下：</p>

<p><figure class='code'><figcaption><span>x264_frame_push </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">x264_frame_push</span><span class="p">(</span><span class="kt">x264_frame_t</span> <span class="o">**</span><span class="n">list</span><span class="p">,</span> <span class="kt">x264_frame_t</span> <span class="o">*</span><span class="n">frame</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>从<code>list</code>队列中获取<code>frame</code>帧，实现代码如下：</p>

<p><figure class='code'><figcaption><span>x264_frame_pop </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">x264_frame_t</span> <span class="o">*</span><span class="nf">x264_frame_pop</span><span class="p">(</span> <span class="kt">x264_frame_t</span> <span class="o">**</span><span class="n">list</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">x264_frame_t</span> <span class="o">*</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span> <span class="n">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>当编码帧类型为<code>IDR</code>帧时，需要重置整个参考帧队列，<code>X264</code>中重置参考队列是通过<code>x264_reference_reset</code>函数完成，实现过程即为将<code>reference</code>队列
所有的参考帧设置为<code>unused</code>队列中的<code>unused</code>帧；实现代码如下：</p>

<p><figure class='code'><figcaption><span>x264_reference_reset </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">x264_reference_reset</span><span class="p">(</span> <span class="kt">x264_t</span> <span class="o">*</span><span class="n">h</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">frames</span><span class="p">.</span><span class="n">reference</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">x264_frame_push_unused</span><span class="p">(</span> <span class="n">h</span><span class="p">,</span> <span class="n">x264_frame_pop</span><span class="p">(</span> <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">frames</span><span class="p">.</span><span class="n">reference</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdec</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_poc</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">h</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fenc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">i_poc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之判断帧类型]]></title>
    <link href="http://lazybing.github.io/blog/2017/10/11/x264-slicetype-decide/"/>
    <updated>2017-10-11T08:59:17-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/10/11/x264-slicetype-decide</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
