<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:汇编学习 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/hui-bian-xue-xi/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2018-11-06T05:13:03-08:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[汇编语言实现hello World]]></title>
    <link href="http://lazybing.github.io/blog/2018/01/11/assemble-hello-world/"/>
    <updated>2018-01-11T21:29:27-08:00</updated>
    <id>http://lazybing.github.io/blog/2018/01/11/assemble-hello-world</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#write-our-string-to-stdout" id="markdown-toc-write-our-string-to-stdout">write our string to stdout</a></li>
  <li><a href="#and-exit" id="markdown-toc-and-exit">and exit</a></li>
</ul>

<p>接下来的工作可能要用到汇编语言。</p>

<!--more-->

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.data                   # section declaration
</span><span class='line'>msg:
</span><span class='line'>    .ascii  “Hello, world!\n”   # our dear string
</span><span class='line'>    len = . - msg               # length of our dear string&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>.text                           # section declaration&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                        # we must export the entry point to the ELF linker or
</span><span class='line'>.global _start          # loader. They conventionally recognize _start as their 
</span><span class='line'>                        # entry point. Use ld -e foo to override the default.
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>_start:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="write-our-string-to-stdout">write our string to stdout&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>movl $len, %edx        # third argument:message length
</span><span class='line'>movl $msg, %ecx        # second argument:pointer to message to write
</span><span class='line'>movl $1, %ebx          # first argument:file handle(stdout) 
</span><span class='line'>movl $4, %eax          # system call number (sys_write)
</span><span class='line'>int  $0x80             # call kernel
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="and-exit">and exit&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>movl $0, %ebx           # first argument:exit code
</span><span class='line'>movl $1, %eax           # system call number (sys_exit)
</span><span class='line'>int  $0x80              # call kernel
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
