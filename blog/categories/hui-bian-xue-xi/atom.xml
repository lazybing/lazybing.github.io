<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:汇编学习 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/hui-bian-xue-xi/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2018-11-05T08:21:13-08:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[汇编语言实现hello World]]></title>
    <link href="http://lazybing.github.io/blog/2018/01/11/assemble-hello-world/"/>
    <updated>2018-01-11T21:29:27-08:00</updated>
    <id>http://lazybing.github.io/blog/2018/01/11/assemble-hello-world</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#write-our-string-to-stdout" id="markdown-toc-write-our-string-to-stdout">write our string to stdout</a></li>
  <li><a href="#and-exit" id="markdown-toc-and-exit">and exit</a></li>
</ul>

<p>接下来的工作可能要用到汇编语言。</p>

<!--more-->

<p>{% codeblock %}
.data                   # section declaration
msg:
    .ascii  “Hello, world!\n”   # our dear string
    len = . - msg               # length of our dear string</p>

<p>.text                           # section declaration</p>

<pre><code>                        # we must export the entry point to the ELF linker or
.global _start          # loader. They conventionally recognize _start as their 
                        # entry point. Use ld -e foo to override the default.
</code></pre>

<p>_start:</p>

<h1 id="write-our-string-to-stdout">write our string to stdout</h1>

<pre><code>movl $len, %edx        # third argument:message length
movl $msg, %ecx        # second argument:pointer to message to write
movl $1, %ebx          # first argument:file handle(stdout) 
movl $4, %eax          # system call number (sys_write)
int  $0x80             # call kernel
</code></pre>

<h1 id="and-exit">and exit</h1>

<pre><code>movl $0, %ebx           # first argument:exit code
movl $1, %eax           # system call number (sys_exit)
int  $0x80              # call kernel
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
