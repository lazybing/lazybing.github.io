<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 源码分析 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/yuan-ma-fen-xi/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2016-07-19T16:00:58-07:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RTMP 协议规范]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/17/rtmp-protocol-standard/"/>
    <updated>2016-07-17T08:17:38-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/17/rtmp-protocol-standard</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Real-Time_Messaging_Protocol">RTMP</a>(Real Time Messaging Protocol) 即实时消息传输协议，它是 Adobe 公司开发的，并且提供了官方的<a href="https://www.adobe.com/devnet/rtmp.html">文档</a>。Adobe 公司提供的RTMP协议是基于可靠传输协议(如TCP)，提供双向的信息多元化服务,其目的是在两个通信节点间传输带有时间信息的音视频并发流。其实现会针对不同的消息种类分配不同的优先级，当传输能力有限时，这就会影响流传输的排队顺序。</p>

<!--more-->


<h3>1. 几个概念</h3>

<ul>
<li>负载(Payload): 分组中包含的数据，比如音频采样数据和视频压缩数据。</li>
<li>分组(Packet): 数据分组由固定头部和负载组成的。对于底层协议，可能需要定义分组的封装。</li>
<li>端口(Port): 用于区分不同的目标抽象，一般用整数表示，如TCP/IP中的端口号。</li>
<li>传输地址(Transport address): 网络地址和端口号的组合,用于标识一个传输层的端口。如IP地址+TCP端口号。</li>
<li>消息流(Message stream): 允许消息流动的逻辑上的通讯通道。</li>
<li>消息流ID(Message stream ID): 每隔消息都有与之关联的ID号，用于与其他消息流作区分。</li>
<li>块(Chunk): 一个消息片段。消息被放到网络上传输之前被切分成小的片段并被交错存取。分块确保跨流的所有消息按时间戳顺序被不断的传输。</li>
<li>块流(Chunk stream):</li>
<li>块流ID(Chunk stream ID): 每个块所关联的用于区分其他块流的ID。</li>
<li>复用(Multiplexing): 将音视频数据整合到一个数据流内,使得多个音视频数据流可以同步传输.</li>
<li>解复用(DeMultimplexing): 复用的反过程,交互的音视频数据被分成原始的音频数据和视频数据。</li>
<li>远程过程调用(Remote Procedure Call(RPC)):</li>
<li>元数据(Metadata): 数据的一个简单描述。如一部电影的电影名、时长、制作时间等等.</li>
<li>应用Instance（Application Instance): 对于服务器端的应用Instance，客户端就是通过连接该Instance来发送请求的.</li>
<li>Action Message Format(AMF):</li>
</ul>


<h3>2.字节序、字节对齐和时间格式</h3>

<p>所有完整的字段都是按照网络字节序被承载的。即零字节是第一个字节，bit 0 是一个字段中的最高有效位。即所谓的大端。
如无特殊说明，RTMP 中的所有字段都是字节对齐的，</p>

<pre><code>#define ALIGN_16bit(value) (((value + 15) &gt;&gt; 4) &lt;&lt; 4)
#define ALIGN_32bit(value) (((value + 31) &gt;&gt; 5) &lt;&lt; 5)
#define ALIGN_64bit(value) (((value + 63) &gt;&gt; 6) &lt;&lt; 6)
</code></pre>

<p>RTMP 中的时间戳用整数来表示，它是以毫秒为单位的相对时间。典型的，码流中都是从时间戳为0开始的，但这不是必须的，只要通讯双方用统一的时间即可。注意，这就要求任何跨流的同步都需要 RTMP 外的额外机制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVPacket 结构体解析]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/03/avpacket-structure/"/>
    <updated>2016-07-03T08:19:32-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/03/avpacket-structure</id>
    <content type="html"><![CDATA[<p>AVPacket是存储压缩编码数据相关信息的结构体。</p>

<!--more-->


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">AVPacket</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">AVBufferRef</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">pts</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">dts</span><span class="p">;</span>
</span><span class='line'><span class="kt">uint8_t</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>   <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>   <span class="n">stream_index</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>   <span class="n">flags</span><span class="p">;</span>
</span><span class='line'><span class="n">AVPacketSideData</span> <span class="o">*</span><span class="n">side_data</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">side_data_elems</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>   <span class="n">duration</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">pos</span><span class="p">;</span>                            <span class="c1">///&amp;lt; byte position in stream, -1 if unknown</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">convergence_duration</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVStream 结构体解析]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/03/avstream-structure/"/>
    <updated>2016-07-03T04:31:41-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/03/avstream-structure</id>
    <content type="html"><![CDATA[<p>AVStream是存储每一个视频/音频流信息的结构体。</p>

<!--more-->


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">AVStream</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">index</span><span class="p">;</span>      <span class="cm">/* stream index in AVFormatContext */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">id</span><span class="p">;</span>         <span class="cm">/*  Format-specific stream ID */</span>
</span><span class='line'><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">codec</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">priv_data</span><span class="p">;</span>
</span><span class='line'><span class="n">AVRational</span> <span class="n">time_base</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">start_time</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">duration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">nb_frames</span><span class="p">;</span>                 <span class="c1">///&amp;lt; number of frames in this stream if known or 0</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">disposition</span><span class="p">;</span> <span class="cm">/**&amp;lt; AV_DISPOSITION_* bit field */</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">AVDiscard</span> <span class="n">discard</span><span class="p">;</span> <span class="c1">///&amp;lt; Selects which packets can be discarded at will and do not need to be demuxed.</span>
</span><span class='line'><span class="n">AVRational</span> <span class="n">sample_aspect_ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">AVDictionary</span> <span class="o">*</span><span class="n">metadata</span><span class="p">;</span>
</span><span class='line'><span class="n">AVRational</span> <span class="n">avg_frame_rate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">AVPacket</span> <span class="n">attached_pic</span><span class="p">;</span>
</span><span class='line'><span class="n">AVPacketSideData</span> <span class="o">*</span><span class="n">side_data</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>            <span class="n">nb_side_data</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">event_flags</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">pts_wrap_bits</span><span class="p">;</span> <span class="cm">/**&amp;lt; number of bits in pts (used for wrapping control) */</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">first_dts</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">cur_dts</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">last_IP_pts</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">last_IP_duration</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">probe_packets</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">codec_info_nb_frames</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* av_read_frame() support */</span>
</span><span class='line'><span class="k">enum</span> <span class="n">AVStreamParseType</span> <span class="n">need_parsing</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">AVCodecParserContext</span> <span class="o">*</span><span class="n">parser</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">AVPacketList</span> <span class="o">*</span><span class="n">last_in_packet_buffer</span><span class="p">;</span>
</span><span class='line'><span class="n">AVProbeData</span> <span class="n">probe_data</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define MAX_REORDER_DELAY 16</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">pts_buffer</span><span class="p">[</span><span class="n">MAX_REORDER_DELAY</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">AVIndexEntry</span> <span class="o">*</span><span class="n">index_entries</span><span class="p">;</span> <span class="cm">/**&amp;lt; Only used if the format does not</span>
</span><span class='line'><span class="cm">                                support seeking natively. */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">nb_index_entries</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index_entries_allocated_size</span><span class="p">;</span>
</span><span class='line'><span class="n">AVRational</span> <span class="n">r_frame_rate</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">stream_identifier</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">interleaver_chunk_size</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">interleaver_chunk_duration</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">request_probe</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">skip_to_keyframe</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">skip_samples</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">start_skip_samples</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">first_discard_sample</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">last_discard_sample</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">nb_decoded_frames</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">mux_ts_offset</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">pts_wrap_reference</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">pts_wrap_behavior</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">update_initial_durations_done</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">pts_reorder_error</span><span class="p">[</span><span class="n">MAX_REORDER_DELAY</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="kt">uint8_t</span> <span class="n">pts_reorder_error_count</span><span class="p">[</span><span class="n">MAX_REORDER_DELAY</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">last_dts_for_order_check</span><span class="p">;</span>
</span><span class='line'><span class="kt">uint8_t</span> <span class="n">dts_ordered</span><span class="p">;</span>
</span><span class='line'><span class="kt">uint8_t</span> <span class="n">dts_misordered</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">inject_global_side_data</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">recommended_encoder_configuration</span><span class="p">;</span>
</span><span class='line'><span class="n">AVRational</span> <span class="n">display_aspect_ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">FFFrac</span> <span class="o">*</span><span class="n">priv_pts</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVCodec 结构体解析]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/03/avcodec-structure/"/>
    <updated>2016-07-03T01:11:57-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/03/avcodec-structure</id>
    <content type="html"><![CDATA[<p>AVCodec是存储编解码器信息的结构体。</p>

<!--more-->


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">AVCodec</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">long_name</span><span class="p">;</span>
</span><span class='line'><span class="k">enum</span> <span class="n">AVMediaType</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="k">enum</span> <span class="n">AVCodecID</span> <span class="n">id</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">capabilities</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="n">AVRational</span> <span class="o">*</span><span class="n">supported_framerates</span><span class="p">;</span> <span class="c1">///&amp;lt; array of supported framerates, or NULL if any, array is terminated by {0,0}</span>
</span><span class='line'><span class="k">const</span> <span class="k">enum</span> <span class="n">AVPixelFormat</span> <span class="o">*</span><span class="n">pix_fmts</span><span class="p">;</span>     <span class="c1">///&amp;lt; array of supported pixel formats, or NULL if unknown, array is terminated by -1</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">supported_samplerates</span><span class="p">;</span>       <span class="c1">///&amp;lt; array of supported audio samplerates, or NULL if unknown, array is terminated by 0</span>
</span><span class='line'><span class="k">const</span> <span class="k">enum</span> <span class="n">AVSampleFormat</span> <span class="o">*</span><span class="n">sample_fmts</span><span class="p">;</span> <span class="c1">///&amp;lt; array of supported sample formats, or NULL if unknown, array is terminated by -1</span>
</span><span class='line'><span class="k">const</span> <span class="kt">uint64_t</span> <span class="o">*</span><span class="n">channel_layouts</span><span class="p">;</span>         <span class="c1">///&amp;lt; array of support channel layouts, or NULL if unknown. array is terminated by 0</span>
</span><span class='line'><span class="kt">uint8_t</span> <span class="n">max_lowres</span><span class="p">;</span>                     <span class="c1">///&amp;lt; maximum value for lowres supported by the decoder, no direct access, use av_codec_get_max_lowres()</span>
</span><span class='line'><span class="k">const</span> <span class="n">AVClass</span> <span class="o">*</span><span class="n">priv_class</span><span class="p">;</span>              <span class="c1">///&amp;lt; AVClass for the private context</span>
</span><span class='line'><span class="k">const</span> <span class="n">AVProfile</span> <span class="o">*</span><span class="n">profiles</span><span class="p">;</span>              <span class="c1">///&amp;lt; array of recognized profiles, or NULL if unknown, array is terminated by {FF_PROFILE_UNKNOWN}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">priv_data_size</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">AVCodec</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">init_thread_copy</span><span class="p">)(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">update_thread_context</span><span class="p">)(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">const</span> <span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">src</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="n">AVCodecDefault</span> <span class="o">*</span><span class="n">defaults</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">init_static_data</span><span class="p">)(</span><span class="k">struct</span> <span class="n">AVCodec</span> <span class="o">*</span><span class="n">codec</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">init</span><span class="p">)(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">encode_sub</span><span class="p">)(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">buf_size</span><span class="p">,</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">encode2</span><span class="p">)(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AVPacket</span> <span class="o">*</span><span class="n">avpkt</span><span class="p">,</span> <span class="k">const</span> <span class="n">AVFrame</span> <span class="o">*</span><span class="n">frame</span><span class="p">,</span>
</span><span class='line'>               <span class="kt">int</span> <span class="o">*</span><span class="n">got_packet_ptr</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">decode</span><span class="p">)(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">outdata</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outdata_size</span><span class="p">,</span> <span class="n">AVPacket</span> <span class="o">*</span><span class="n">avpkt</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">close</span><span class="p">)(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">flush</span><span class="p">)(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">caps_internal</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVIOContext 结构体解析]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/02/aviocontext/"/>
    <updated>2016-07-02T17:15:20-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/02/aviocontext</id>
    <content type="html"><![CDATA[<p>AVIOContext 是FFMPEG管理输入输出数据的结构体。</p>

<!--more-->


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">AVIOContext</span><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">AVClass</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">av_class</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buffer</span><span class="p">;</span>  <span class="o">/&lt;</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">Start</span> <span class="n">of</span> <span class="n">the</span> <span class="n">buffer</span><span class="p">.</span> <span class="err">*/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">buffer_size</span><span class="p">;</span>        <span class="o">/&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">Maximum</span> <span class="n">buffer</span> <span class="n">size</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf_ptr</span><span class="p">;</span> <span class="o">/&lt;</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">Current</span> <span class="n">position</span> <span class="n">in</span> <span class="n">the</span> <span class="n">buffer</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf_end</span><span class="p">;</span> <span class="o">/&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">End</span> <span class="n">of</span> <span class="n">the</span> <span class="n">data</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">read_packet</span><span class="p">)(</span><span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">opaque</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">buf_size</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">write_packet</span><span class="p">)(</span><span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">opaque</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">buf_size</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int64_t</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">seek</span><span class="p">)(</span><span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">opaque</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="n">offset</span><span class="p">,</span> <span class="kt">int</span> <span class="n">whence</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int64_t</span> <span class="n">pos</span><span class="p">;</span>            <span class="cm">/**&amp;lt; position in the file of the current buffer &lt;/em&gt;/</span>
</span><span class='line'><span class="cm">    int must_flush;         /&lt;strong&gt;&amp;lt; true if the next seek should flush */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">eof_reached</span><span class="p">;</span>        <span class="o">/&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">true</span> <span class="k">if</span> <span class="n">eof</span> <span class="n">reached</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">write_flag</span><span class="p">;</span>         <span class="o">/**&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">true</span> <span class="k">if</span> <span class="n">open</span> <span class="k">for</span> <span class="n">writing</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">max_packet_size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">checksum</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">checksum_ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="nf">long</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">update_checksum</span><span class="p">)(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">checksum</span><span class="p">,</span> <span class="k">const</span> <span class="kt">uint8_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">error</span><span class="p">;</span>              <span class="o">/**&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">error</span> <span class="n">code</span> <span class="n">or</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">no</span> <span class="n">error</span> <span class="n">happened</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">read_pause</span><span class="p">)(</span><span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">opaque</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pause</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int64_t</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">read_seek</span><span class="p">)(</span><span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">opaque</span><span class="p">,</span> <span class="kt">int</span> <span class="n">stream_index</span><span class="p">,</span>
</span><span class='line'>                         <span class="kt">int64_t</span> <span class="n">timestamp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">seekable</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int64_t</span> <span class="n">maxsize</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">direct</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int64_t</span> <span class="n">bytes_read</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">seek_count</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">writeout_count</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">orig_buffer_size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">short_seek_threshold</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
