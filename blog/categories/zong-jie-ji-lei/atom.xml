<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 总结积累 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/zong-jie-ji-lei/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2016-06-12T09:40:31-07:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Data Layout]]></title>
    <link href="http://lazybing.github.io/blog/2016/05/23/the-data-layout/"/>
    <updated>2016-05-23T09:23:07-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/05/23/the-data-layout</id>
    <content type="html"><![CDATA[<p>图像的摆放布局各式各样，不同的布局用于不同的场景。简单记录一下常用的几种数据摆放格式。</p>

<!--more-->


<hr />

<h2>YUV 数据</h2>

<p>对于 YUV 图像来说，会有如下几个特性：<code>FOURCC</code> <code>Format</code> <code>Component Order</code> <code>Interlace/Progressive</code> <code>Packed/Planar</code> <code>Image Resolution</code>。</p>

<p><code>FOURCC</code>包括：<code>UYVY</code> <code>UYNV</code> <code>Y422</code> <code>IUYV</code> 等等；</p>

<p><code>Format</code>包括：<code>YUV420</code> <code>YUV422</code> <code>YUV444</code> <code>RGB444</code> <code>MONO</code>等等：</p>

<p><code>Component Order</code>包括：<code>YUV</code> <code>YVU</code>。</p>

<h3>YUV420摆放格式</h3>

<p><img src="http://lazybing.github.io/images/datalayout/Yuv420.png"></p>

<p>通过 YUV image 的摆放格式可以提取出 Y/U/V 三个分量。以 Planar、progressive、YUV420、176*144为例，示例代码如下：</p>

<pre><code>int split_yuv(char *str, uint height, uint width)                                                                                                                                
{
    FILE *fp;
    FILE *fpy;
    FILE *fpu;
    FILE *fpv;

    unsigned char  *buf = (unsigned char *)malloc(height * width * 3 / 2);

    fp = fopen(str, "r");
    fpy = fopen("y.bin", "wa");
    fpu = fopen("u.bin", "wa");
    fpv = fopen("v.bin", "wa");
    if(!fpv || !fpu || !fpy || !fp){
         fprintf(stderr, "line %d open file error.\n", __LINE__);
        return FALSE;
    }

    fread(buf, 1, height * width * 3 / 2, fp);
    fwrite(buf, 1, height * width , fpy);
    fwrite(buf + height * width, 1, height * width &gt;&gt; 2, fpu);
    fwrite(buf + (uint)(height * width * 5 / 4), 1, height * width &gt;&gt; 2, fpv);

    fclose(fpv);
    fclose(fpu);
    fclose(fpy);
    fclose(fp);
    free(buf);

    return TRUE;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
