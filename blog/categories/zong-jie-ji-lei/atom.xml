<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:总结积累 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/zong-jie-ji-lei/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2017-04-10T20:21:35-07:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PAR、DAR、SAR分析]]></title>
    <link href="http://lazybing.github.io/blog/2016/11/16/par-sar-dar-analyse/"/>
    <updated>2016-11-16T08:11:53-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/11/16/par-sar-dar-analyse</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Aspect_ratio_(image)">Aspect Ratio</a> 是图片的宽高比。<br />
<!--more--></p>

<p>主要有 3 种<code>aspect ratio</code>：PAR(Pixel Aspect Ratio)、DAR(Display Aspect Ratio)、SAR(Sample Aspect Ratio)。</p>

<p>PAR(Pixel Aspect Ratio): 像素纵横比；<br />
DAR(Display Aspect Ratio):显示纵横比；<br />
SAR(Sample Aspect Ratio):采样纵横比；</p>

<p>三者的关系为PAR x SAR = DAR 或者 PAR = DAR / SAR。</p>

<p>PAR 示例如下：</p>

<p><img src="/images/PAR_DAR_SAR/220px-PAR-1to1.svg.png" title="‘1to1_PAR’" ></p>

<p><img src="/images/PAR_DAR_SAR/220px-PAR-2to1.svg.png" title="‘2to1_PAR’" ></p>

<p>DAR 示例如下：</p>

<p><img src="/images/PAR_DAR_SAR/Aspect_ratio_16_9_example3.jpg" title="‘16to9_DAR’" ></p>

<p><img src="/images/PAR_DAR_SAR/Aspect_ratio_4_3_example.jpg" title="‘4to3_DAR’" ></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[媒体文件格式分析之MP4]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/26/mp4-parse-format/"/>
    <updated>2016-07-26T04:31:32-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/26/mp4-parse-format</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#box" id="markdown-toc-box">最小组单元 BOX</a></li>
  <li><a href="#mp4-" id="markdown-toc-mp4-">MP4 文件整体结构</a>    <ul>
      <li><a href="#file-type-box" id="markdown-toc-file-type-box">File Type Box</a></li>
      <li><a href="#movie-box" id="markdown-toc-movie-box">Movie Box</a>        <ul>
          <li><a href="#movie-header-box" id="markdown-toc-movie-header-box">Movie Header Box</a></li>
        </ul>
      </li>
      <li><a href="#track-box" id="markdown-toc-track-box">Track Box</a>        <ul>
          <li><a href="#track-header-box" id="markdown-toc-track-header-box">Track Header Box</a></li>
        </ul>
      </li>
      <li><a href="#media-box" id="markdown-toc-media-box">Media Box</a>        <ul>
          <li><a href="#media-header-box" id="markdown-toc-media-header-box">Media Header Box</a></li>
          <li><a href="#handler-reference-box" id="markdown-toc-handler-reference-box">Handler Reference Box</a></li>
          <li><a href="#media-informatino-box" id="markdown-toc-media-informatino-box">Media Informatino Box</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><a href="https://en.wikipedia.org/wiki/MPEG-4_Part_14">MP4</a>是由许多 Box 和 FullBox 组成的，每个 Box 是由 Header 和 Data 组成的，FullBox 是 Box 的扩展，Box 结构的基础上在 Header 中增加 8bits version 和 24bits flags。
<!--more--></p>

<h2 id="box">最小组单元 BOX</h2>

<p>MP4 是由一些列的 box 组成，它的最小组成单元是 box。MP4 文件中的所有数据都装在 box 中，即 MP4 文件由若干个 box 组成，每个
 box 有类型和长度，可以将 box 理解为一个数据对象块。box 中可以包含另一个 box，这种 box 称为 container box。一个 MP4 文件首先会有且仅有
 一个<code>ftype</code>类型的 box,作为 MP4 格式的标志并包含关于文件的一些信息，之后会有且只有一个<code>moov</code>类型的box(Movie Box)，她是一种 container box,
 可以有多个，也可以没有，媒体数据的结构由 metadata 进行描述。</p>

<p><img src="/images/MP4/mp4_box.png"></p>

<ul>
  <li>size：指明了 box 所占用的大小，包括 header 部分。</li>
  <li>type: 表示这个 box 的类型。</li>
  <li>largesize: 如果 box 很大超过 uint32 的最大数值,size 就被设置为 1,并用接下来的 largesize 来存放大小。</li>
</ul>

<p>一些基本概念：</p>

<ul>
  <li>track 表示一些 sample 的集合，对于媒体数据来说， track 表示一个视频或音频序列。</li>
  <li>hint track 这个特殊的 track 并不包含媒体数据，而是包含了一些将其他数据 track 打包成流媒体的指示信息。</li>
  <li>sample 对于非 hint track 来说， video  sample 即为一帧视频，或一组连续视频帧，audio sample 即为一段连续的压缩音频，统称为 sample。对于 hint track，sample 定义一个或多个流媒体包的格式。</li>
  <li>sample table 指明 sample 时序和物理布局的表。</li>
  <li>chunk 一个track的几个 sample 组成的单元。</li>
</ul>

<h2 id="mp4-">MP4 文件整体结构</h2>

<p><img src="/images/MP4/box.png"></p>

<h3 id="file-type-box">File Type Box</h3>

<p><code>ftyp</code>类型会出现在 MP4 文件的开头，作为 MP4 容器格式的可表示信息。<code>ftyp box</code>内容结构如下：</p>

<p><img src="/images/MP4/filetypebox.png"></p>

<p><code>
class FileTypeBox
extends Box('ftyp'){
unsigned int(32) major_brand;
unsigned int(32) minor_version;
unsigned int(32) compatible_brands[];
}
</code></p>

<h3 id="movie-box">Movie Box</h3>

<p><code>moov</code>里面包含了很多个 box,一般情况下 moov 会紧跟着 ftype。moov 里面包含着 MP4 文件中的 metedata。音视频相关
的基础信息。</p>

<h4 id="movie-header-box">Movie Header Box</h4>

<p><img src="/images/MP4/movie_header.png"></p>

<p>```
class MovieHeader extends FullBox(‘mvhd’, version, 0)
{
    if(version == 1)
    {
        unsinged int(64) creation_time;
        unsinged int(64) modification_time;
        unsinged int(64) timescale;
        unsinged int(64) duration;
    }else{
        unsinged int(32) creation_time;
        unsinged int(32) modification_time;
        unsinged int(32) timescale;
        unsinged int(32) duration;
    }</p>

<pre><code>template int(32) rate = 0x00010000;
template int(16) volume = 0x0100;
const bit(16) reserved = 0;
const ungigned int(32)[2] reserved = 0;
template int(32)[9] matrix = 
{ 0x0001000, 0, 0, 0, 0x0001000, 0, 0, 0, 0x40000000};
bit(32)[6] pre_defined = 0;
unsigned int(32) next_track_ID; } ```
</code></pre>

<p>各个 Field 含义表格：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Field</th>
      <th style="text-align: center">Type</th>
      <th style="text-align: center">Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">box size</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">box 大小</td>
    </tr>
    <tr>
      <td style="text-align: center">box type</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">box 类型</td>
    </tr>
    <tr>
      <td style="text-align: center">version</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">box 版本</td>
    </tr>
    <tr>
      <td style="text-align: center">flags</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">flags</td>
    </tr>
    <tr>
      <td style="text-align: center">creation time</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">创建时间</td>
    </tr>
    <tr>
      <td style="text-align: center">modification time</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">修改时间</td>
    </tr>
    <tr>
      <td style="text-align: center">time scale</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">文件媒体在 1s 时间内的刻度值，可以理解为 1s 长度的时间单元数，一般情况下视频都是90000</td>
    </tr>
    <tr>
      <td style="text-align: center">duration</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">该 track 的时间长度，用 duration 和 time scale 值可以计算 track 时长</td>
    </tr>
    <tr>
      <td style="text-align: center">rate</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">推荐播放速率</td>
    </tr>
    <tr>
      <td style="text-align: center">volume</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">与 rate 类似</td>
    </tr>
    <tr>
      <td style="text-align: center">reserved</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">保留位</td>
    </tr>
    <tr>
      <td style="text-align: center">matrix</td>
      <td style="text-align: center">36</td>
      <td style="text-align: center">视频变化矩阵</td>
    </tr>
    <tr>
      <td style="text-align: center">pre-defined</td>
      <td style="text-align: center">24</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">nex track id</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">下一个 track 使用过的id 号</td>
    </tr>
  </tbody>
</table>

<h3 id="track-box">Track Box</h3>

<p>在<code>moov</code>这个box中会含有若干个track box每个track都是相对独立，track box里面会包含很多别的box，有2个很关键
<code>Track Header Box</code><code>Media Box</code>。</p>

<h4 id="track-header-box">Track Header Box</h4>

<p><img src="/images/MP4/movie_header.png"></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Field</th>
      <th style="text-align: center">Type</th>
      <th style="text-align: center">Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">box size</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">box大小</td>
    </tr>
    <tr>
      <td style="text-align: center">box type</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">box类型</td>
    </tr>
    <tr>
      <td style="text-align: center">version</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">box版本</td>
    </tr>
    <tr>
      <td style="text-align: center">flags</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">按位或操作结果值，预定义如下：0x000001 track_enabled,否则该track不被播放；0x000002 track_in_movie，表示该track在播放中被引用。</td>
    </tr>
    <tr>
      <td style="text-align: center">track id</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">id号</td>
    </tr>
    <tr>
      <td style="text-align: center">reserved</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">保留位</td>
    </tr>
    <tr>
      <td style="text-align: center">duration</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">track的时间长度</td>
    </tr>
    <tr>
      <td style="text-align: center">reserved</td>
      <td style="text-align: center">8</td>
      <td style="text-align: center">保留位</td>
    </tr>
    <tr>
      <td style="text-align: center">layer</td>
      <td style="text-align: center">2 视频层，默认为0， 值小的在上层</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">alternate group</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">track 分组信息，默认为0表示该track未与其他track组有关系</td>
    </tr>
    <tr>
      <td style="text-align: center">volume</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">[8.8]格式，如果为音频track,1.0表示最大音量，否则为0</td>
    </tr>
    <tr>
      <td style="text-align: center">reserved</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">保留位</td>
    </tr>
    <tr>
      <td style="text-align: center">matrix</td>
      <td style="text-align: center">36</td>
      <td style="text-align: center">视频变化矩阵</td>
    </tr>
    <tr>
      <td style="text-align: center">width</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">宽</td>
    </tr>
    <tr>
      <td style="text-align: center">height</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">高</td>
    </tr>
  </tbody>
</table>

<h3 id="media-box">Media Box</h3>

<h4 id="media-header-box">Media Header Box</h4>

<p><img src="/images/MP4/media_header_box.png"></p>

<table>
  <tbody>
    <tr>
      <td>Field</td>
      <td>Type</td>
      <td>Comment</td>
    </tr>
    <tr>
      <td>box size</td>
      <td>4</td>
      <td>box 大小</td>
    </tr>
    <tr>
      <td>box type</td>
      <td>4</td>
      <td>box 类型</td>
    </tr>
    <tr>
      <td>version</td>
      <td>1</td>
      <td>box 版本</td>
    </tr>
    <tr>
      <td>creation_time</td>
      <td>4</td>
      <td>创建时间</td>
    </tr>
    <tr>
      <td>modification_time</td>
      <td>4</td>
      <td>修改时间</td>
    </tr>
    <tr>
      <td>time scale</td>
      <td>4</td>
      <td>文件媒体在1s内的刻度值</td>
    </tr>
    <tr>
      <td>duration</td>
      <td>4</td>
      <td>该 track 的时间长度</td>
    </tr>
    <tr>
      <td>langurage</td>
      <td>2</td>
      <td>媒体语言码</td>
    </tr>
    <tr>
      <td>pre_defined</td>
      <td>2</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h4 id="handler-reference-box">Handler Reference Box</h4>

<p><img src="/images/MP4/media_header_box.png"></p>

<table>
  <tbody>
    <tr>
      <td>Field</td>
      <td>Type</td>
      <td>Comment</td>
    </tr>
    <tr>
      <td>box size</td>
      <td>4</td>
      <td>box 大小</td>
    </tr>
    <tr>
      <td>box type</td>
      <td>4</td>
      <td>box 类型</td>
    </tr>
    <tr>
      <td>flags</td>
      <td>3</td>
      <td> </td>
    </tr>
    <tr>
      <td>pre_defined</td>
      <td>4</td>
      <td> </td>
    </tr>
    <tr>
      <td>handler_type</td>
      <td>4</td>
      <td>Video track(vide)/Audio track(soun)/Hint track(hint)a</td>
    </tr>
    <tr>
      <td>reserved</td>
      <td>12</td>
      <td>0</td>
    </tr>
    <tr>
      <td>name</td>
      <td>string</td>
      <td>字符串 tracke type name</td>
    </tr>
  </tbody>
</table>

<h4 id="media-informatino-box">Media Informatino Box</h4>

<p><code>minf</code>里面包含着一系列的box，里面是track相关的特征信息。一般
情况minf包含:Media Information Header Boxes、Data Information Box(dinf)、Sample Table Box。</p>

<p>Media Information Header Boxes 根据类型分为 vmhd、smhd、hmhd、nmhd。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[媒体文件格式分析之AVI]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/24/avi-parse-format/"/>
    <updated>2016-07-24T01:04:52-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/24/avi-parse-format</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">基本数据结构</a></li>
  <li><a href="#avi-" id="markdown-toc-avi-">AVI 文件类型</a></li>
  <li><a href="#avi--1" id="markdown-toc-avi--1">AVI 文件布局</a>    <ul>
      <li><a href="#mainaviheaderavih" id="markdown-toc-mainaviheaderavih">MainAVIHeader(avih)</a></li>
      <li><a href="#stream-header-list" id="markdown-toc-stream-header-list">Stream Header List</a></li>
      <li><a href="#stream-header-list-elementstrh" id="markdown-toc-stream-header-list-elementstrh">Stream Header List Element(strh)</a></li>
      <li><a href="#stream-header-list-elementstrf" id="markdown-toc-stream-header-list-elementstrf">Stream Header List Element(strf)</a></li>
      <li><a href="#stream-header-list-elementindx" id="markdown-toc-stream-header-list-elementindx">Stream Header List Element(indx)</a></li>
      <li><a href="#stream-header-list-elementstrn" id="markdown-toc-stream-header-list-elementstrn">Stream Header List Element(strn)</a></li>
    </ul>
  </li>
  <li><a href="#avi-indexes" id="markdown-toc-avi-indexes">AVI Indexes</a>    <ul>
      <li><a href="#old-style-index" id="markdown-toc-old-style-index">old style index</a></li>
      <li><a href="#open-dml-index" id="markdown-toc-open-dml-index">Open-DML Index</a></li>
      <li><a href="#using-the-open-dml-index" id="markdown-toc-using-the-open-dml-index">Using the Open-DML index</a></li>
    </ul>
  </li>
  <li><a href="#the-movi---lists" id="markdown-toc-the-movi---lists">The movi - Lists</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">参考文献</a></li>
</ul>

<p><a href="https://en.wikipedia.org/wiki/Audio_Video_Interleave">AVI</a> 是音视频交错(Audio Video Interleaved)的缩写，它是 Microsoft 公司开发的一种符合 RIFF 文件规范的数字音频与视频文件格式。
<!--more--></p>

<h2 id="section">基本数据结构</h2>

<p>AVI 文件中有两种类型结构:Chunks 和 Lists。</p>

<p><code>
//Chunks
typedef struct {
    DWORD dwFourCC;
    DWORD dwSize;
    BYTE  data[dwSize];
}CHUNK;
//Lists
typedef struct{
    DWORD dwList;
    DWORD dwSize;
    DWORD dwFourCC;
    BYTE  data[dwSize - 4];
}LIST;
</code></p>

<p>一个包含了<code>video</code>、<code>audio</code>或<code>subtitle</code>数据的<code>chunk</code>使用一个<code>dwFourCC</code>，
<code>dwFourCC</code>包含 2 个十六进制数字表示 stream number，2 个字母表示数据类型( dc 表示 video， wb 表示 audio, tx 表示 text)。
<code>dwFourCC</code>和<code>dwSize</code>在<code>Chunks</code>和<code>Lists</code>中有相同的含义。</p>

<p><code>dwFourCC</code>描述chunk 的类型（如<code>hdrl</code>表示 <code>header list</code>），<code>dwSize</code>表示该 chunk 或 list 的大小，
包含<code>dwSize</code>后的所有 byte。在 List 中，<code>dwSize</code>包含了<code>dwFourCC</code>所占有的4 bytes.</p>

<p><code>dwList</code>的值可以是<code>RIFF（RIFF-List</code>或<code>LIST(List)</code>。</p>

<h2 id="avi-">AVI 文件类型</h2>

<p>通常来讲，有 3 种类型的 AVI 文件：</p>

<ul>
  <li>AVI 1.0, 最初始的 AVI 文件类型。</li>
  <li>Open-DML, AVI 文件格式的扩展。1.02版本相对于1.0版本有两个提高：基本没有文件大小的限制、负载降低了33%。</li>
  <li>Hybride-Files，Open-DML 文件因为兼容的原因有个额外的限制，Hybride-Files 虽然不是官方致命的文件类型，但确实是一个不错的类型。</li>
</ul>

<h2 id="avi--1">AVI 文件布局</h2>
<p>一个<code>dwFourCC=AVI</code>的<code>RIFF-List</code>称为<code>RIFF-AVI-List</code>，
一个<code>dwFourCC=AVIX</code>的<code>RIFF-List</code>称为<code>RIFF-AVIX-List</code>。</p>

<p>每个 AVI 文件都有如下布局：
<code>
RIFF AVI    //mandatory
{RIFF AVIX} //only for Open-DML files
</code></p>

<p>并非之受限于 uint32 的限制，文件大小的极限并非 4G,而是</p>

<ul>
  <li>对于 AVI 1.0: sizeof(RIFF-AVI) &lt; 2G</li>
  <li>对于 Open-DML, sizeof(RIFF-AVI) &lt; 1G(!!), sizeof(RIFF-AVIX) &lt; 2G</li>
</ul>

<p>一般来讲，RIFF-AVI-Lists被创建的越小越好。</p>

<h3 id="mainaviheaderavih">MainAVIHeader(avih)</h3>

<p><code>avih</code>结构定义如下：<br />
```
typedef struct
{
    DWORD dwMicroSecPerFrame;   //frame display rate(or 0)
    DWORD dwMaxBytesPerSec;     //max transfer rate
    DWORD dwPaddingGranularity; //pad to multiples of this size
    DWORD dwFlags               //the ever-present flags
    DWORD dwTotalFrames;        //frames in file
    DWORD dwInitialFrames;
    DWORD dwStreams;
    DWORD dwSuggestedBufferSize;</p>

<pre><code>DWORD dwWidth;
DWORD dwHeight;

DWORD dwReserved[4]; }MainAVIHeader; ``` * dwMicroSecPerFrame 以微妙为单位，包含了一个视频帧的持续时间。该值可以被忽略。注意，某些程序中可能会把它写成 framerate 值，因此 dwMicroSecPerFrame 并不可靠。   * dwMaxBytesPerSec 文件中最大的数据率，该值同样的不是特别重要。   * dwPaddingGranularity 填充的数据。   * dwFlags `AVIF_HASINDEX`（该文件有index）、`AVIF_MUSTUSEINDEX`（）、`AVIF_ISINTERLEAVED` `AVIF_WASCAPTUREFILE` `AVIF_COPYRIGHTED` `AVIF_TRUSTCKTYPE`。   * dwTotalFrames 包含了`RIFF-AVI list`中视频帧数。如果文件中包含`RIFF-AVIX-Lists`，它不会包含其中的视频帧。因为某些`muxer`会写一些错误的值，因此该值同样的不可靠。   * dwInitialFrames 忽略 * dwStreams 文件中`streams`的数量。   * dwSuggestedBufferSize 文件chunks 所需要的内存大小。同样不要高估它的可靠性。   * dwWidth 视频的宽。   * dwHeight 视频的高。  
</code></pre>

<h3 id="stream-header-list">Stream Header List</h3>

<p>针对每个<code>stream</code>都有一个<code>strl</code>，如果<code>strl</code>的数量与<code>MainAVIHeader::dwStreams</code>不同，就需要发出一个<code>fatal error report</code>。</p>

<h3 id="stream-header-list-elementstrh">Stream Header List Element(strh)</h3>

<p><code>
typedef struct{
    FOURCC fccType;
    FOURCC fccHandler;
    DWORD  dwFlags;
    WORD   wPriority;
    WORD   wLanguage;
    DWORD  dwInitialFrames;
    DWORD  dwScale;
    DWORD  dwRate;  // dwRate / dwScale == samples /second
    DWORD  dwStart;
    DWORD  dwLength;  //In units above
    DWORD  dwSuggestedBufferSize;
    DWORD  dwQuality;
    DWORD  dwSampleSize;
    RECT   rcFrame;
}AVIStreamHeader;
</code></p>

<ul>
  <li>fccType <code>vids</code>代表 video, <code>auds</code>代表 audio, <code>txts</code>代表 subtitle。</li>
  <li>fccHandler</li>
  <li>dwFlags <code>AVISF_DISABLED</code> <code>AVISF_VIDEO_PALCHANGES</code></li>
  <li>dwInitialFrames</li>
  <li>dwRate / dwScale = samples / second(audio) or frames / second(video)</li>
  <li>dwStart</li>
  <li>dwLength</li>
  <li>dwSuggestedBufferSize</li>
  <li>dwQuality</li>
  <li>dwSampleSize</li>
</ul>

<h3 id="stream-header-list-elementstrf">Stream Header List Element(strf)</h3>

<p><code>strf</code>的结构依据媒体类型。对于 video，使用<code>BITMAPINFOHEADER</code>结构，而 audion，使用<code>WAVEFORMATEX</code>结构。</p>

<p><code>
typedef struct tagBITMAPINFOHEADER{
    DWORD biSize;
    LONG  biWidth;
    LONG  biHeight;
    WORD  biPlanes;
    WORD  biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG  biXPelsPerMeter;
    LONG  biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
}BITMAPINFOHEADER, *PBITMAPINFOHEADER;
</code></p>

<ul>
  <li>biSize  该结构体所需要的 byte 大小。</li>
  <li>biWidth 图像的宽度。如果<code>biCompression</code>是<code>BI_JPEG</code>或<code>BI_PNG</code>，<code>biWidth</code>成员相应的指解压缩后的<code>JPEG</code>或<code>PNG</code>图像文件的宽。</li>
  <li>biHeight 位图的高度。如果<code>biHeight</code>是正数，位图是自底向上的<code>DIB</code>,它的原点是右下角地点；。如果<code>biHeight</code>是正数，位图是自顶向下的<code>DIB</code>,它的原点是右上角地点；
如果<code>biHeight</code>是负数，<code>biCompression</code>要么是<code>BI_RGB</code>或<code>BI_BITFIELDS</code>，自顶向下的<code>DIB</code>不能被压缩。
如果<code>biCompression</code>是<code>BI_JPEG</code>或<code>BI_PNG</code>，则<code>biHeight</code>程序分别指解压缩后的<code>JPEG</code>或<code>PNG</code>图像的高。</li>
  <li>biPlanes 目标设备的<code>planes</code>的数量，该值必须是1。</li>
  <li>biBitCount 每个像素所用的 bit 数，<code>BITMAPINFOHEADER</code>的成员<code>biBitCount</code>决定了每个 pixel 所占的 bit 数、以及位图中表示颜色所能用到的最大数。该值可以是<code>0/1/4/8/16/24/32</code>。</li>
  <li>biCompression 压缩的自底向上的位图的压缩类型，可以是<code>BI_RGB</code><code>BI_RLE8</code><code>BI_RLE4</code><code>BI_BITFIELDS</code><code>BI_JPEG</code><code>BI_PNG</code>.</li>
  <li>biSizeImage 图像的大小，单位 byte。如果是<code>BI_RGB</code>位图，该值被设置为0。如果<code>biCompression</code>是<code>BI_JPEG</code>或<code>BI_PNG</code>，该值分别指示 JPEG 或 PNG 图像的大小。</li>
  <li>biXPelsPerMeter 水平分辨率。</li>
  <li>biYPelsPerMeter 垂直分辨率。</li>
  <li>biClrUsed 颜色表中该位图实际使用的颜色指针。</li>
  <li>biClrImportant</li>
</ul>

<p><code>
typedef struct{
    WORD  wFormatTag;
    WORD  nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD  nBlocAlign;
    WORD  wBitsPerSample;
    WORD  cbSize;
}WAVEFORMATEX;
</code>
(待续…)</p>

<h3 id="stream-header-list-elementindx">Stream Header List Element(indx)</h3>

<p>该结构请看下面的<code>AVI index</code>小结。</p>

<h3 id="stream-header-list-elementstrn">Stream Header List Element(strn)</h3>

<p>该部分包含了<code>stream</code>的的名字。该名字只能使用标准的<code>ASCII</code>，尤其不能使用<code>UTF-8</code>。</p>

<h2 id="avi-indexes">AVI Indexes</h2>

<h3 id="old-style-index">old style index</h3>

<p><code>
AVIINDEXENTRY index_entry[n]  
typedef struct{
    DWORD ckid;
    DWORD dwFlags;
    DWORD dwChunkOffset;
    DWORD dwChunkLength;
}AVIINDEXENTRY;
</code></p>

<h3 id="open-dml-index">Open-DML Index</h3>

<p><code>
typedef struct _aviindex_chunk{
    FOURCC fcc;
    DWORD  cb;
    WORD   wLongsPerEntry;
    BYTE   bIndexSubType;
    BYTE   bIndexType;
    DWORD  nEntriesInUse;
    DWORD  dwChunkId;
    DWORD  dwReserved[3];
    struct _aviindex_entry{
        DWORD adw[wLongsPerEntry];
    }aIndex[];
}AVIINDEXCHUNK;
</code></p>

<h3 id="using-the-open-dml-index">Using the Open-DML index</h3>

<h2 id="the-movi---lists">The movi - Lists</h2>

<p><code>Movi-List</code>包含<code>Video</code><code>Audio</code><code>Subtitle</code>和<code>index data</code>。它们可以打包进<code>rec-List</code>。如：</p>

<p><code>
LIST movi
    LIST rec
        01wb
        02wb
        03dc
    LIST rec
        01wb
        02wb
    LIST rec
        ...
        ...
        ix01
        ix02
        ...
</code>
其中的<code>chunks</code> ID 分别定义如下：</p>

<ul>
  <li>..wb : audio chunk</li>
  <li>..dc : video chunk</li>
  <li>..tx : subtitle chunk</li>
  <li>ix.. : standard index block</li>
</ul>

<h2 id="section-1">参考文献</h2>

<ol>
  <li><a href="http://www.ezr8.com/avi.html">What is avi?</a></li>
  <li><a href="http://pvdtools.sourceforge.net/aviformat.txt">BETA DOCUMENTATION OF RIFF-AVI FILE FORMAT</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Audio_Video_Interleave">Audio Video Interleave</a></li>
  <li><a href="http://blog.csdn.net/jszj/article/category/614875">AVI 文件格式</a></li>
  <li><a href="http://blog.csdn.net/njuitjf/article/details/5680632">AVI 文件解析</a></li>
  <li><a href="https://www.ffmpeg.org/doxygen/0.6/avidec_8c-source.html">FFmpeg AVI</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Profiles-Tiers-Levels]]></title>
    <link href="http://lazybing.github.io/blog/2016/06/27/profiles-tiers-levels/"/>
    <updated>2016-06-27T07:52:00-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/06/27/profiles-tiers-levels</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#profiletier--level-" id="markdown-toc-profiletier--level-">Profile、Tier 和 Level 的概念</a></li>
</ul>

<h2 id="profiletier--level-">Profile、Tier 和 Level 的概念</h2>

<p>HEVC 中定义了三类 Profile: Main、Main10 和 Main Still Picture。<br />
Profile 指出码流中使用了哪些编码工具和算法。</p>

<!--more-->

<p>Levle 指出一些对解码端的负载和内存占用影响较大的关键参数约束。主要包括采样率、分辨率、码率的最大
值，压缩率的最小值，DPB 的容量，CPB（解码缓冲区）的大小。</p>

<p>在 HEVC 的设计中，应用可以只依据最大的码率和 CPB 大小就可以区分。为了解决这个问题，有些 Level 定义了
两个 Tier——Main Tier 用于大多数应用，High Tier 用于那些最苛刻的应用。</p>

<p>HEVC 标准定义了两类 Tiers(Main 和 High) 和 13 类 Levels。不同的Tiers和Levels对<code>maximum bit rate</code><code>maximum luma sample rate</code><code>maximum luma picture size</code>
<code>minimum compression ratio</code><code>maximum number of slices</code>和<code>maximum number of tiles</code>等。</p>

<p>HM 中关于 ProfileTierLevel 的定义如下：</p>

<p>```
namespace Profile
{
    enum Name
    {
        NONE               = 0,
        MAIN               = 1,
        MAIN10             = 2,
        MAINSTILLPICTURE   = 3,
        MAINREXT           = 4,
        HIGHTHROUGHPUTREXT = 5
    };
}</p>

<p>namespace Level
{
    enum Tier
    {
        MAIN = 0,
        HIGH = 1,
    };</p>

<pre><code>enum Name
{
    NONE       = 0,
    LEVEL1     = 30,
    LEVEL2     = 60,
    LEVEL2_1   = 63,
    LEVEL3     = 90,
    LEVEL3_1   = 93,
    LEVEL4     = 120,
    LEVEL4_1   = 123,
    LEVEL5     = 150,
    LEVEL5_1   = 153,
    LEVEL5_2   = 156,
    LEVEL6     = 180,
    LEVEL6_1   = 183,
    LEVEL6_2   = 186,
    LEVEL8_5   = 255,
}; }
</code></pre>

<p>class ProfileTierLevel
{
    Int            m_profileSpace;
    Level::Tier    m_tierFlag;
    Profile::Name  m_profileIdc;
    Bool           m_profileCompatibilityFlag[32];
    Level::Name    m_levelIdc;</p>

<pre><code>Bool           m_progressiveSourceFlag;
Bool           m_interlacedSourceFlag;
Bool           m_nonPackedConstraintFlag;
Bool           m_frameOnlyConstraintFlag;
UInt           m_bitDepthConstraintValue;
ChromaFormat   m_chromaFormatConstraintValue;
Bool           m_intraConstraintFlag;
Bool           m_lowerBitRateConstraintFlag; } ```
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YUV 数据分析]]></title>
    <link href="http://lazybing.github.io/blog/2016/05/23/the-data-layout/"/>
    <updated>2016-05-23T09:23:07-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/05/23/the-data-layout</id>
    <content type="html"><![CDATA[<p>图像的摆放布局各式各样，不同的布局用于不同的场景。简单记录一下常用的几种数据摆放格式。
<!--more--></p>

<h2 id="yuv-">YUV 数据</h2>
<p>对于 YUV 图像来说，会有如下几个特性：<code>FOURCC</code> <code>Format</code> <code>Component Order</code> <code>Image Resolution</code> <code>Interlace/Progressive</code> <code>Packed/Planar</code> 。</p>

<p><code>FOURCC</code>包括：<code>UYVY</code> <code>UYNV</code> <code>Y422</code> <code>IUYV</code> 等等；</p>

<p><code>Format</code>包括：<code>YUV420</code> <code>YUV422</code> <code>YUV444</code> <code>RGB444</code> <code>MONO</code>等等：</p>

<p><code>Component Order</code>包括：<code>YUV</code> <code>YVU</code>。</p>

<h3 id="yuv420">YUV420摆放格式</h3>

<p>progressive 的摆放格式如图：</p>

<p><img src="http://lazybing.github.io/images/datalayout/Yuv420.png" /></p>

<p>通过 YUV image 的摆放格式可以提取出 Y/U/V 三个分量。tulips_yuv420_prog_planar_qcif.yuv以 Planar、progressive、YUV420、176*144、IYUV（I420）为例，示例代码如下：</p>

<p><figure class='code'><figcaption><span>splityuvfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">split_yuv</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">,</span> <span class="n">uint</span> <span class="n">height</span><span class="p">,</span> <span class="n">uint</span> <span class="n">width</span><span class="p">)</span>                                                                                                                              <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
</span><span class='line'><span class="kt">FILE</span> <span class="o">*</span><span class="n">fpy</span><span class="p">;</span>
</span><span class='line'><span class="kt">FILE</span> <span class="o">*</span><span class="n">fpu</span><span class="p">;</span>
</span><span class='line'><span class="kt">FILE</span> <span class="o">*</span><span class="n">fpv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span>  <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">width</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fpy</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;y.bin&quot;</span><span class="p">,</span> <span class="s">&quot;wa&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fpu</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;u.bin&quot;</span><span class="p">,</span> <span class="s">&quot;wa&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fpv</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;v.bin&quot;</span><span class="p">,</span> <span class="s">&quot;wa&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">fpv</span> <span class="o">||</span> <span class="o">!</span><span class="n">fpu</span> <span class="o">||</span> <span class="o">!</span><span class="n">fpy</span> <span class="o">||</span> <span class="o">!</span><span class="n">fp</span><span class="p">){</span>
</span><span class='line'>     <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;line %d open file error.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fread</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">height</span> <span class="o">*</span> <span class="n">width</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="n">fwrite</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">height</span> <span class="o">*</span> <span class="n">width</span> <span class="p">,</span> <span class="n">fpy</span><span class="p">);</span>
</span><span class='line'><span class="n">fwrite</span><span class="p">(</span><span class="n">buf</span> <span class="o">+</span> <span class="n">height</span> <span class="o">*</span> <span class="n">width</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">height</span> <span class="o">*</span> <span class="n">width</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span><span class="p">,</span> <span class="n">fpu</span><span class="p">);</span>
</span><span class='line'><span class="n">fwrite</span><span class="p">(</span><span class="n">buf</span> <span class="o">+</span> <span class="p">(</span><span class="n">uint</span><span class="p">)(</span><span class="n">height</span> <span class="o">*</span> <span class="n">width</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">/</span> <span class="mi">4</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">height</span> <span class="o">*</span> <span class="n">width</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span><span class="p">,</span> <span class="n">fpv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">fclose</span><span class="p">(</span><span class="n">fpv</span><span class="p">);</span>
</span><span class='line'><span class="n">fclose</span><span class="p">(</span><span class="n">fpu</span><span class="p">);</span>
</span><span class='line'><span class="n">fclose</span><span class="p">(</span><span class="n">fpy</span><span class="p">);</span>
</span><span class='line'><span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="n">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>上面给出的是 YUV Progressive 的文件，现在对 interlace 文件进行分析。
interlace 的摆放格式如图：</p>

]]></content>
  </entry>
  
</feed>
