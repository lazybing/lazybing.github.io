<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:总结积累 | 懒人李冰]]></title>
  <link href="http://lazybing.github.io/blog/categories/zong-jie-ji-lei/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2021-11-26T07:33:19-08:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[程序链接(Program Linking)]]></title>
    <link href="http://lazybing.github.io/blog/2020/06/25/program-linking/"/>
    <updated>2020-06-25T15:22:39-07:00</updated>
    <id>http://lazybing.github.io/blog/2020/06/25/program-linking</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">链接示例</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">静态链接</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">目标文件</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">可重定位目标文件</a>    <ul>
      <li><a href="#section-4" id="markdown-toc-section-4">符号和符号表</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">符号解析</a>        <ul>
          <li><a href="#section-6" id="markdown-toc-section-6">链接器如何解析多重定义的全局符号</a></li>
          <li><a href="#section-7" id="markdown-toc-section-7">与静态库链接</a></li>
          <li><a href="#section-8" id="markdown-toc-section-8">链接器如何使用静态库来解析引用</a></li>
        </ul>
      </li>
      <li><a href="#section-9" id="markdown-toc-section-9">重定位</a>        <ul>
          <li><a href="#section-10" id="markdown-toc-section-10">重定位条目</a></li>
          <li><a href="#section-11" id="markdown-toc-section-11">重定位符号引用</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-12" id="markdown-toc-section-12">可执行目标文件</a></li>
  <li><a href="#section-13" id="markdown-toc-section-13">共享目标文件</a></li>
  <li><a href="#section-14" id="markdown-toc-section-14">处理目标文件的工具</a></li>
</ul>

<p><strong>链接</strong>是将各种代码和数据片段收集并组合成一个单一文件的过程，该文件可以被加载到内存并执行。理解链接的几个好处有：</p>

<!--more-->

<ul>
  <li>理解链接器将帮助你构造大型程序。</li>
  <li>理解链接器将帮助你避免一些危险的编程错误。</li>
  <li>理解链接器将帮助你理解语言的作用域规则是如何实现的。</li>
  <li>理解链接器将帮助你理解其他重要的系统概念。</li>
  <li>理解链接器将使你能够利用共享库</li>
</ul>

<p>下面会介绍静态链接、加载时的共享库的动态链接、运行时的共享库动态链接等方面。</p>

<h2 id="section">链接示例</h2>

<p>通常说的编译程序包括如下四个方面：预处理(cpp)、编译(ccl)、汇编(as)、链接(ld)。比如，有如下 main.c 和 sum.c 两个文件。</p>

<p>```
int sum(int *a, int n);</p>

<p>int array[2] = {1, 2};</p>

<p>int main()
{
    int val = sum(array, 2);
    return val;
}</p>

<p>int sum(int *a, int n)
{
    int i, s = 0;</p>

<pre><code>for (i = 0; i &lt; n; i++) {
    s += a[i];
}

return s; } ```
</code></pre>

<p>编译命令：
<code>
$gcc -Og -o prog main.c sum.c 或
$gcc -Og -v -o prog main.c sum.c
</code></p>

<p>对上面的源文件进行如下操作:</p>

<p>main.c—&gt;预处理(cpp)—&gt;main.i—&gt;编译器(ccl)—&gt;main.s—&gt;汇编器(as)—&gt;main.o<br />
sum.c—-&gt;预处理(cpp)—&gt;sum.i—-&gt;编译器(ccl)—&gt;sum.s—-&gt;汇编器(as)—&gt;sum.o<br />
main.o + sum.o—&gt;链接器(ld)—&gt;prog</p>

<h2 id="section-1">静态链接</h2>

<p>静态链接以一组可重定位目标文件和命令行参数作为输入，生成一个完全链接的、可以加载和运行可执行目标文件作为输出。</p>

<p>为构造可执行文件，链接器主要完成两项任务：</p>

<ul>
  <li><strong>符号解析。</strong> 符号解析的目的是使得目标文件中符号的定义和引用匹配起来。例如引用一个函数名符号时，符号解析的功能就是找到函数的引用和定义，并将其匹配起来。</li>
  <li><strong>重定位。</strong> 由编译器和汇编器生成的 .code 和 .data 节，都是从地址 0 开始的。链接器通过将每个符号定义为一个与内存关联起来，完成重定位，然后修改所有对这些符号的引用，使得它们指向这个内存位置。</li>
</ul>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>main.o:     file format elf64-x86-64
</span><span class='line'>Disassembly of section .text:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0000000000000000 &lt;main&gt;:
</span><span class='line'>   0:	55                   	push   %rbp
</span><span class='line'>   1:	48 89 e5             	mov    %rsp,%rbp
</span><span class='line'>   4:	48 83 ec 10          	sub    $0x10,%rsp
</span><span class='line'>   8:	be 02 00 00 00       	mov    $0x2,%esi
</span><span class='line'>   d:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 14 &lt;main+0x14&gt;
</span><span class='line'>  14:	e8 00 00 00 00       	callq  19 &lt;main+0x19&gt;
</span><span class='line'>  19:	89 45 fc             	mov    %eax,-0x4(%rbp)
</span><span class='line'>  1c:	8b 45 fc             	mov    -0x4(%rbp),%eax
</span><span class='line'>  1f:	c9                   	leaveq 
</span><span class='line'>  20:	c3                   	retq&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sum.o:     file format elf64-x86-64&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Disassembly of section .text:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0000000000000000 &lt;sum>:
</span><span class='line'>   0:	55                   	push   %rbp
</span><span class='line'>   1:	48 89 e5             	mov    %rsp,%rbp
</span><span class='line'>   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
</span><span class='line'>   8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
</span><span class='line'>   b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
</span><span class='line'>  12:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
</span><span class='line'>  19:	eb 1d                	jmp    38 &lt;sum+0x38&gt;
</span><span class='line'>  1b:	8b 45 f8             	mov    -0x8(%rbp),%eax
</span><span class='line'>  1e:	48 98                	cltq   
</span><span class='line'>  20:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
</span><span class='line'>  27:	00 
</span><span class='line'>  28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
</span><span class='line'>  2c:	48 01 d0             	add    %rdx,%rax
</span><span class='line'>  2f:	8b 00                	mov    (%rax),%eax
</span><span class='line'>  31:	01 45 fc             	add    %eax,-0x4(%rbp)
</span><span class='line'>  34:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
</span><span class='line'>  38:	8b 45 f8             	mov    -0x8(%rbp),%eax
</span><span class='line'>  3b:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
</span><span class='line'>  3e:	7c db                	jl     1b &lt;sum+0x1b&gt;
</span><span class='line'>  40:	8b 45 fc             	mov    -0x4(%rbp),%eax
</span><span class='line'>  43:	5d                   	pop    %rbp
</span><span class='line'>  44:	c3                   	retq</span></code></pre></td></tr></table></div></figure></sum></p>

<p>上面 text section 是 main.o 和 sum.o 反编译出来的，可以看出，main 函数和 sum 函数都是从地址 0 开始的。将 main.o 和 sum.o 链接生成 prog 可执行文件，反编译可执行文件后，部分 section 如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>00000000000005fa &lt;main&gt;:
</span><span class='line'> 5fa:	48 83 ec 08          	sub    $0x8,%rsp
</span><span class='line'> 5fe:	be 02 00 00 00       	mov    $0x2,%esi
</span><span class='line'> 603:	48 8d 3d 06 0a 20 00 	lea    0x200a06(%rip),%rdi        # 201010 &lt;array>
</span><span class='line'> 60a:	e8 05 00 00 00       	callq  614 &lt;sum>
</span><span class='line'> 60f:	48 83 c4 08          	add    $0x8,%rsp
</span><span class='line'> 613:	c3                   	retq&lt;/sum>&lt;/array>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0000000000000614 &lt;sum>:
</span><span class='line'> 614:	b8 00 00 00 00       	mov    $0x0,%eax
</span><span class='line'> 619:	ba 00 00 00 00       	mov    $0x0,%edx
</span><span class='line'> 61e:	eb 09                	jmp    629 &lt;sum+0x15&gt;
</span><span class='line'> 620:	48 63 ca             	movslq %edx,%rcx
</span><span class='line'> 623:	03 04 8f             	add    (%rdi,%rcx,4),%eax
</span><span class='line'> 626:	83 c2 01             	add    $0x1,%edx
</span><span class='line'> 629:	39 f2                	cmp    %esi,%edx
</span><span class='line'> 62b:	7c f3                	jl     620 &lt;sum+0xc&gt;
</span><span class='line'> 62d:	f3 c3                	repz retq 
</span><span class='line'> 62f:	90                   	nop</span></code></pre></td></tr></table></div></figure></sum></p>

<p>从上面可以看出，可执行文件中的 main 和 sum 的地址已经不再是 0， main 中调用了 sum 的地址为 614,切好就是 sum 的地址。</p>

<h2 id="section-2">目标文件</h2>

<p>目标文件有三种形式：可重定位的目标文件、可执行的目标文件、共享目标文件。</p>

<ul>
  <li><strong>可重定位的目标文件</strong> 是包含二进制代码的数据，其可以在编译时与其他可重定位目标文件结合生成可执行文件。</li>
  <li><strong>可执行目标文件</strong> 包含二进制代码和数据，可直接复制到内存中执行。</li>
  <li><strong>共享目标文件</strong> 特殊的可重定位目标文件，可以在加载或运行时被动态地加载进内存并链接。</li>
</ul>

<h2 id="section-3">可重定位目标文件</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">ELF 头</th>
      <th style="text-align: center">描述生成该文件的系统的字的大小和字节顺序，以及包含帮助链接器语法分析和解释目标文件的信息</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">.text</td>
      <td style="text-align: center">已编译程序的机器代码</td>
    </tr>
    <tr>
      <td style="text-align: center">.rodata</td>
      <td style="text-align: center">只读数据，比如 printf 中的字符串</td>
    </tr>
    <tr>
      <td style="text-align: center">.data</td>
      <td style="text-align: center">已初始化的全局和静态 C 变量</td>
    </tr>
    <tr>
      <td style="text-align: center">.bss</td>
      <td style="text-align: center">未初始化的全局和静态 C 变量, 以及所有被初始化为 0 的全局或静态变量</td>
    </tr>
    <tr>
      <td style="text-align: center">.symtab</td>
      <td style="text-align: center">一个符号表，它存放在程序中定义和引用的函数和全局变量的信息</td>
    </tr>
    <tr>
      <td style="text-align: center">.rel.text</td>
      <td style="text-align: center">一个 .text 节中位置的列表，当链接器把这个目标文件和其他文件组合时，需要修改这些位置</td>
    </tr>
    <tr>
      <td style="text-align: center">.rel.data</td>
      <td style="text-align: center">被模块引用或定义的所有全局变量的重定位信息</td>
    </tr>
    <tr>
      <td style="text-align: center">.debug</td>
      <td style="text-align: center">调试符号表，与上面的 symtab 不同，它还包含了局部变量和类型定义，以及原始的 C 源文件</td>
    </tr>
    <tr>
      <td style="text-align: center">.line</td>
      <td style="text-align: center">原始 C 源程序中的行号和 .text 节中机器指令之间的映射</td>
    </tr>
    <tr>
      <td style="text-align: center">.strtab</td>
      <td style="text-align: center">一个字符串表，包括 .symtab 和 .debug 节中的符号表</td>
    </tr>
    <tr>
      <td style="text-align: center">节点头部</td>
      <td style="text-align: center"> </td>
    </tr>
  </tbody>
</table>

<p>给出一个程序示例 obj.c：</p>

<p>```
#include <stdio.h></stdio.h></p>

<p>int AAA = 3;</p>

<p>int sum(int a, int b)
{
    return a + b;
}</p>

<p>int main(int argc, char **argv)
{
    int a = 0;
    int b = 1;
    int c;</p>

<pre><code>static int aa = 0;
static int bb = 1;
static int cc;

printf("a %d aa %d b %d bb %d c %d cc %d AAA %d\n", a, aa, b, bb, c, cc, AAA);
c = sum(AAA, AAA);

return 0; } ```
</code></pre>

<p>编译该文件 obj.c ：
<code>
$ gcc -g -c obj.c
$ objdump -D obj.o &gt; obj.txt
</code></p>

<p>反编译生成的可重定位目标文件，下面给出几部分</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Disassembly of section .data:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0000000000000000 &lt;AAA>:
</span><span class='line'>   0:	03 00                	add    (%rax),%eax
</span><span class='line'>	...&lt;/AAA>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0000000000000004 &lt;bb.2260>:
</span><span class='line'>   4:	01 00                	add    %eax,(%rax)
</span><span class='line'>	...&lt;/bb.2260>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Disassembly of section .bss:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0000000000000000 &lt;cc.2261>:
</span><span class='line'>   0:	00 00                	add    %al,(%rax)
</span><span class='line'>	...&lt;/cc.2261>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>0000000000000004 &lt;aa.2259>:
</span><span class='line'>   4:	00 00                	add    %al,(%rax)
</span><span class='line'>	...&lt;/aa.2259>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>可以看出，<code>.data</code> 包含了已初始化的全局变量 AAA、和静态变量 bb。<code>.bss</code>包含了未初始化的静态变量 cc 和初始化为零的静态变量 aa。但要注意，对于局部的变量 a、b、c并没有出现在上面的几个节中，因为局部变量在运行时被保护在栈中，既不出现在<code>.data</code>节中，也不出现在<code>.bss</code> 中。</p>

<h3 id="section-4">符号和符号表</h3>

<p>对于一个可重定位的模块 m 来说，它包含的定义和引用的符号，包含三种类型：
* 由模块 m 定义并能被其他模块引用的全局符号。
* 由其他模块定义并被模块 m 引用的全局符号。
* 只被模块 m 定义和引用的局部符号。</p>

<p>注意，链接器符号和程序变量是不同的，.symtab 中的符号表不包含对应于本地非静态程序变量的任何符号，非静态程序变量符号在运行时在栈中管理，链接器对此类符号不感兴趣，（但带有static 属性的变量除外）。</p>

<p>下面给出符号表的一个示例 m.o 和 swap.o：</p>

<p>```
void swap();</p>

<p>int buf[2] = {1, 2};</p>

<p>int main()
{
    sawp();
    return 0;
}</p>

<p>extern int buf[];</p>

<p>int *bufp0 = &amp;buf[0];
int *bufp1;</p>

<p>void swap()
{
    int temp;</p>

<pre><code>bufp1 = &amp;buf[1];
temp  = *bufp0;
*bufp0 = *bufp1;
*bufp1 = temp; } ```
</code></pre>

<p>使用 readelf 工具对 swap.o 查看符号表如下:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Symbol table ‘.symtab’ contains 13 entries:
</span><span class='line'>   Num:    Value          Size Type    Bind   Vis      Ndx Name
</span><span class='line'>     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
</span><span class='line'>     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS swap.c
</span><span class='line'>     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 
</span><span class='line'>     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 
</span><span class='line'>     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 
</span><span class='line'>     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 
</span><span class='line'>     6: 0000000000000000     0 SECTION LOCAL  DEFAULT    8 
</span><span class='line'>     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    9 
</span><span class='line'>     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 
</span><span class='line'>     9: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    5 bufp0
</span><span class='line'>    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND buf
</span><span class='line'>    11: 0000000000000008     8 OBJECT  GLOBAL DEFAULT  COM bufp1
</span><span class='line'>    12: 0000000000000000    63 FUNC    GLOBAL DEFAULT    1 swap</span></code></pre></td></tr></table></div></figure></p>

<p>从上面可以看出几个符号的解析如下:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">符号</th>
      <th style="text-align: center">.symtab 条目</th>
      <th style="text-align: center">符号类型</th>
      <th style="text-align: center">所属模块</th>
      <th style="text-align: center">节</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">buf</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">extern</td>
      <td style="text-align: center">m.o</td>
      <td style="text-align: center">.data</td>
    </tr>
    <tr>
      <td style="text-align: center">bufp0</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">GLOBAL</td>
      <td style="text-align: center">swap.o</td>
      <td style="text-align: center">.data</td>
    </tr>
    <tr>
      <td style="text-align: center">bufp1</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">GLOBAL</td>
      <td style="text-align: center">swap.o</td>
      <td style="text-align: center">.common</td>
    </tr>
    <tr>
      <td style="text-align: center">swap</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">GLOBAL</td>
      <td style="text-align: center">swap.o</td>
      <td style="text-align: center">.text</td>
    </tr>
    <tr>
      <td style="text-align: center">temp</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">-</td>
      <td style="text-align: center">-</td>
      <td style="text-align: center">-</td>
    </tr>
  </tbody>
</table>

<h3 id="section-5">符号解析</h3>

<p>链接器解析符号引用的方法是将每个引用与它输入的可重定位目标文件的符号表中的一个确定的符号定义关联起来。对全局符号的解析，如果多个目标文件中定义相同名字的全局符号，链接器要么给出错误提示，要么以某种方法选出一个定义并抛弃其他定义。</p>

<h4 id="section-6">链接器如何解析多重定义的全局符号</h4>

<p>编译时，编译器向汇编器输出每个全局符号，或者是强或者是弱，汇编器把这个信息隐含地编码在可重定位目标文件的符号表里。函数和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。链接规则如下：
* 不允许有多个同名的强符号。
* 如果有一个强符号和多个弱符号同名，选择强符号。
* 如果有多个弱符号同名，从中任选一个。</p>

<h4 id="section-7">与静态库链接</h4>

<p>静态库，将所有相关的目标文件模块打包成一个单独的文件，该文件可以作为链接器的输入，当链接器构造一个输出的可执行文件时，链接器只会复制该文件中被应用程序引用的目标模块，这样的文件称为静态库。</p>

<h4 id="section-8">链接器如何使用静态库来解析引用</h4>

<p>解析阶段，链接器<strong>从左到右(有序的)</strong>按照它们在编译器驱动程序命令行上出现的顺序来扫描可重定位目标文件和存档文件。链接器会维护三个集合：可重定位目标文件集合E、未解析的符号集合U、已定义的符号集合D。链接器的解析过程如下:</p>

<ul>
  <li>对命令行上的每个输入文件 f，链接器判断是否为目标文件或静态库，如果是目标文件，将其添加到E，修改U 和 D，继续解析下一个文件。</li>
  <li>如果 f 是静态库，链接器尝试匹配 U 中未解析的符号和由存档文件成员定义的符号。匹配成功，将模块添加到E 中，修改 U 和 D。</li>
  <li>链接器扫描完输入文件后，U 非空，链接器输出一个错误并终止。否则，它会合并和重定位 E 中的目标文件，生成可执行文件。</li>
</ul>

<p>从链接器解析静态库的原理可以看出，编译时，静态库存放的位置很重要，同样的目标文件和静态库，位置不同，可能编译结果就不同了。</p>

<p><code>
$gcc -static ./libvector.a main.c
$gcc -static main.c ./libvector.a
</code></p>

<h3 id="section-9">重定位</h3>

<p>链接器完成符号解析后，就把代码中的每个符号和定义关联起来了。现在链接器就可以重定位了，重定位由两步组成：</p>

<ul>
  <li>重定位节和符号定义。链接器将所有相同类型的 section 合并成一个新的 section。比如，将所有模块的 .data 合并成一个新的 .data。之后将运行时的内存地址赋给新的 section 以及每个模块的定义。</li>
  <li>重定位节中的符号引用。链接器修改 .data 和 .text 中对每个符号的引用，使得它们指向正确的运行时地址。</li>
</ul>

<h4 id="section-10">重定位条目</h4>

<p>汇编器遇到对最终位置未知的目标引用，会生成一个重定位条目，告知链接器在将目标文件合并成可执行文件时如何修改该引用。代码的重定位条目放在 .rel.text 中，已初始化数据的重定位条目放在 .rel.data 中.</p>

<p>重定位类型有 32 种，最常用的两种是:</p>

<ul>
  <li><strong>R_X86_64_P32</strong>，重定位一个使用 32 位 PC  相对地址的引用。比如调用函数常用的 call 指令</li>
  <li><strong>R_X86_64_32</strong>，重定位一个使用 32 位绝对地址的引用</li>
</ul>

<h4 id="section-11">重定位符号引用</h4>
<p>链接器的重定位算法的伪代码如下：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foreach section s {
</span><span class='line'>    foreach relocation entry r {
</span><span class='line'>        refptr = s + r.offset;  /&lt;em>ptr to reference to be relocated&lt;/em>/&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    /* Relocate a PC-relative reference */
</span><span class='line'>    if (r.type == R_X86_64_PC32) {
</span><span class='line'>        refaddr = ADDR(s) + r.offset; /* ref's run-time address */
</span><span class='line'>        *refptr = (unsigned)(ADDR(r.symbol) + r.addend - refaddr);
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    /* Relocate an absolute reference */
</span><span class='line'>    if (r.type == R_X86_64_32) {
</span><span class='line'>        *refptr = (unsigned)(ADDR(r.symbol) + r.addend);
</span><span class='line'>    }
</span><span class='line'>} }</span></code></pre></td></tr></table></div></figure>
</code></pre>

<h2 id="section-12">可执行目标文件</h2>

<p>可执行目标文件格式类似于可重定位的目标文件格式，稍有不同的是：可执行目标文件有程序的入口点（程序运行时要执行的第一条指令地址）、<code>.text/.rodata/.data</code>节已经被重定位到它们最终运行时内存地址、可执行文件已经被重定位所以不需要 <code>.rel</code> 节。</p>

<p>加载器会将可执行目标文件中的代码和数据从磁盘复制到内存中，然后跳转到程序的第一条指令或入口点来运行该程序。</p>

<h2 id="section-13">共享目标文件</h2>

<p>静态库需要定期维护和更新，静态库的代码被复制到每个运行进程的文本段中，会极大的浪费内存系统资源。共享库可以解决静态库的问题，共享库是一个目标模块，在运行和加载时，可加载到任意的内存地址，并和内存中的程序连接起来。</p>

<p>动态加载和链接共享库:Linux系统为动态链接器提供了一个简单的接口，允许应用程序在运行时加载和链接共享库。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;dlfcn.h>
</span><span class='line'>void *dlopen(const char *filename, int flag);
</span><span class='line'>void *dlsym(void *handle, char *symbol);
</span><span class='line'>int dlclose(void *handle);
</span><span class='line'>const char *dlerror(void);</span></code></pre></td></tr></table></div></figure></dlfcn.h></p>

<p>共享库的一个主要目的就是允许多个正在运行的进程共享内存中相同的库代码，从而节约宝贵的内存资源。现代系统以这样一种方式编译共享模块的代码段，使得可以把它们加载到内存的任何位置而无需链接器修改。使用该方法，无限多个进程可以共享一个共享模块的代码段的单一副本。加载而无需重定位的代码称为位置无关吗。</p>

<h2 id="section-14">处理目标文件的工具</h2>
<p>Linux系统中有很多工具可以帮忙处理目标文件。</p>

<ul>
  <li><strong>ar</strong> 创建静态库，插入、删除、列出和提取成员。</li>
  <li><strong>strings</strong> 列出目标文件中所有可打印的字符串。</li>
  <li><strong>strip</strong> 从目标文件中删除符号表信息。</li>
  <li><strong>nm</strong> 列出一个目标文件的符号表中定义的符号。</li>
  <li><strong>size</strong> 列出目标文件中节的名字和大小。</li>
  <li><strong>readelf</strong> 显示目标文件的完整结构。</li>
  <li><strong>objdump</strong> 所有二进制工具之母。能够显示目标文件中所有信息，最大作用是反编译 .text 节中的二进制指令。</li>
  <li><strong>ldd</strong> 列出可执行文件在运行时所需要的共享库。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下C语言调用静态库和动态库简介]]></title>
    <link href="http://lazybing.github.io/blog/2018/09/18/linux-c-static-dynamic-library/"/>
    <updated>2018-09-18T21:27:55-07:00</updated>
    <id>http://lazybing.github.io/blog/2018/09/18/linux-c-static-dynamic-library</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">动态库和静态库简述</a></li>
  <li><a href="#endif" id="markdown-toc-endif">endif</a>    <ul>
      <li><a href="#section-1" id="markdown-toc-section-1">静态库使用示例</a></li>
      <li><a href="#section-2" id="markdown-toc-section-2">动态库使用示例</a></li>
    </ul>
  </li>
  <li><a href="#define-lib-libsayhelloso" id="markdown-toc-define-lib-libsayhelloso">define LIB “./libsayhello.so”</a>    <ul>
      <li><a href="#section-3" id="markdown-toc-section-3">动态库和静态库整合</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">参考文档</a></li>
    </ul>
  </li>
</ul>

<p>最近工作中遇到要把第三方静态库整合到自己的动态开里的问题，在此记录并整理一些关于静态库和动态库的知识，并用特定的例子。</p>

<!--more-->

<h3 id="section">动态库和静态库简述</h3>

<p>动态库和静态库本质上是一种可执行代码的二进制形式，它们可以被操作系统载入内存执行。两者的主要区别是，静态库是在编译过程中被载入可执行程序的，体积较大；动态库是在可执行程序在运行时被载入内存的，在编译过程中仅仅使用简单的引用，体积较小。</p>

<p>给出示例代码如下：</p>

<p><figure class='code'><figcaption><span>sayhello.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;sayhello.h&quot;&lt;/stdio.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">helloworld</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">Hello</span> <span class="n">World</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>sayhello.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef &lt;em&gt;SAYHELLO_H&lt;/em&gt;</span>
</span><span class='line'><span class="cp">#define &lt;em&gt;SAYHELLO_H&lt;/em&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">helloworld</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;endif&quot;</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="section-1">静态库使用示例</h3>

<p>编译静态库：</p>

<p><code>
$ gcc -Wall -O2 -fPIC -I./ -c -o sayhello.o sayhello.c
$ ar crv libsayhello.a sayhello.o
</code></p>

<p><code>ar</code>命令会生成<code>libsayhello.a</code>的静态库。该命令的参数如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">参数</th>
      <th style="text-align: center">意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">-r</td>
      <td style="text-align: center">将objectfile 文件插入静态库尾或替换静态库中同名文件</td>
    </tr>
    <tr>
      <td style="text-align: center">-x</td>
      <td style="text-align: center">从静态库文件中抽取文件objfile</td>
    </tr>
    <tr>
      <td style="text-align: center">-t</td>
      <td style="text-align: center">打印静态库的成员文件列表</td>
    </tr>
    <tr>
      <td style="text-align: center">-d</td>
      <td style="text-align: center">从静态库中删除文件objfile</td>
    </tr>
    <tr>
      <td style="text-align: center">-s</td>
      <td style="text-align: center">重置静态库文件索引</td>
    </tr>
    <tr>
      <td style="text-align: center">-v</td>
      <td style="text-align: center">创建文件冗余信息</td>
    </tr>
    <tr>
      <td style="text-align: center">-c</td>
      <td style="text-align: center">创建静态库文件</td>
    </tr>
  </tbody>
</table>

<p>生成了静态库后，可以在可执行文件中调用静态库内的函数,示例代码：</p>

<p><figure class='code'><figcaption><span>lang: test_hello_stactic.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">helloworld</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">helloworld</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>编译命令:</p>

<p><code>
$ gcc test_hello_stactic.c -o test_hello_sta ./libsayhello.a
</code></p>

<h3 id="section-2">动态库使用示例</h3>

<p>编译动态库：</p>

<p><code>
$ gcc -O2 -fPIC -shared sayhello.c -o libsayhello.so
或
$ gcc -O2 -fPIC -c sayhello.c
$ gcc -shared -o libsayhello.so sayhello.o
</code></p>

<p>其中</p>

<ul>
  <li>fPIC:产生与位置无关码，全部使用相对地址</li>
  <li>shared:生成动态库</li>
</ul>

<p>调用动态库的示例代码：</p>

<p><figure class='code'><figcaption><span>lang: test_hello_shared.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;dlfcn.h&gt;&lt;/dlfcn.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;define-lib-libsayhelloso&quot;</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">LIB</span> <span class="err">“</span><span class="p">.</span><span class="o">/</span><span class="n">libsayhello</span><span class="p">.</span><span class="n">so</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">dl</span> <span class="o">=</span> <span class="n">dlopen</span><span class="p">(</span><span class="n">LIB</span><span class="p">,</span> <span class="n">RTLD_LAZY</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">dl</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="err">“</span><span class="nl">Error</span><span class="p">:</span><span class="n">faile</span> <span class="n">to</span> <span class="n">load</span> <span class="n">libary</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)()</span> <span class="o">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">dl</span><span class="p">,</span> <span class="s">&quot;helloworld&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">func</span><span class="p">();</span>
</span><span class='line'><span class="n">dlclose</span><span class="p">(</span><span class="n">dl</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<h3 id="section-3">动态库和静态库整合</h3>

<h3 id="section-4">参考文档</h3>

<ol>
  <li><a href="http://answerywj.com/2016/10/10/Linux%E4%B8%8BC%E8%B0%83%E7%94%A8%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/">Linux下C调用静态库和动态库</a></li>
  <li><a href="https://liam0205.me/2017/04/03/not-to-link-libstdc-statically-and-why/">为什么不能再动态库里静态链接</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何理解内存对齐]]></title>
    <link href="http://lazybing.github.io/blog/2018/08/22/memory-alignment/"/>
    <updated>2018-08-22T08:23:49-07:00</updated>
    <id>http://lazybing.github.io/blog/2018/08/22/memory-alignment</id>
    <content type="html"><![CDATA[<p>数据对齐会影响到计算机访问内存以及占用内存的空间大小。</p>

<!--more-->

<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">对齐要求</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">填充</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">结构体的对齐和填充</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">结构体成员重排</a></li>
  <li><a href="#section-4" id="markdown-toc-section-4">可读性与缓存局部性</a></li>
  <li><a href="#section-5" id="markdown-toc-section-5">代码测试示例</a></li>
  <li><a href="#section-6" id="markdown-toc-section-6">参考文档</a></li>
</ul>

<h3 id="section">对齐要求</h3>

<p>在<code>X86</code>或<code>ARM</code>处理器中，基本 C 数据类型通常并不存储于内存中的随机字节地址。实际情况是，除<code>char</code>外，
所有其他类型都有对齐要求：<code>char</code>可起始于任意字节地址，2 字节的 short 必须从偶数字节地址开始，4 字节<code>int</code>或<code>float</code>必须
从能被 4 整除的地址开始，8 比特的<code>long</code>和<code>double</code>必须从能被 4 整除的地址开始，8 比特的<code>long</code>和<code>double</code>必须从
能被 8 整除的地址开始。无论<code>signed(有符号)</code>还是<code>unsigned(无符号)</code>都不受影响。</p>

<p>简言之，<code>X86</code>和<code>ARM</code>的基本 C 类型是<code>自对齐(self-aligned)</code>的。关于指针，无论 32 位还是 64 位也都是自对齐的。</p>

<p>自对齐可令访问速度更快，因为它有利于生成单指令(single-instruction)存取这些类型的数据。另一方面，如若没有对齐约束，可能
最终不得不通过两个或更多指令访问跨越机器字边界的数据。字符数据是种特殊情况，因其始终处在单一机器字中，所以无论存取何处的字符数据，
开销都是一致的。这也就是它不需要对齐的原因。</p>

<h3 id="section-1">填充</h3>

<p>假设我们有如下一段 C 代码：</p>

<p><code>
int function(void)
{
    char *pchar;
    char ch;
    int idx;
    ...
}
</code></p>

<p>这里的占用字节空间如下：</p>

<p><code>
char *pchar;    //4 or 8 bytes
char ch;        //1 byte
char pad[3];    //3 bytes, 3 个字节的空间被浪费掉了
int idx;        //4 bytes
...
</code></p>

<p>如果 <code>x </code>为 2 字节 short：</p>

<p><code>
char *p;
char c;
short x;
</code></p>

<p>时间分布为:</p>

<p><code>
char *p;    //4 or 8 bytes
char c;     //1 byte
char pad[1];    //1 byte, 1 字节的空间被浪费掉了
short x;        //2 bytes
</code></p>

<p>更多示例，请参照最后给出的程序示例。</p>

<h3 id="section-2">结构体的对齐和填充</h3>

<p>通常情况下，结构体实例以其最宽的标量成员为基准进行对齐。编译器之所以如此，是因为此乃确保所有成员自对齐，实现快速访问最简便的方法。</p>

<p>思考如下的结构体：</p>

<p><code>
struct foo1{
    char *p;
    char c;
    long x;
};
</code></p>

<p>64 位系统中，任何<code>struct foo1</code>的实例都采用 8 字节对齐，其内存分布如下：</p>

<p><code>
struct foo1{
    char *p;    //8 bytes
    char c;     //1 byte
    char pad[7];    // 7 bytes
    long x;         // 8 bytes
};
</code>
更多示例，请参照最后给出的程序示例。</p>

<h3 id="section-3">结构体成员重排</h3>

<p>理解了结构体成员的对齐后，可以看到，最简单的节省内存的方式，是按对齐递减重新对结构体成员排序。即让所有指针对齐成员排在最前面，因为
在 64 为系统中它们占用 8 字节；然后是 4 字节的 int；再然后是 2 字节的 short，最后是字符。</p>

<p>以简单的链表结构为例：</p>

<p><code>
struct foo7{
    char c;
    struct foo7 *p;
    short x;
};
</code>
<code>sizeof(foo7)</code>占用 24 字节。如果按照长度重排，可以得到:</p>

<p><code>
struct foo8{
    struct foo8 *p;
    short x;
    char c;
};
</code></p>

<p>重新打包后，空间降低为 16 字节。</p>

<h3 id="section-4">可读性与缓存局部性</h3>

<p>笨拙地、机械地重排结构体可能有损可读性。最好重排成员：将语义相关的数据放在一起，形成连贯的组。最理想的情况是，结构体的设计应与程序的设计相通。</p>

<h3 id="section-5">代码测试示例</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdbool.h&gt;&lt;/stdbool.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo1</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo2</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>      <span class="cm">/* 1 byte &lt;em&gt;/</span>
</span><span class='line'><span class="cm">    char pad[7]; /&lt;/em&gt; 7 bytes &lt;em&gt;/</span>
</span><span class='line'><span class="cm">    char *p;     /&lt;/em&gt; 8 bytes &lt;em&gt;/</span>
</span><span class='line'><span class="cm">    long x;      /&lt;/em&gt; 8 bytes */</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo3</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p</span><span class="p">;</span>     <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="mi">8</span> <span class="n">bytes</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>      <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="mi">1</span> <span class="n">byte</span> <span class="err">*/</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo4</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">short</span> <span class="n">s</span><span class="p">;</span>     <span class="cm">/* 2 bytes &lt;em&gt;/</span>
</span><span class='line'><span class="cm">    char c;      /&lt;/em&gt; 1 byte */</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo5</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">foo5_inner</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">short</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">inner</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo6</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">short</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">flip</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">nybble</span><span class="p">:</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">septet</span><span class="p">:</span><span class="mi">7</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo7</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">bigfield</span><span class="p">:</span><span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">littlefield</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo8</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">bigfield1</span><span class="p">:</span><span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">littlefield1</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">bigfield2</span><span class="p">:</span><span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">littlefield2</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo9</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">bigfield1</span><span class="p">:</span><span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">bigfield2</span><span class="p">:</span><span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">littlefield1</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nl">littlefield2</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo10</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">foo10</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">short</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo11</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">foo11</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">short</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">foo12</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">foo12_inner</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">short</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">inner</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span>        <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">)</span>          <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span>           <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">short</span><span class="p">)</span>         <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">short</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span>          <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span>         <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span>        <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo1</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo1</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo2</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo2</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo3</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo3</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo4</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo4</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo5</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo5</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo6</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo6</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo7</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo7</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo8</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo8</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo9</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo9</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo10</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo10</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo11</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo11</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo12</span><span class="p">)</span>   <span class="o">=</span> <span class="o">%</span><span class="n">zu</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">foo12</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="section-6">参考文档</h3>

<ol>
  <li><a href="https://github.com/ludx/The-Lost-Art-of-C-Structure-Packing">The Lost Art Of C Structure Packing</a></li>
  <li><a href="https://wr.informatik.uni-hamburg.de/_media/teaching/wintersemester_2013_2014/epc-14-haase-svenhendrik-alignmentinc-paper.pdf">Memory Alignment</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Data_structure_alignment">Data Structure Alignment</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[音频概念介绍(采样频率、帧率、通道数等)]]></title>
    <link href="http://lazybing.github.io/blog/2018/03/25/audio-basic-concept/"/>
    <updated>2018-03-25T07:54:32-08:00</updated>
    <id>http://lazybing.github.io/blog/2018/03/25/audio-basic-concept</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">音频基础概述</a></li>
  <li><a href="#pcm-" id="markdown-toc-pcm-">PCM 数据摆放格式</a></li>
</ul>

<p>最近在给现代汽车做一个从 FFMpeg 中提取各个音频解码器的项目，很多都是音频。因为之前做的大多数都是视频项目，音频知识比较匮乏。限制记录一下。
<!--more--></p>

<h2 id="section">音频基础概述</h2>

<p>首先我们用 MediaInfo 来看下音频流的一些信息如图所示：</p>

<p><img src="/images/audio_basic_concept/audio_basic_format.png"></p>

<p>逐个分析：</p>

<p><code>
Format:AC-3
Format/Info:Audio Coding 3
Duration:33s 984ms
Bit rate:448 Kbps
Channel(s):6 channels
Channel positions: Front:L C R, Side:L R LFE
Sampling rate:48.0KHz
Bit depth:16bits
Frame rate:31.250 fps 
</code></p>

<p>采样率(sampling rate)：声音信号在”模数”转换过程中单位时间内采样的次数。采样率是指每一次采样周期内声音模拟信号的数值，一般的采样率包括：8kHz/11.025kHz/22.05kHz/16kHz/37.8kHz/44.1kHz/48kHz。</p>

<p>帧率(Frame rate):每秒钟中帧数，单位是fps，如上面的 31.250 fps。</p>

<p>通道数(channels):声音的通道数，常用的有单声道和立体声之分。上面的声道数是 6 通道。</p>

<p>比特率(bit rate):每秒的传输速率(比特率)。</p>

<p>bitspersample:每个 sample 占用的 bits 数。</p>

<h2 id="pcm-">PCM 数据摆放格式</h2>

<p>在做项目的过程中，经常用到的一点是在输出 PCM 数据时，经常要了解 PCM 的摆放格式。根据不同的 bps 和 channels，数据的摆放时不同的。</p>

<p><img src="/images/audio_basic_concept/pcm_channels_bps.png"></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ELF格式分析手册]]></title>
    <link href="http://lazybing.github.io/blog/2018/03/21/elf-format-tutorial/"/>
    <updated>2018-03-21T07:30:48-07:00</updated>
    <id>http://lazybing.github.io/blog/2018/03/21/elf-format-tutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#elf-data-type" id="markdown-toc-elf-data-type">ELF Data Type</a></li>
  <li><a href="#the-elf-header" id="markdown-toc-the-elf-header">The ELF Header</a></li>
  <li><a href="#define-elfmag0----0x7f---eidenteimag0" id="markdown-toc-define-elfmag0----0x7f---eidenteimag0">define ELFMAG0    0x7F   //e_ident[EI_MAG0]</a></li>
  <li><a href="#define-elfdata2lsb-1---little-endian" id="markdown-toc-define-elfdata2lsb-1---little-endian">define ELFDATA2LSB (1)   //Little Endian</a></li>
  <li><a href="#checking-the-elf-header" id="markdown-toc-checking-the-elf-header">Checking the ELF Header</a></li>
  <li><a href="#loading-the-elf-file" id="markdown-toc-loading-the-elf-file">Loading the ELF File</a></li>
</ul>

<p>本文主要记录目标文件是<code>i386(32位架构、小端序)ELF</code>文件的加载过程。本文中的所有代码都是 C 风格，所有代码段都会使用最简单的例子。后面可能会扩展到其他类型的 ELF 文件。
<!--more--></p>

<h1 id="elf-data-type">ELF Data Type</h1>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdint.h&gt;</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">uint16_t</span> <span class="n">Elf32_Half</span><span class="p">;</span>    <span class="c1">//Unsigned half int</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">uint32_t</span> <span class="n">Elf32_Off</span><span class="p">;</span>     <span class="c1">//Unsigned offset</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">uint32_t</span> <span class="n">Elf32_Addr</span><span class="p">;</span>    <span class="c1">//Unsigned address</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">uint32_t</span> <span class="n">Elf32_Word</span><span class="p">;</span>    <span class="c1">//Unsigned int</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int32_t</span>  <span class="n">Elf32_Sword</span><span class="p">;</span>   <span class="c1">//Signed int</span>
</span></code></pre></td></tr></table></div></figure></stdint.h></p>

<h1 id="the-elf-header">The ELF Header</h1>

<p>每个 ELF 格式文件都有位于文件开始的头部<code>Header</code>。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define ELF_NIDENT 16</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">uint8_t</span>     <span class="n">e_ident</span><span class="p">[</span><span class="n">ELF_NIDENT</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_type</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_machine</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Word</span>  <span class="n">e_version</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Addr</span>  <span class="n">e_entry</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Off</span>   <span class="n">e_phoff</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Off</span>   <span class="n">e_shoff</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Word</span>  <span class="n">e_flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_ehsize</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_phoff</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_shoff</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Word</span>  <span class="n">e_flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_ehsize</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_phentsize</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_phnum</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_shentsize</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_shnum</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Elf32_Half</span>  <span class="n">e_shstrndx</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">ELF32_Ehdr</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">enum</span> <span class="n">Elf_Ident</span><span class="p">{</span>
</span><span class='line'>    <span class="n">EI_MAG0</span>    <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">//0x7F</span>
</span><span class='line'>    <span class="n">EI_MAG1</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//‘E’</span>
</span><span class='line'>    <span class="n">EI_MAG2</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="c1">//‘L’</span>
</span><span class='line'>    <span class="n">EI_MAG3</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="c1">//‘F’</span>
</span><span class='line'>    <span class="n">EI_CLASS</span>   <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="c1">//Architecture(32/64)</span>
</span><span class='line'>    <span class="n">EI_DATA</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">,</span><span class="c1">//Byte Order</span>
</span><span class='line'>    <span class="n">EI_VERSION</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="c1">//ELF Version</span>
</span><span class='line'>    <span class="n">EI_OSABI</span>   <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="c1">//OS Specific</span>
</span><span class='line'>    <span class="n">EI_ABIVERSION</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="c1">//OS Specific</span>
</span><span class='line'>    <span class="n">EI_PAD</span>        <span class="o">=</span> <span class="mi">9</span>  <span class="c1">//Padding</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;define-elfmag0----0x7f---eidenteimag0&quot;</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">ELFMAG0</span>    <span class="mh">0x7F</span>   <span class="c1">//e_ident[EI_MAG0]&lt;/h1&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span><span class="n">define</span> <span class="n">ELFMAG1</span>    <span class="err">‘</span><span class="n">E</span><span class="err">’</span>    <span class="c1">//e_ident[EI_MAG1]</span>
</span><span class='line'><span class="cp">#define ELFMAG2    ‘L’    </span><span class="c1">//e_ident[EI_MAG2]</span>
</span><span class='line'><span class="cp">#define ELFMAG3    ‘F’    </span><span class="c1">//e_ident[EI_MAG3]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;define-elfdata2lsb-1---little-endian&quot;</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">ELFDATA2LSB</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="c1">//Little Endian&lt;/h1&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span><span class="n">define</span> <span class="n">ELFCLASS32</span>  <span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="c1">//32-bit Architecture</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">enum</span> <span class="n">Elf_Type</span><span class="p">{</span>
</span><span class='line'>    <span class="n">ET_NONE</span>    <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">//Unknown Type</span>
</span><span class='line'>    <span class="n">ET_REL</span>     <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//Relocatable File</span>
</span><span class='line'>    <span class="n">ET_EXEC</span>    <span class="o">=</span> <span class="mi">2</span>  <span class="c1">//Executable File</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">#define EM_386     (3) </span><span class="c1">//x86 Machine Type</span>
</span><span class='line'><span class="cp">#define EV_CURRENT (1) </span><span class="c1">//ELF Current Version</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1 id="checking-the-elf-header">Checking the ELF Header</h1>

<p>在对<code>ELF</code>文件进行加载、链接、重定向或其他操作之前，首先要确保机器是否支持上述的操作。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">bool</span> <span class="nf">elf_check_file</span><span class="p">(</span><span class="n">Elf32_Ehdr</span> <span class="o">*</span><span class="n">hdr</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">hdr</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e_ident</span><span class="p">[</span><span class="n">EI_MAG0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ELFMAG0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">ERROR</span><span class="p">(</span><span class="err">“</span><span class="n">ELF</span> <span class="n">Header</span> <span class="n">EI_MAG0</span> <span class="n">incorrect</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e_ident</span><span class="p">[</span><span class="n">EI_MAG1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ELFMAG1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">ERROR</span><span class="p">(</span><span class="err">“</span><span class="n">ELF</span> <span class="n">Header</span> <span class="n">EI_MAG1</span> <span class="n">incorrect</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e_ident</span><span class="p">[</span><span class="n">EI_MAG2</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ELFMAG2</span><span class="p">){</span>
</span><span class='line'>        <span class="n">ERROR</span><span class="p">(</span><span class="err">“</span><span class="n">ELF</span> <span class="n">Header</span> <span class="n">EI_MAG2</span> <span class="n">incorrect</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e_ident</span><span class="p">[</span><span class="n">EI_MAG3</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ELFMAG3</span><span class="p">){</span>
</span><span class='line'>        <span class="n">ERROR</span><span class="p">(</span><span class="err">“</span><span class="n">ELF</span> <span class="n">Header</span> <span class="n">EI_MAG2</span> <span class="n">incorrect</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">bool</span> <span class="nf">elf_check_supported</span><span class="p">(</span><span class="n">ELF32_Ehdr</span> <span class="o">*</span><span class="n">hdr</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">elf_check_file</span><span class="p">(</span><span class="n">hdr</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">ERROR</span><span class="p">(</span><span class="err">“</span><span class="n">Invalid</span> <span class="n">ELF</span> <span class="n">File</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e_ident</span><span class="p">[</span><span class="n">EI_CLASS</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ELFCLASS32</span><span class="p">){</span>
</span><span class='line'>        <span class="n">ERROR</span><span class="p">(</span><span class="err">“</span><span class="n">Unsupported</span> <span class="n">ELF</span> <span class="n">File</span> <span class="n">Class</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e_ident</span><span class="p">[</span><span class="n">EI_DATA</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ELFDATA2LSB</span><span class="p">){</span>
</span><span class='line'>        <span class="n">ERROR</span><span class="p">(</span><span class="err">“</span><span class="n">Unsupported</span> <span class="n">ELF</span> <span class="n">File</span> <span class="n">byte</span> <span class="n">order</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e_machine</span> <span class="o">!=</span> <span class="n">EM_386</span><span class="p">){</span>
</span><span class='line'>        <span class="n">ERROR</span><span class="p">(</span><span class="err">“</span><span class="n">Unsupported</span> <span class="n">ELF</span> <span class="n">File</span> <span class="n">target</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e_ident</span><span class="p">[</span><span class="n">EI_VERSION</span><span class="p">]</span> <span class="o">!=</span> <span class="n">EV_CURRENT</span><span class="p">){</span>
</span><span class='line'>        <span class="n">ERROR</span><span class="p">(</span><span class="err">“</span><span class="n">Unsupported</span> <span class="n">ELF</span> <span class="n">File</span> <span class="n">version</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e_type</span> <span class="o">!=</span> <span class="n">ET_REL</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e_type</span> <span class="o">!=</span> <span class="n">ET_EXEC</span><span class="p">){</span>
</span><span class='line'>        <span class="n">ERROR</span><span class="p">(</span><span class="err">“</span><span class="n">Unsupported</span> <span class="n">ELF</span> <span class="n">File</span> <span class="n">type</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1 id="loading-the-elf-file">Loading the ELF File</h1>

]]></content>
  </entry>
  
</feed>
