<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[懒人李冰]]></title>
  <link href="http://lazybing.github.io/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2017-04-09T19:02:59-07:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FFMPEG 源码分析：avformat_find_stream_info]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/25/avformat_find_stream_info/"/>
    <updated>2016-12-25T06:18:07-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/25/avformat_find_stream_info</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">函数声明</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">调用关系</a></li>
</ul>

<p><code>avformat_find_stream_info</code>主要是读媒体文件的包(packets)，然后从中提取出流的信息。
对于没有头部信息的文件格式尤其有用，比如<code>MPEG</code>。文件的逻辑位置不会被改变，读取出来
的包会被缓存起来供以后处理。</p>

<!--more-->

<h2 id="section">函数声明</h2>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int avformat_find_stream_info(AVFormatContext *ic, AVDictionary **options);</span></code></pre></td></tr></table></div></figure>
<p>返回值：&gt;=0–&gt;OK,或出错返回AVERROR_xxx</p>

<p>注意，该函数并不保证能够打开所有的 codec，因此将options 设置为非NULL用于返回一些信息是非常好的行为。</p>

<h2 id="section-1">调用关系</h2>

<p><img src="http://lazybing.github.io/images/avformat_find_stream_info/avformat_find_stream_info.png" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Addr2line 的介绍与使用]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/22/addr2line-use/"/>
    <updated>2016-12-22T07:26:02-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/22/addr2line-use</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#addr2line-" id="markdown-toc-addr2line-">addr2line 简介</a></li>
  <li><a href="#addr2line--1" id="markdown-toc-addr2line--1">addr2line 的使用示例</a></li>
  <li><a href="#addr2line--2" id="markdown-toc-addr2line--2">addr2line 的原理</a></li>
</ul>

<p><code>addr2line</code>的作用是将地址转化为文件名和行号。<br />
<!--more--></p>

<h2 id="addr2line-">addr2line 简介</h2>
<p>在编写程序时，经常会遇到出现程序 crah 的情况，此时如果有 core stack 打印出来还好，但如果没有 core stack 的话，debug 就会比较困难。addr2line 可以很好地解决这个问题。</p>

<p><code>addr2line</code>能够将地址转换为文件名和行号。给定一个可执行文件的地址或者一个可重定位目标的目标偏移，addr2line 就会利用 debug 信息来计算出与该地址关联的文件名和行号。</p>

<p>使用的可执行文件或可重定位目标使用<code>-e</code>选项来指定、可重定位目标的部分使用<code>-j</code>选项来指定。</p>

<p><code>addr2line</code>有两种操作模式：<br />
1. 在命令行下，直接指定十六进制的地址，addr2line 为每个地址显示文件名和行号。<br />
2. addr2line 从标准输入中读取十六进制地址，并且为每个地址输出文件名和行号到标准输出中。</p>

<p>输出格式为<code>FILENAME:LINENO</code>，默认情况下，每个输入地址对应一行输出。</p>

<h2 id="addr2line--1">addr2line 的使用示例</h2>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">div</span><span class="p">(</span><span class="kt">int</span> <span class="n">numerator</span><span class="p">,</span> <span class="kt">int</span> <span class="n">denominator</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">numerator</span> <span class="o">/</span> <span class="n">denominator</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">numerator</span>   <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">denominator</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">div</span><span class="p">(</span><span class="n">numerator</span><span class="p">,</span> <span class="n">denominator</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>编译：gcc -o div -g div.c
生成可执行文件<code>div</code>后，执行该文件：./div 得到如下error:</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Floating point exception (core dumped)</span></code></pre></td></tr></table></div></figure>

<p>此时并没有任何其他提示信息，我们可以通过<code>dmesg</code>查看信息：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[ 4709.210137] traps: div[2500] trap divide error ip:400524 sp:7ffcd27fd630 error:0 in div[400000+1000]</span></code></pre></td></tr></table></div></figure>
<p>通过该信息可以看出，ip 指向的地址为<code>400524</code>，得到该地址后，我们就可以使用 addr2line 来定位出错的位置。 
<code>addr2line -e div 400524</code> 得到结果如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/home/bing/work/study/div.c:5</span></code></pre></td></tr></table></div></figure>

<p>可以很直观的显示，该 core  dump 信息是在<code>div.c</code>的 line 5。</p>

<h2 id="addr2line--2">addr2line 的原理</h2>
<p><code>addr2line</code>之所以能够利用可执行文件将地址信息转换为行号，是因为在可执行 ELF 文件中存有这些对应的信息。可以使用<code>readelf</code>来查看这些信息。例如上面的<code>div</code>文件，通过readelf div 可以看到如下信息：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> Line Number Statements:
</span><span class="line">  [0x00000026]  Extended opcode 2: set Address to 0x400516
</span><span class="line">  [0x00000031]  Special opcode 8: advance Address by 0 to 0x400516 and Line by 3 to 4
</span><span class="line">  [0x00000032]  Special opcode 146: advance Address by 10 to 0x400520 and Line by 1 to 5
</span><span class="line">  [0x00000033]  Special opcode 104: advance Address by 7 to 0x400527 and Line by 1 to 6
</span><span class="line">  [0x00000034]  Special opcode 36: advance Address by 2 to 0x400529 and Line by 3 to 9
</span><span class="line">  [0x00000035]  Special opcode 216: advance Address by 15 to 0x400538 and Line by 1 to 10
</span><span class="line">  [0x00000036]  Special opcode 104: advance Address by 7 to 0x40053f and Line by 1 to 11
</span><span class="line">  [0x00000037]  Special opcode 105: advance Address by 7 to 0x400546 and Line by 2 to 13
</span><span class="line">  [0x00000038]  Special opcode 216: advance Address by 15 to 0x400555 and Line by 1 to 14
</span><span class="line">  [0x00000039]  Advance PC by 2 to 0x400557
</span><span class="line">  [0x0000003b]  Extended opcode 1: End of Sequence</span></code></pre></td></tr></table></div></figure>
<p>从上面可以看出到 addr 在 0x400520-0x400527之间时，行号为5.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFMPEG 源码分析：avcodec_decode_video2]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/20/avcodec_decode_video/"/>
    <updated>2016-12-20T06:18:07-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/20/avcodec_decode_video</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">函数声明</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">源码分析</a></li>
</ul>

<p><code>avcodec_decode_video</code>函数的作用是解码<code>AVPacket</code>中的压缩数据，解码为图像数据。
某些解码器支持在一个<code>AVPacket</code>中包含多帧，这类的解码器只解码第一帧。</p>

<!--more-->

<h2 id="section">函数声明</h2>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int avcodec_decode_video2(AVCodecContext *avctx, AVFrame *picture,
</span><span class="line">                         int *got_picture_ptr,
</span><span class="line">                         const AVPacket *avpkt);</span></code></pre></td></tr></table></div></figure>

<p>注意，输入内存的对齐字节(AV_INPUT_BUFFER_PADDING_SIZE)比实际读取字节要大，因为某些
最优流可能会读取 32 或 64 bits 每次。</p>

<p>在将压缩数据packets给到解码器之前，<code>AVCodecContext</code>必须用<code>avcodec_open2</code>设置过。</p>

<p>函数参数：</p>

<ul>
  <li><code>AVCodecContext *</code>。</li>
  <li><code>AVFrame *</code>存放解码的视频数据，它使用<code>av_frame_alloc</code>获得一个<code>AVFrame</code>。解码器会调用
<code>AVCodecContext.get_buffer2</code>回调函数为实际的位图分配内存。</li>
  <li><code>got_picture_ptr</code>,如果没有帧可以解码，该值被设为0。否则，它是非零值。</li>
  <li><code>AVPacket *</code>包含输入缓存。该结构体使用<code>av_init_packet</code>创建后会设置<code>data</code>和<code>size</code>，某些
解码器可能需要更多的字段,如<code>flags &amp; AV_PKT_FLAG_KEY</code>。解码器被设置为使用最少的字段。</li>
</ul>

<p>返回值：如果解码出错，返回负值；否则返回使用的字节数。</p>

<h2 id="section-1">源码分析</h2>

<p><code>avcodec_decode_video2</code>函数比较简单，主要做了以下几个工作：</p>

<ol>
  <li>对输入的字段进行一些列的检查工作，比如宽高是否正确，输入是否为视频等等。</li>
  <li>真正的解码，通过<code>avctx-&gt;codec-&gt;decode</code>实现，它会调用相应的<code>AVCodec</code>的 decode 函数，完成解码。</li>
  <li>对得到的<code>AVFrame</code>进行一些字段进行赋值，例如宽高、像素格式等等。</li>
</ol>

<figure class="code"><figcaption><span>avcodec_decode_video2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="n">attribute_align_arg</span> <span class="nf">avcodec_decode_video2</span><span class="p">(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AVFrame</span> <span class="o">*</span><span class="n">picture</span><span class="p">,</span>
</span><span class="line">                                              <span class="kt">int</span> <span class="o">*</span><span class="n">got_picture_ptr</span><span class="p">,</span>
</span><span class="line">                                              <span class="k">const</span> <span class="n">AVPacket</span> <span class="o">*</span><span class="n">avpkt</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="c1">//检测输入参数</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">codec</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">AVERROR</span><span class="p">(</span><span class="n">EINVAL</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">codec</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">AVMEDIA_TYPE_VIDEO</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">av_log</span><span class="p">(</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AV_LOG_ERROR</span><span class="p">,</span> <span class="s">&quot;Invalid media type for video</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="n">AVERROR</span><span class="p">(</span><span class="n">EINVAL</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">*</span><span class="n">got_picture_ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="p">((</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">coded_width</span> <span class="o">||</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">coded_height</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">av_image_check_size</span><span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">coded_width</span><span class="p">,</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">coded_height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">avctx</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">AVERROR</span><span class="p">(</span><span class="n">EINVAL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="c1">//真正的解码</span>
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">codec</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="n">avctx</span><span class="p">,</span> <span class="n">picture</span><span class="p">,</span> <span class="n">got_picture_ptr</span><span class="p">,</span>
</span><span class="line">            <span class="o">&amp;</span><span class="n">tmp</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="c1">//设置参数</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">codec</span><span class="o">-&gt;</span><span class="n">capabilities</span> <span class="o">&amp;</span> <span class="n">AV_CODEC_CAP_DR1</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">picture</span><span class="o">-&gt;</span><span class="n">sample_aspect_ratio</span><span class="p">.</span><span class="n">num</span><span class="p">)</span>    <span class="n">picture</span><span class="o">-&gt;</span><span class="n">sample_aspect_ratio</span> <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">sample_aspect_ratio</span><span class="p">;</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">picture</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">)</span>                      <span class="n">picture</span><span class="o">-&gt;</span><span class="n">width</span>               <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">;</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">picture</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span>                     <span class="n">picture</span><span class="o">-&gt;</span><span class="n">height</span>              <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">;</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">picture</span><span class="o">-&gt;</span><span class="n">format</span> <span class="o">==</span> <span class="n">AV_PIX_FMT_NONE</span><span class="p">)</span>   <span class="n">picture</span><span class="o">-&gt;</span><span class="n">format</span>              <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">pix_fmt</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>以H.265解码器为例，解码示例如下：</p>

<figure class="code"><figcaption><span>ff_hevc_decoder </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVCodec</span> <span class="n">ff_hevc_decoder</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">name</span>                  <span class="o">=</span> <span class="s">&quot;hevc&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">long_name</span>             <span class="o">=</span> <span class="n">NULL_IF_CONFIG_SMALL</span><span class="p">(</span><span class="s">&quot;HEVC (High Efficiency Video Coding)&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">type</span>                  <span class="o">=</span> <span class="n">AVMEDIA_TYPE_VIDEO</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">id</span>                    <span class="o">=</span> <span class="n">AV_CODEC_ID_HEVC</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_data_size</span>        <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HEVCContext</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_class</span>            <span class="o">=</span> <span class="o">&amp;</span><span class="n">hevc_decoder_class</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">init</span>                  <span class="o">=</span> <span class="n">hevc_decode_init</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">close</span>                 <span class="o">=</span> <span class="n">hevc_decode_free</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">decode</span>                <span class="o">=</span> <span class="n">hevc_decode_frame</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">flush</span>                 <span class="o">=</span> <span class="n">hevc_decode_flush</span><span class="p">,</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中<code>hevc_decode_frame</code>是解码器的真正的解码函数，定义如下：</p>
<figure class="code"><figcaption><span>hevc_decode_frame </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">hevc_decode_frame</span><span class="p">(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">avctx</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">got_output</span><span class="p">,</span>
</span><span class="line">                             <span class="n">AVPacket</span> <span class="o">*</span><span class="n">avpkt</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">    <span class="n">HEVCContext</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">priv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">avpkt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">ret</span> <span class="o">=</span> <span class="n">ff_hevc_output_frame</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="o">*</span><span class="n">got_output</span> <span class="o">=</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">s</span><span class="o">-&gt;</span><span class="n">ref</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="n">ret</span>    <span class="o">=</span> <span class="n">decode_nal_units</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">avpkt</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">avpkt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">hwaccel</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">ref</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ret</span> <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">hwaccel</span><span class="o">-&gt;</span><span class="n">end_frame</span><span class="p">(</span><span class="n">avctx</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">av_log</span><span class="p">(</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AV_LOG_ERROR</span><span class="p">,</span>
</span><span class="line">                   <span class="s">&quot;hardware accelerator failed to decode picture</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">            <span class="n">ff_hevc_unref_frame</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">ref</span><span class="p">,</span> <span class="o">~</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="cm">/* verify the SEI checksum */</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">err_recognition</span> <span class="o">&amp;</span> <span class="n">AV_EF_CRCCHECK</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">is_decoded</span> <span class="o">&amp;&amp;</span>
</span><span class="line">            <span class="n">s</span><span class="o">-&gt;</span><span class="n">is_md5</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">ret</span> <span class="o">=</span> <span class="n">verify_md5</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">ref</span><span class="o">-&gt;</span><span class="n">frame</span><span class="p">);</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">err_recognition</span> <span class="o">&amp;</span> <span class="n">AV_EF_EXPLODE</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="n">ff_hevc_unref_frame</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">ref</span><span class="p">,</span> <span class="o">~</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">                <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">s</span><span class="o">-&gt;</span><span class="n">is_md5</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">is_decoded</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">av_log</span><span class="p">(</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AV_LOG_DEBUG</span><span class="p">,</span> <span class="s">&quot;Decoded frame with POC %d.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">poc</span><span class="p">);</span>
</span><span class="line">        <span class="n">s</span><span class="o">-&gt;</span><span class="n">is_decoded</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">output_frame</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="n">av_frame_move_ref</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">output_frame</span><span class="p">);</span>
</span><span class="line">        <span class="o">*</span><span class="n">got_output</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">avpkt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFMPEG 源码分析：av_read_frame]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/15/av_read_frame/"/>
    <updated>2016-12-15T06:18:07-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/15/av_read_frame</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">函数声明</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">函数调用关系</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">源码分析</a></li>
</ul>

<p><code>av_read_frame</code>函数的作用是返回文件中保存的数据。它会文件中保存的数据分成不同的帧，
每次调用都会返回一帧。注意，该函数不会忽略帧与帧之间无效数据(非帧数据)，目的是给解码器
最多的信息用于解码。</p>

<!--more-->

<h2 id="section">函数声明</h2>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int av_read_frame(AVFormatContext *s, AVPacket *pkt);</span></code></pre></td></tr></table></div></figure>

<p>如果<code>pkt-&gt;buf</code>是 NULL,包直到下一次调用<code>av_read_frame</code>或<code>avformat_close_input</code>时都是有效的。
不需要时，包必须通过<code>av_free_packet</code>释放。对于视频，<code>packet</code>只包含一帧；对于音频，如果每帧有固定大小(如 PCM 或 ADPCM 数据)，
<code>packet</code>可以包含多个音频帧（必须是整数帧）,如果音频帧大小可变(如MPEG 音频)，它只能包含一帧数据。</p>

<p><code>pkt-&gt;pts</code><code>pkt-&gt;dts</code><code>pkt-&gt;duration</code>都是以<code>AVStream.time_base_units</code>为单位的。
如果视频格式里包含 B 帧，<code>pkt-&gt;pts</code>可以是<code>AV_NOPTS_VALUE</code>,因此如果不解压缩数据，最好
查看<code>pkt-&gt;dts</code>。</p>

<p>如果函数返回0，正确；小于0，则为到文件尾或出错。</p>

<h2 id="section-1">函数调用关系</h2>

<p><img src="http://lazybing.github.io/images/av_read_frame/av_read_frame.png" /></p>

<h2 id="section-2">源码分析</h2>

<p><code>av_read_frame</code>函数会判断在未解码缓存中是否有数据，如果有数据则调用<code>read_from_packet_buffer</code>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFMPEG 源码分析：avcodec_open2]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/10/avcodec-open2/"/>
    <updated>2016-12-10T06:18:07-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/10/avcodec-open2</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">函数声明</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">函数使用示例</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">函数源码分析</a></li>
</ul>

<p><code>avcodec_open2</code>函数实现的功能为利用给定的<code>AVCodec</code>结构初始化<code>AVCodecContext</code>结构。</p>

<!--more-->

<h2 id="section">函数声明</h2>

<p><code>avcodec_open2</code>的声明如下:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int avcodec_open2(AVCodecContext *avctx, const AVCodec *codec, AVDictionary **options);</span></code></pre></td></tr></table></div></figure>

<p>函数参数说明：</p>

<ul>
  <li>avctx:需要初始化的context.</li>
  <li>codec:</li>
  <li>options:</li>
  <li>返回值：如果返回0，正确。失败则返回负数。</li>
</ul>

<p>该函数利用给定的<code>AVCodec</code>结构初始化<code>AVCodecContext</code>结构，在使用该函数之前，<code>AVCodecContext</code>
必须已经用<code>avcodec_alloc_context3()</code>函数分配出来。</p>

<p><code>AVCodec</code>结构在使用该函数之前，由<code>avcodec_find_decoder_by_name</code><code>avcodec_find_encoder_by_name</code>
<code>avcodec_find_decoder</code>或<code>avcodec_find_encoder</code>提前得到。</p>

<p>注意，在正式解码之前(比如使用<code>avcodec_decode_video2()</code>之前)，必须调用<code>avcodec_open2</code>函数。</p>

<h2 id="section-1">函数使用示例</h2>

<p>示例代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">avcodec_register_all</span><span class="p">();</span>
</span><span class="line"><span class="n">av_dict_set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">opt</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;2.5M&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">codec</span> <span class="o">=</span> <span class="n">avcodec_find_decoder</span><span class="p">(</span><span class="n">AV_CODEC_ID_H264</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">codec</span><span class="p">)</span>
</span><span class="line">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">context</span> <span class="o">=</span> <span class="n">avcodec_alloc_context3</span><span class="p">(</span><span class="n">codec</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">avcodec_open2</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">codec</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="section-2">函数源码分析</h2>

<p><code>avcodec_open2</code>的逻辑非常简单，首先是进行一些参数检测、之后调动<code>AVCodec</code>的init函数。大概步骤如下：</p>

<ul>
  <li>各种函数参数检测。</li>
  <li>各种结构体分配内存。</li>
  <li>将输入的<code>AVDictionary</code>形式的选项设置到<code>AVCodecContext</code>。</li>
  <li>其他一些零散的查，检查输入参数是否符合编码器的要求。</li>
  <li>调用<code>AVCodec</code>的init函数初始化具体的解码器。</li>
</ul>

<p>此处重点分析调用<code>AVCodec</code>的init函数处。 以 HEVC 解码器为例。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVCodec</span> <span class="n">ff_hevc_decoder</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">name</span>                  <span class="o">=</span> <span class="s">&quot;hevc&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">long_name</span>             <span class="o">=</span> <span class="n">NULL_IF_CONFIG_SMALL</span><span class="p">(</span><span class="s">&quot;HEVC (High Efficiency Video Coding)&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">type</span>                  <span class="o">=</span> <span class="n">AVMEDIA_TYPE_VIDEO</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">id</span>                    <span class="o">=</span> <span class="n">AV_CODEC_ID_HEVC</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_data_size</span>        <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HEVCContext</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_class</span>            <span class="o">=</span> <span class="o">&amp;</span><span class="n">hevc_decoder_class</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">init</span>                  <span class="o">=</span> <span class="n">hevc_decode_init</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">close</span>                 <span class="o">=</span> <span class="n">hevc_decode_free</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">decode</span>                <span class="o">=</span> <span class="n">hevc_decode_frame</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">flush</span>                 <span class="o">=</span> <span class="n">hevc_decode_flush</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">update_thread_context</span> <span class="o">=</span> <span class="n">hevc_update_thread_context</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">init_thread_copy</span>      <span class="o">=</span> <span class="n">hevc_init_thread_copy</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">capabilities</span>          <span class="o">=</span> <span class="n">AV_CODEC_CAP_DR1</span> <span class="o">|</span> <span class="n">AV_CODEC_CAP_DELAY</span> <span class="o">|</span>
</span><span class="line">                             <span class="n">AV_CODEC_CAP_SLICE_THREADS</span> <span class="o">|</span> <span class="n">AV_CODEC_CAP_FRAME_THREADS</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">profiles</span>              <span class="o">=</span> <span class="n">NULL_IF_CONFIG_SMALL</span><span class="p">(</span><span class="n">profiles</span><span class="p">),</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中 init 函数定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="n">av_cold</span> <span class="kt">int</span> <span class="nf">hevc_decode_init</span><span class="p">(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">avctx</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">HEVCContext</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">priv_data</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">ff_init_cabac_states</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">internal</span><span class="o">-&gt;</span><span class="n">allocate_progress</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="n">hevc_init_context</span><span class="p">(</span><span class="n">avctx</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">s</span><span class="o">-&gt;</span><span class="n">enable_parallel_tiles</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="n">s</span><span class="o">-&gt;</span><span class="n">picture_struct</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">active_thread_type</span> <span class="o">&amp;</span> <span class="n">FF_THREAD_SLICE</span><span class="p">)</span>
</span><span class="line">        <span class="n">s</span><span class="o">-&gt;</span><span class="n">threads_number</span> <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">thread_count</span><span class="p">;</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">        <span class="n">s</span><span class="o">-&gt;</span><span class="n">threads_number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">extradata_size</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">extradata</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">ret</span> <span class="o">=</span> <span class="n">hevc_decode_extradata</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">hevc_decode_free</span><span class="p">(</span><span class="n">avctx</span><span class="p">);</span>
</span><span class="line">            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">((</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">active_thread_type</span> <span class="o">&amp;</span> <span class="n">FF_THREAD_FRAME</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">thread_count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">            <span class="n">s</span><span class="o">-&gt;</span><span class="n">threads_type</span> <span class="o">=</span> <span class="n">FF_THREAD_FRAME</span><span class="p">;</span>
</span><span class="line">        <span class="k">else</span>
</span><span class="line">            <span class="n">s</span><span class="o">-&gt;</span><span class="n">threads_type</span> <span class="o">=</span> <span class="n">FF_THREAD_SLICE</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFMPEG源码分析：avio_open2]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/07/avio-open2/"/>
    <updated>2016-12-07T04:21:48-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/07/avio-open2</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#avioopen2-" id="markdown-toc-avioopen2-">avio_open2 声明和定义</a></li>
  <li><a href="#avioopen2--1" id="markdown-toc-avioopen2--1">avio_open2 调动关系</a></li>
  <li><a href="#avioopen2--2" id="markdown-toc-avioopen2--2">avio_open2 源码分析</a>    <ul>
      <li><a href="#ffurlopen-" id="markdown-toc-ffurlopen-">ffurl_open 函数</a>        <ul>
          <li><a href="#ffurlalloc-" id="markdown-toc-ffurlalloc-">ffurl_alloc 函数</a></li>
          <li><a href="#ffurlconnect-" id="markdown-toc-ffurlconnect-">ffurl_connect 函数</a></li>
        </ul>
      </li>
      <li><a href="#ffiofdopen-" id="markdown-toc-ffiofdopen-">ffio_fdopen 函数</a></li>
    </ul>
  </li>
</ul>

<p>avio_open2 主要实现创建并初始化一个 AVIOContext，用于访问由 url 指定文件。
<!--more--></p>

<h2 id="avioopen2-">avio_open2 声明和定义</h2>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int avio_open2(AVIOContext **s, const char *url, int flags,
</span><span class="line">               const  AVIOInterruptCB *int_cb, AVDictionary **options);</span></code></pre></td></tr></table></div></figure>

<p>各个参数的含义如下：</p>

<ul>
  <li><code>AVIOContext **s</code>:函数调用成功后，创建并初始化该<code>AVIOContext</code>结构体。</li>
  <li><code>const char *url</code>:输入输出协议的地址。</li>
  <li><code>int flags</code>:打开地址的方式(只读、只写、读写)。AVIO_FLAG_READ/AVIO_FLAG_WRITE/AVIO_FLAG_READ_WRITE.</li>
  <li><code>const AVIOInterruptCB *int_cb</code>: 调用函数。</li>
  <li><code>AVDictionary **options</code>: 一般为NULL。</li>
</ul>

<p>与<code>avio_open2</code>相似的还有<code>avio_open</code>函数，<code>avio_open</code>会调用<code>avio_open2</code>,并将 int_cb 和 options 设置为 NULL。</p>

<h2 id="avioopen2--1">avio_open2 调动关系</h2>

<p><code>avio_open2</code>的调用函数关系如下：</p>

<p><img src="http://lazybing.github.io/images/avio_open2/avio_open2.png" /></p>

<h2 id="avioopen2--2">avio_open2 源码分析</h2>

<p><code>avio_open2</code>函数的定义如下：</p>

<figure class="code"><figcaption><span>avio_open2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">avio_open2</span><span class="p">(</span><span class="n">AVIOContext</span> <span class="o">**</span><span class="n">s</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span>
</span><span class="line">               <span class="k">const</span> <span class="n">AVIOInterruptCB</span> <span class="o">*</span><span class="n">int_cb</span><span class="p">,</span> <span class="n">AVDictionary</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">URLContext</span> <span class="o">*</span><span class="n">h</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">err</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">err</span> <span class="o">=</span> <span class="n">ffurl_open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">int_cb</span><span class="p">,</span> <span class="n">options</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">err</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">err</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">er</span> <span class="o">=</span> <span class="n">ffio_fdopen</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">h</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">err</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">        <span class="n">ffurl_close</span><span class="p">(</span><span class="n">h</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="n">err</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>avio_open2</code>调用的两个函数，<code>ffurl_open</code>和<code>ffio_fdopen</code>。<code>ffurl_open</code>用于初始化<code>URLContext</code>,<code>ffio_fdopen</code>用于根据<code>URLContext</code>初始化<code>AVIOContext</code>。</p>

<h3 id="ffurlopen-">ffurl_open 函数</h3>

<p>其中的<code>ffurl_open</code>函数定义如下：</p>

<figure class="code"><figcaption><span>ffurl_open </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">ffurl_open</span><span class="p">(</span><span class="n">URLContext</span> <span class="o">**</span><span class="n">puc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span>
</span><span class="line">               <span class="k">const</span> <span class="n">AVIOInterruptCB</span> <span class="o">*</span><span class="n">int_cb</span><span class="p">,</span> <span class="n">AVDictionary</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">ffurl_alloc</span><span class="p">(</span><span class="n">puc</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">int_cb</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">options</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">*</span><span class="n">puc</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">prot</span><span class="o">-&gt;</span><span class="n">priv_data_class</span> <span class="o">&amp;&amp;</span>
</span><span class="line">       <span class="p">(</span><span class="n">ret</span> <span class="o">=</span> <span class="n">av_opt_set_dict</span><span class="p">((</span><span class="o">*</span><span class="n">puc</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">priv_data</span><span class="p">,</span> <span class="n">options</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">((</span><span class="n">ret</span> <span class="o">=</span> <span class="n">av_opt_set_dict</span><span class="p">(</span><span class="o">*</span><span class="n">puc</span><span class="p">,</span> <span class="n">options</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="n">ffurl_connect</span><span class="p">(</span><span class="o">*</span><span class="n">puc</span><span class="p">,</span> <span class="n">options</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">ret</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nl">fail</span><span class="p">:</span>
</span><span class="line">    <span class="n">ffurl_close</span><span class="p">(</span><span class="o">*</span><span class="n">puc</span><span class="p">);</span>
</span><span class="line">    <span class="o">*</span><span class="n">puc</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>ffurl_open</code>主要调用两个函数<code>ffurl_alloc</code>和<code>ffurl_connect</code>。</p>

<h4 id="ffurlalloc-">ffurl_alloc 函数</h4>

<p><code>ffurl_alloc</code>用于查找合适的<code>URLProtocol</code>,并创建一个<code>URLContext</code>;</p>

<figure class="code"><figcaption><span>ffurl_alloc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">ffurl_alloc</span><span class="p">(</span><span class="n">URLContext</span> <span class="o">**</span><span class="n">puc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="k">const</span> <span class="n">AVIOInterruptCB</span> <span class="o">*</span><span class="n">int_cb</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">URLProtocol</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="err">……</span>
</span><span class="line">    <span class="n">p</span> <span class="o">=</span> <span class="n">url_find_protocol</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">url_alloc_for_protocol</span><span class="p">(</span><span class="n">puc</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">int_cb</span><span class="p">);</span>
</span><span class="line">    <span class="err">……</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>ffurl_alloc</code>调用两个函数：<code>url_find_protocol</code>根据文件路径查找合适的<code>URLProtocol</code>,<code>url_alloc_for_protocol</code>为查找到的<code>URLProtocol</code>创建<code>URLContext</code>。</p>

<figure class="code"><figcaption><span>ffurl_connect </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">ffurl_connect</span><span class="p">(</span><span class="n">URLContext</span> <span class="o">*</span><span class="n">uc</span><span class="p">,</span> <span class="n">AVDictionary</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">err</span> <span class="o">=</span> <span class="n">uc</span><span class="o">-&gt;</span><span class="n">prot</span><span class="o">-&gt;</span><span class="n">url_open2</span> <span class="o">?</span> <span class="n">uc</span><span class="o">-&gt;</span><span class="n">prot</span><span class="o">-&gt;</span><span class="n">url_open2</span><span class="p">(</span><span class="n">uc</span><span class="p">,</span> <span class="n">uc</span><span class="o">-&gt;</span><span class="n">filename</span><span class="p">,</span> <span class="n">uc</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">        <span class="n">uc</span><span class="o">-&gt;</span><span class="n">prot</span><span class="o">-&gt;</span><span class="n">url_open</span><span class="p">(</span><span class="n">uc</span><span class="p">,</span> <span class="n">uc</span><span class="o">-&gt;</span><span class="n">filename</span><span class="p">,</span> <span class="n">uc</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="ffurlconnect-">ffurl_connect 函数</h4>

<p><code>ffurl_connect</code>用于打开获得的<code>URLProtocol</code>.如果以<code>UDP</code>为例的话，它的<code>URLProtocol</code>定义如下,打开<code>URLProtocol</code>时，会调用到<code>udp_open</code>函数。</p>

<figure class="code"><figcaption><span>ff_udp_protocol </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">URLProtocol</span> <span class="n">ff_udp_protocol</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">name</span>                <span class="o">=</span> <span class="s">&quot;udp&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">url_open</span>            <span class="o">=</span> <span class="n">udp_open</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">url_read</span>            <span class="o">=</span> <span class="n">udp_read</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">url_write</span>           <span class="o">=</span> <span class="n">udp_write</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">url_close</span>           <span class="o">=</span> <span class="n">udp_close</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">url_get_file_handle</span> <span class="o">=</span> <span class="n">udp_get_file_handle</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_data_size</span>      <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UDPContext</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_data_class</span>     <span class="o">=</span> <span class="o">&amp;</span><span class="n">udp_class</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">flags</span>               <span class="o">=</span> <span class="n">URL_PROTOCOL_FLAG_NETWORK</span><span class="p">,</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="ffiofdopen-">ffio_fdopen 函数</h3>

<p><code>ffio_fdopen</code>函数定义如下：</p>
<figure class="code"><figcaption><span>ffio_fdopen </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">ffio_fdopen</span><span class="p">(</span><span class="n">AVIOContext</span> <span class="o">**</span><span class="n">s</span><span class="p">,</span> <span class="n">URLContext</span> <span class="o">*</span><span class="n">h</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">buffer</span><span class="p">;</span>
</span><span class="line">    <span class="err">……</span>
</span><span class="line">    <span class="n">buffer</span> <span class="o">=</span> <span class="n">av_malloc</span><span class="p">(</span><span class="n">buffer_size</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">avio_alloc_context</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">buffer_size</span><span class="p">,</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">AVIO_FLAG_WRITE</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span>
</span><span class="line">                            <span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">))</span><span class="n">ffurl_read</span><span class="p">,</span>
</span><span class="line">                            <span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">))</span><span class="n">ffurl_write</span><span class="p">,</span>
</span><span class="line">                            <span class="p">(</span><span class="kt">int64_t</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">uint64_t</span><span class="p">,</span> <span class="kt">int</span><span class="p">))</span><span class="n">ffurl_ffurl_seek</span><span class="p">).</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>ffio_fdopen</code>会调用<code>avio_alloc_context</code>初始化一个<code>AVIOContext</code>, <code>avio_alloc_context</code>函数成功执行后会返回一个创建好的<code>AVIOContext</code>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFMPEG 源码分析：avcodec_find_decoder和avcodec_find_encoder]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/06/av-find-encdec/"/>
    <updated>2016-12-06T06:18:07-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/06/av-find-encdec</id>
    <content type="html"><![CDATA[<p><code>avcodec_find_decoder</code>和<code>avcodec_find_encoder</code> 主要是查找 FFmpeg 的解码器和编码器。<br />
<!--more--></p>

<p>avcodec_find_decoder 和 avcodec_find_encoder 主要是利用 AVCodecID 来查找编解码器。<br />
其实质是遍历AVCodec 链表并且获得符合AVCodecID的元素。</p>

<p>avcodec_find_decoder 定义如下：</p>

<figure class="code"><figcaption><span>avcodec_find_decoder </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVCodec</span> <span class="o">*</span><span class="nf">avcodec_find_decoder</span><span class="p">(</span><span class="k">enum</span> <span class="n">AVCodecID</span> <span class="n">id</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">find_encdec</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>由定义可以看出，该函数利用 AVCodecID 查找 AVCodec，并将找到的 AVCodec 返回。
<code>find_encdec</code>定义如下：</p>

<figure class="code"><figcaption><span>find_encdec </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="n">AVCodec</span> <span class="o">*</span><span class="nf">find_encdec</span><span class="p">(</span><span class="k">enum</span> <span class="n">AVCodecID</span> <span class="n">id</span><span class="p">,</span> <span class="kt">int</span> <span class="n">encoder</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">AVCodec</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">experimental</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="n">p</span> <span class="o">=</span> <span class="n">first_avcodec</span><span class="p">;</span>
</span><span class="line">    <span class="n">id</span><span class="o">=</span> <span class="n">remap_deprecated_codec_id</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">((</span><span class="n">encoder</span> <span class="o">?</span> <span class="n">av_codec_is_encoder</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">:</span> <span class="n">av_codec_is_decoder</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="o">&amp;&amp;</span>
</span><span class="line">            <span class="n">p</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">==</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">capabilities</span> <span class="o">&amp;</span> <span class="n">AV_CODEC_CAP_EXPERIMENTAL</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">experimental</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="n">experimental</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span> <span class="k">else</span>
</span><span class="line">                <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">experimental</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中<code>av_codec_is_decoder</code>定义如下：</p>

<figure class="code"><figcaption><span>av_codec_is_decoder </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">av_codec_is_decoder</span><span class="p">(</span><span class="k">const</span> <span class="n">AVCodec</span> <span class="o">*</span><span class="n">codec</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">codec</span> <span class="o">&amp;&amp;</span> <span class="n">codec</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>av_codec_is_encoder</code>定义如下：</p>

<figure class="code"><figcaption><span>av_codec_is_decoder </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">av_codec_is_encoder</span><span class="p">(</span><span class="k">const</span> <span class="n">AVCodec</span> <span class="o">*</span><span class="n">codec</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">codec</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">codec</span><span class="o">-&gt;</span><span class="n">encode_sub</span> <span class="o">||</span> <span class="n">codec</span><span class="o">-&gt;</span><span class="n">encode2</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>查找编解码器除了上述的<code>avcodec_find_decoder</code>和<code>avcodec_find_encoder</code>外，还可以利用编解码器名字来查找函数为：avcodec_find_encoder_by_name 和 avcodec_find_decoder_by_name，在此不再赘述。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFMPEG 源码分析：avcodec_register_all]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/05/avcodec-register-all/"/>
    <updated>2016-12-05T08:42:17-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/05/avcodec-register-all</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#avcodecregisterall-" id="markdown-toc-avcodecregisterall-">avcodec_register_all 框架</a></li>
  <li><a href="#section" id="markdown-toc-section">调用关系</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">源码分析</a>    <ul>
      <li><a href="#section-2" id="markdown-toc-section-2">注册一次</a></li>
      <li><a href="#section-3" id="markdown-toc-section-3">注册硬件加速器</a></li>
      <li><a href="#codec" id="markdown-toc-codec">注册codec</a></li>
      <li><a href="#parser" id="markdown-toc-parser">注册parser</a></li>
      <li><a href="#bitstream-filters" id="markdown-toc-bitstream-filters">注册bitstream filters</a></li>
    </ul>
  </li>
</ul>

<p>avcodec_register_all 提供注册<code>codec</code><code>parsers</code><code>filters</code>的功能。</p>

<!--more-->

<h2 id="avcodecregisterall-">avcodec_register_all 框架</h2>

<figure class="code"><figcaption><span>avcodec_register_all </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">avcodec_register_all</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">static</span> <span class="kt">int</span> <span class="n">initialized</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">initialized</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span><span class="p">;</span>
</span><span class="line">    <span class="n">initialized</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* hardwar accelerators */</span>
</span><span class="line">    <span class="n">REGISTER_HWACCEL</span><span class="p">(</span><span class="n">H264_MMAL</span><span class="p">,</span><span class="n">h264_mmal</span><span class="p">);</span>
</span><span class="line">    <span class="p">......</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* video codecs */</span>
</span><span class="line">    <span class="n">REGISTER_DECODER</span><span class="p">(</span><span class="n">HEVC</span><span class="p">,</span><span class="n">hevc</span><span class="p">);</span>
</span><span class="line">    <span class="p">......</span>
</span><span class="line">    <span class="n">REGISTER_ENCDEC</span> <span class="p">(</span><span class="n">MPEG4</span><span class="p">,</span><span class="n">mpeg4</span><span class="p">);</span>
</span><span class="line">    <span class="p">......</span>
</span><span class="line">    <span class="cm">/* audio codecs */</span>
</span><span class="line">    <span class="n">REGISTER_ENCDEC</span> <span class="p">(</span><span class="n">AAC</span><span class="p">,</span><span class="n">aac</span><span class="p">);</span>
</span><span class="line">    <span class="p">......</span>
</span><span class="line">    <span class="cm">/* parsers */</span>
</span><span class="line">    <span class="n">REGISTER_PARSER</span><span class="p">(</span><span class="n">HEVC</span><span class="p">,</span><span class="n">hevc</span><span class="p">);</span>
</span><span class="line">    <span class="cm">/* bitstream filters */</span>
</span><span class="line">    <span class="n">REGISTER_BSF</span><span class="p">(</span><span class="n">HEVC_MP4TOANNEXB</span><span class="p">,</span><span class="n">hevc_mp4toannexb</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="section">调用关系</h2>

<p><img src="http://lazybing.github.io/images/avcodec_register_all/avcodec_register_all.png" /></p>

<p>从<code>avcodec_register_all</code>的框架和调用关系图可以看出，该函数主要注册硬件加速器、codec、parsers、比特流过滤器等。</p>

<h2 id="section-1">源码分析</h2>

<h3 id="section-2">注册一次</h3>

<figure class="code"><figcaption><span>initialized_once </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="n">initialized</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">initialized</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span><span class="p">;</span>
</span><span class="line"><span class="n">initialized</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>该段代码可以看出，当调用过该函数一次后，再次调用时，该函数直接返回。<br />
注意，这种方法在 FFMEPG 源码中非常常见。</p>

<h3 id="section-3">注册硬件加速器</h3>

<figure class="code"><figcaption><span>REGISTER_HWACCEL </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define REGISTER_HWACCEL(X, x)                                          \</span>
</span><span class="line"><span class="cp">    {                                                                   \</span>
</span><span class="line"><span class="cp">        extern AVHWAccel ff_##x##_hwaccel;                              \</span>
</span><span class="line"><span class="cp">        if (CONFIG_##X##_HWACCEL)                                       \</span>
</span><span class="line"><span class="cp">            av_register_hwaccel(&amp;ff_##x##_hwaccel);                     \</span>
</span><span class="line"><span class="cp">    }</span>
</span></code></pre></td></tr></table></div></figure>

<p>以<code>H264</code>为例，<code>REGISTER_HWACCEL(H264_MMAL, h264_mmal)</code>展开如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extern AVHWAccel ff_h264_mmal_hwaccel;
</span><span class="line">if(CONFIG_H264_MMAL_HWACCEL)
</span><span class="line">    av_register_hwaccel(&amp;ff_h264_mmal_hwaccel);</span></code></pre></td></tr></table></div></figure>

<p><code>av_register_hwaccel(&amp;ff_h264_mmal_hwaccel)</code> 展开如下：</p>

<figure class="code"><figcaption><span>av_register_hwaccel </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">av_register_hwaccel</span><span class="p">(</span><span class="n">AVHWAccel</span> <span class="o">*</span><span class="n">hwaccel</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">AVHWAccel</span> <span class="o">**</span><span class="n">p</span> <span class="o">=</span> <span class="n">last_hwaccel</span><span class="p">;</span>
</span><span class="line">    <span class="n">hwaccel</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">||</span> <span class="n">avpriv_atomic_ptr_cas</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span> <span class="k">volatile</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">hwaccel</span><span class="p">))</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="n">last_hwaccel</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">hwaccel</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="codec">注册codec</h3>

<figure class="code"><figcaption><span>REGISTER_DECODER </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define REGISTER_DECODER(X, x)                                          \</span>
</span><span class="line"><span class="cp">    {                                                                   \</span>
</span><span class="line"><span class="cp">        extern AVCodec ff_##x##_decoder;                                \</span>
</span><span class="line"><span class="cp">        if (CONFIG_##X##_DECODER)                                       \</span>
</span><span class="line"><span class="cp">            avcodec_register(&amp;ff_##x##_decoder);                        \</span>
</span><span class="line"><span class="cp">    }</span>
</span></code></pre></td></tr></table></div></figure>

<p>以<code>HEVC</code>为例，<code>REGISTER_DECODER(HEVC, hevc)</code>展开如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extern AVCodec ff_hevc_decoder;
</span><span class="line">if(CONFIG_HEVC_DECODER)
</span><span class="line">    avcodec_register(&amp;ff_hevc_decoder);</span></code></pre></td></tr></table></div></figure>

<p><code>avcodec_register(&amp;ff_hevc_decoder)</code>展开如下：</p>

<figure class="code"><figcaption><span>avcodec_register </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">av_cold</span> <span class="kt">void</span> <span class="nf">avcodec_register</span><span class="p">(</span><span class="n">AVCodec</span> <span class="o">*</span><span class="n">codec</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">AVCodec</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">    <span class="n">avcodec_init</span><span class="p">();</span>
</span><span class="line">    <span class="n">p</span> <span class="o">=</span> <span class="n">last_avcodec</span><span class="p">;</span>
</span><span class="line">    <span class="n">codec</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">||</span> <span class="n">avpriv_atomic_ptr_cas</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span> <span class="k">volatile</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">codec</span><span class="p">))</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="n">last_avcodec</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">codec</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">codec</span><span class="o">-&gt;</span><span class="n">init_static_data</span><span class="p">)</span>
</span><span class="line">        <span class="n">codec</span><span class="o">-&gt;</span><span class="n">init_static_data</span><span class="p">(</span><span class="n">codec</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>ff_hevc_decoder 定义如下：</p>

<figure class="code"><figcaption><span>ff_hevc_decoder </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVCodec</span> <span class="n">ff_hevc_decoder</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">name</span>                  <span class="o">=</span> <span class="s">&quot;hevc&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">long_name</span>             <span class="o">=</span> <span class="n">NULL_IF_CONFIG_SMALL</span><span class="p">(</span><span class="s">&quot;HEVC (High Efficiency Video Coding)&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">type</span>                  <span class="o">=</span> <span class="n">AVMEDIA_TYPE_VIDEO</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">id</span>                    <span class="o">=</span> <span class="n">AV_CODEC_ID_HEVC</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_data_size</span>        <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HEVCContext</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_class</span>            <span class="o">=</span> <span class="o">&amp;</span><span class="n">hevc_decoder_class</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">init</span>                  <span class="o">=</span> <span class="n">hevc_decode_init</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">close</span>                 <span class="o">=</span> <span class="n">hevc_decode_free</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">decode</span>                <span class="o">=</span> <span class="n">hevc_decode_frame</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">flush</span>                 <span class="o">=</span> <span class="n">hevc_decode_flush</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">update_thread_context</span> <span class="o">=</span> <span class="n">hevc_update_thread_context</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">init_thread_copy</span>      <span class="o">=</span> <span class="n">hevc_init_thread_copy</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">capabilities</span>          <span class="o">=</span> <span class="n">AV_CODEC_CAP_DR1</span> <span class="o">|</span> <span class="n">AV_CODEC_CAP_DELAY</span> <span class="o">|</span>
</span><span class="line">                             <span class="n">AV_CODEC_CAP_SLICE_THREADS</span> <span class="o">|</span> <span class="n">AV_CODEC_CAP_FRAME_THREADS</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">profiles</span>              <span class="o">=</span> <span class="n">NULL_IF_CONFIG_SMALL</span><span class="p">(</span><span class="n">profiles</span><span class="p">),</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="parser">注册parser</h3>

<figure class="code"><figcaption><span>REGISTER_PARSER </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define REGISTER_PARSER(X, x)                                           \</span>
</span><span class="line"><span class="cp">    {                                                                   \</span>
</span><span class="line"><span class="cp">        extern AVCodecParser ff_##x##_parser;                           \</span>
</span><span class="line"><span class="cp">        if (CONFIG_##X##_PARSER)                                        \</span>
</span><span class="line"><span class="cp">            av_register_codec_parser(&amp;ff_##x##_parser);                 \</span>
</span><span class="line"><span class="cp">    }</span>
</span></code></pre></td></tr></table></div></figure>

<p>以<code>HEVC</code>为例，<code>REGISTER_PARSER(HEVC, hevc)</code>展开如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extern AVCoderParser ff_hevc_parser;
</span><span class="line">if(CONFIG_HEVC_PARSER)
</span><span class="line">    av_register_codec_parser(&amp;ff_hevc_parser);</span></code></pre></td></tr></table></div></figure>

<p><code>av_register_codec_parser(&amp;ff_hevc_parser)</code> 展开如下：</p>

<figure class="code"><figcaption><span>av_register_codec_parser </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">av_register_codec_parser</span><span class="p">(</span><span class="n">AVCodecParser</span> <span class="o">*</span><span class="n">parser</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">do</span> <span class="p">{</span>
</span><span class="line">        <span class="n">parser</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">av_first_parser</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">parser</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="n">avpriv_atomic_ptr_cas</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span> <span class="k">volatile</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">av_first_parser</span><span class="p">,</span> <span class="n">parser</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="n">parser</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>ff_hevc_parser 定义如下：</p>

<figure class="code"><figcaption><span>ff_hevc_parser </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVCodecParser</span> <span class="n">ff_hevc_parser</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">codec_ids</span>      <span class="o">=</span> <span class="p">{</span> <span class="n">AV_CODEC_ID_HEVC</span> <span class="p">},</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_data_size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HEVCParserContext</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">parser_parse</span>   <span class="o">=</span> <span class="n">hevc_parse</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">parser_close</span>   <span class="o">=</span> <span class="n">hevc_parser_close</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">split</span>          <span class="o">=</span> <span class="n">hevc_split</span><span class="p">,</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="bitstream-filters">注册bitstream filters</h3>

<figure class="code"><figcaption><span>REGISTER_BSF </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define REGISTER_BSF(X, x)                                              \</span>
</span><span class="line"><span class="cp">    {                                                                   \</span>
</span><span class="line"><span class="cp">        extern AVBitStreamFilter ff_##x##_bsf;                          \</span>
</span><span class="line"><span class="cp">        if (CONFIG_##X##_BSF)                                           \</span>
</span><span class="line"><span class="cp">            av_register_bitstream_filter(&amp;ff_##x##_bsf);                \</span>
</span><span class="line"><span class="cp">    }</span>
</span></code></pre></td></tr></table></div></figure>

<p>以<code>HEVC</code>为例，<code>REGISTER_BSF(HEVC_MP4TOANNEXB, hevc_mp4toannexb)</code> 展开如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extern AVBitStreamFilter ff_hevc_mp4toannexb_bsf;
</span><span class="line">if(CONFIG_HEVC_MP4TOANNEXB_BSF)
</span><span class="line">    av_register_bitstream_filter(&amp;ff_hevc_mp4toannexb_bsf);</span></code></pre></td></tr></table></div></figure>

<p><code>av_register_bitstream_filter(&amp;&amp;ff_hevc_mp4toannexb_bsf)</code> 展开如下：</p>

<figure class="code"><figcaption><span>av_register_bitstream_filter </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">av_register_bitstream_filter</span><span class="p">(</span><span class="n">AVBitStreamFilter</span> <span class="o">*</span><span class="n">bsf</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">do</span> <span class="p">{</span>
</span><span class="line">        <span class="n">bsf</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">first_bitstream_filter</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">bsf</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="n">avpriv_atomic_ptr_cas</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span> <span class="k">volatile</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">first_bitstream_filter</span><span class="p">,</span> <span class="n">bsf</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="n">bsf</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>ff_hevc_mp4toannexb_bsf 定义如下：</p>

<figure class="code"><figcaption><span>ff_hevc_mp4toannexb_bsf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVBitStreamFilter</span> <span class="n">ff_hevc_mp4toannexb_bsf</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&quot;hevc_mp4toannexb&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="k">sizeof</span><span class="p">(</span><span class="n">HEVCBSFContext</span><span class="p">),</span>
</span><span class="line">    <span class="n">hevc_mp4toannexb_filter</span><span class="p">,</span>
</span><span class="line">    <span class="n">hevc_mp4toannexb_close</span><span class="p">,</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFMPEG 源码分析：av_register_all]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/05/av-register-all/"/>
    <updated>2016-12-05T04:45:48-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/05/av-register-all</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#avregisterall-" id="markdown-toc-avregisterall-">av_register_all 框架</a></li>
  <li><a href="#section" id="markdown-toc-section">调用关系</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">源码分析</a>    <ul>
      <li><a href="#section-2" id="markdown-toc-section-2">注册一次</a></li>
      <li><a href="#codec" id="markdown-toc-codec">注册 codec</a></li>
      <li><a href="#section-3" id="markdown-toc-section-3">注册复用器</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">注册解复用器</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">注册协议</a></li>
    </ul>
  </li>
</ul>

<p><code>av_register_all()</code>几乎是所有使用 FFMPEG 编程调用的第一个函数。<code>av_register_all()</code>的主要功能是注册所有的 formats 和 protocols。</p>

<!--more-->

<h2 id="avregisterall-">av_register_all 框架</h2>

<p>首先列一下该函数的大体框架：</p>
<figure class="code"><figcaption><span>av_register_all </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">av_register_all</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">static</span> <span class="kt">int</span> <span class="n">initialized</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">initialized</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span><span class="p">;</span>
</span><span class="line">    <span class="n">initialized</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">avcodec_register_all</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*(de)muxers*/</span>
</span><span class="line">    <span class="p">......</span>
</span><span class="line">    <span class="n">REGISTER_MUXER</span>   <span class="p">(</span><span class="n">F4V</span><span class="p">,</span>              <span class="n">f4v</span><span class="p">);</span>
</span><span class="line">    <span class="p">......</span>
</span><span class="line">    <span class="n">REGISTER_MUXDEMUX</span><span class="p">(</span><span class="n">FLV</span><span class="p">,</span>              <span class="n">flv</span><span class="p">);</span>
</span><span class="line">    <span class="n">REGISTER_MUXDEMUX</span><span class="p">(</span><span class="n">H264</span><span class="p">,</span>             <span class="n">h264</span><span class="p">);</span>
</span><span class="line">    <span class="n">REGISTER_MUXDEMUX</span><span class="p">(</span><span class="n">HEVC</span><span class="p">,</span>             <span class="n">hevc</span><span class="p">);</span>
</span><span class="line">    <span class="n">REGISTER_MUXER</span>   <span class="p">(</span><span class="n">MP4</span><span class="p">,</span>              <span class="n">mp4</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*protocols*/</span>
</span><span class="line">    <span class="n">REGISTER_PROTOCOL</span><span class="p">(</span><span class="n">RTMP</span><span class="p">,</span>             <span class="n">rtmp</span><span class="p">);</span>
</span><span class="line">    <span class="n">REGISTER_PROTOCOL</span><span class="p">(</span><span class="n">TCP</span><span class="p">,</span>              <span class="n">tcp</span><span class="p">);</span>
</span><span class="line">    <span class="n">REGISTER_PROTOCOL</span><span class="p">(</span><span class="n">UDP</span><span class="p">,</span>              <span class="n">udp</span><span class="p">);</span>
</span><span class="line">    <span class="p">......</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="section">调用关系</h2>
<p><img src="http://lazybing.github.io/images/av_register_all/av_register_all.png" /></p>

<p>从调用关系图可以看出，通过调用<a href="http://lazybing.github.io/blog/2016/12/05/avcodec-register-all/">avcodec_register_all</a>注册了和编解码器有关的组件；硬件加速器、解码器、编码器、Parser、Bistream Filter等，以及复用器、解复用器、协议处理。</p>

<h2 id="section-1">源码分析</h2>

<h3 id="section-2">注册一次</h3>

<figure class="code"><figcaption><span>initialized_once </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="n">initialized</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">initialized</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span><span class="p">;</span>
</span><span class="line"><span class="n">initialized</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>该段代码可以看出，当调用过该函数一次后，再次调用时，该函数直接返回。<br />
注意，这种方法在 FFMEPG 源码中非常常见。</p>

<h3 id="codec">注册 codec</h3>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">avcodec_register_all();</span></code></pre></td></tr></table></div></figure>
<p>该函数的作用为注册<code>codecs</code><code>parsers</code>和<code>filters</code>。<br />
该函数的源码，还请访问<a href="http://lazybing.github.io/blog/2016/12/05/avcodec-register-all/">avcodec_register_all</a>函数。</p>

<h3 id="section-3">注册复用器</h3>

<figure class="code"><figcaption><span>REGISTER_MUXER </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define REGISTER_MUXER(X, x)                                            \</span>
</span><span class="line"><span class="cp">    {                                                                   \</span>
</span><span class="line"><span class="cp">        extern AVOutputFormat ff_##x##_muxer;                           \</span>
</span><span class="line"><span class="cp">        if (CONFIG_##X##_MUXER)                                         \</span>
</span><span class="line"><span class="cp">            av_register_output_format(&amp;ff_##x##_muxer);                 \</span>
</span><span class="line"><span class="cp">    }</span>
</span></code></pre></td></tr></table></div></figure>

<p>以<code>MP4</code>为例，<code>REGISTER_MUXER(MP4, mp4)</code>展开如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extern AVOutpusFormat ff_mp4_muxer;
</span><span class="line">if(CONFIG_MP4_MUXER)
</span><span class="line">    av_register_output_format(&amp;ff_mp4_muxer);</span></code></pre></td></tr></table></div></figure>

<p><code>av_register_output_format(&amp;ff_mp4_muxer)</code>展开如下：</p>

<figure class="code"><figcaption><span>av_register_output_format </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">av_register_output_format</span><span class="p">(</span><span class="n">AVOutputFormat</span> <span class="o">*</span><span class="n">format</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">AVOutputFormat</span> <span class="o">**</span><span class="n">p</span> <span class="o">=</span> <span class="n">last_oformat</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">format</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">||</span> <span class="n">avpriv_atomic_ptr_cas</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span> <span class="k">volatile</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">format</span><span class="p">))</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="n">last_oformat</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">format</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="section-4">注册解复用器</h3>

<figure class="code"><figcaption><span>REGISTER_MUXER </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define REGISTER_DEMUXER(X, x)                                          \</span>
</span><span class="line"><span class="cp">    {                                                                   \</span>
</span><span class="line"><span class="cp">        extern AVInputFormat ff_##x##_demuxer;                          \</span>
</span><span class="line"><span class="cp">        if (CONFIG_##X##_DEMUXER)                                       \</span>
</span><span class="line"><span class="cp">            av_register_input_format(&amp;ff_##x##_demuxer);                \</span>
</span><span class="line"><span class="cp">    }</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>av_register_input_format(&amp;ff_mp4_muxer)</code>展开如下：</p>

<figure class="code"><figcaption><span>av_register_output_format </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">av_register_input_format</span><span class="p">(</span><span class="n">AVInputFormat</span> <span class="o">*</span><span class="n">format</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">AVInputFormat</span> <span class="o">**</span><span class="n">p</span> <span class="o">=</span> <span class="n">last_iformat</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">format</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">||</span> <span class="n">avpriv_atomic_ptr_cas</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span> <span class="k">volatile</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">format</span><span class="p">))</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="n">last_iformat</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">format</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>avpriv_atomic_ptr_cas </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="o">*</span><span class="nf">avpriv_atomic_ptr_cas</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span> <span class="k">volatile</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">oldval</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">newval</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">void</span> <span class="o">*</span><span class="n">ret</span><span class="p">;</span>
</span><span class="line">    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">atomic_lock</span><span class="p">);</span>
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="n">oldval</span><span class="p">)</span>
</span><span class="line">        <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">newval</span><span class="p">;</span>
</span><span class="line">    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">atomic_lock</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>REGISTER_MUXDEMUX </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define REGISTER_MUXDEMUX(X, x) REGISTER_MUXER(X, x); REGISTER_DEMUXER(X, x)</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="section-5">注册协议</h3>

<figure class="code"><figcaption><span>REGISTER_PROTOCOL </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define REGISTER_PROTOCOL(X, x)                                         \</span>
</span><span class="line"><span class="cp">    {                                                                   \</span>
</span><span class="line"><span class="cp">        extern URLProtocol ff_##x##_protocol;                           \</span>
</span><span class="line"><span class="cp">        if (CONFIG_##X##_PROTOCOL)                                      \</span>
</span><span class="line"><span class="cp">            ffurl_register_protocol(&amp;ff_##x##_protocol);                \</span>
</span><span class="line"><span class="cp">    }</span>
</span></code></pre></td></tr></table></div></figure>

<p>以<code>TCP</code>为例，<code>REGISTER_PROTOCOL(TCP,tcp)</code>展开如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extern URLProtocol ff_tcp_protocol;
</span><span class="line">if(CONFIG_TCP_PROTOCOL)
</span><span class="line">    ffurl_register_protocol(&amp;ff_tcp_protocol);</span></code></pre></td></tr></table></div></figure>

<p><code>ffurl_register_protocol(&amp;ff_tcp_protocol)</code>展开如下：</p>

<figure class="code"><figcaption><span>ffurl_register_protocol </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">ffurl_register_protocol</span><span class="p">(</span><span class="n">URLProtocol</span> <span class="o">*</span><span class="n">protocol</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">URLProtocol</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">    <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">first_protocol</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="o">*</span><span class="n">p</span>             <span class="o">=</span> <span class="n">protocol</span><span class="p">;</span>
</span><span class="line">    <span class="n">protocol</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PAR、DAR、SAR分析]]></title>
    <link href="http://lazybing.github.io/blog/2016/11/16/par-sar-dar-analyse/"/>
    <updated>2016-11-16T08:11:53-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/11/16/par-sar-dar-analyse</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Aspect_ratio_(image)">Aspect Ratio</a> 是图片的宽高比。<br />
<!--more--></p>

<p>主要有 3 种<code>aspect ratio</code>：PAR(Pixel Aspect Ratio)、DAR(Display Aspect Ratio)、SAR(Sample Aspect Ratio)。</p>

<p>PAR(Pixel Aspect Ratio): 像素纵横比；<br />
DAR(Display Aspect Ratio):显示纵横比；<br />
SAR(Sample Aspect Ratio):采样纵横比；</p>

<p>三者的关系为PAR x SAR = DAR 或者 PAR = DAR / SAR。</p>

<p>PAR 示例如下：</p>

<p><img src="http://lazybing.github.io/images/PAR_DAR_SAR/220px-PAR-1to1.svg.png" title="'1to1_PAR'" /></p>

<p><img src="http://lazybing.github.io/images/PAR_DAR_SAR/220px-PAR-2to1.svg.png" title="'2to1_PAR'" /></p>

<p>DAR 示例如下：</p>

<p><img src="http://lazybing.github.io/images/PAR_DAR_SAR/Aspect_ratio_16_9_example3.jpg" title="'16to9_DAR'" /></p>

<p><img src="http://lazybing.github.io/images/PAR_DAR_SAR/Aspect_ratio_4_3_example.jpg" title="'4to3_DAR'" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFmpeg 学习之 FFplay 源码分析]]></title>
    <link href="http://lazybing.github.io/blog/2016/11/05/ffmpeg-learning-of-ffplay/"/>
    <updated>2016-11-05T21:03:58-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/11/05/ffmpeg-learning-of-ffplay</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#ffplay-" id="markdown-toc-ffplay-">FFplay 的使用</a></li>
  <li><a href="#ffplay--1" id="markdown-toc-ffplay--1">FFplay 源码分析</a>    <ul>
      <li><a href="#avregisterall" id="markdown-toc-avregisterall">av_register_all()</a></li>
    </ul>
  </li>
</ul>

<p>FFplay 是一个简单便携的媒体播放器，它使用了 FFmpeg 和 SDL 库。<br />
<!--more--></p>

<h3 id="ffplay-">FFplay 的使用</h3>
<p>首先看一下 FFplay 的使用：安装完 FFmpeg 后，直接在命令行中输入</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ffplay [options] bitstream_file</span></code></pre></td></tr></table></div></figure>
<p>其中更详细的使用说明，可以使用<code>man ffplay</code>来查看。</p>

<p>其次我们可以通过使用<code>Esc</code><code>q</code>来推出播放，可以使用空格来暂停播放，可以使用<code>s</code>来执行逐帧播放视频等等操作。</p>

<h3 id="ffplay--1">FFplay 源码分析</h3>

<p>ffplay 里面最主要的函数时:<code>av_register_all()</code><code>SDL_Init(flags)</code><code>av_init_packet</code><code>stream_open</code><code>event_loop</code>。下面逐个分析这几个函数主要完成的功能。</p>

<h4 id="avregisterall">av_register_all()</h4>

<p><code>av_register_all</code>实现注册<code>codecs</code><code>demux</code>和<code>protocols</code>。其中注册的<code>codecs</code>时通过<code>avcodec_reigster_all()</code>函数来实现的；注册<code>demux</code>的方法，以 HEVC 为例。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define REGISTER_MUXER(X, x)                                            \</span>
</span><span class="line"><span class="cp">    {                                                                   \</span>
</span><span class="line"><span class="cp">        extern AVOutputFormat ff_##x##_muxer;                           \</span>
</span><span class="line"><span class="cp">        if (CONFIG_##X##_MUXER)                                         \</span>
</span><span class="line"><span class="cp">            av_register_output_format(&amp;ff_##x##_muxer);                 \</span>
</span><span class="line"><span class="cp">    }</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define REGISTER_DEMUXER(X, x)                                          \</span>
</span><span class="line"><span class="cp">    {                                                                   \</span>
</span><span class="line"><span class="cp">        extern AVInputFormat ff_##x##_demuxer;                          \</span>
</span><span class="line"><span class="cp">        if (CONFIG_##X##_DEMUXER)                                       \</span>
</span><span class="line"><span class="cp">            av_register_input_format(&amp;ff_##x##_demuxer);                \</span>
</span><span class="line"><span class="cp">    }</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define REGISTER_MUXDEMUX(X, x) REGISTER_MUXER(X, x); REGISTER_DEMUXER(X, x)</span>
</span><span class="line">
</span><span class="line"><span class="n">REGISTER_MUXDEMUX</span><span class="p">(</span><span class="n">HEVC</span><span class="p">,</span><span class="n">hevc</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>将上面的宏展开即为：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">av_register_input_format</span><span class="p">(</span><span class="n">AVInputFormat</span> <span class="o">*</span><span class="n">format</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">AVInputFormat</span> <span class="o">**</span><span class="n">p</span> <span class="o">=</span> <span class="n">last_iformat</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">format</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">||</span> <span class="n">avpriv_atomic_ptr_cas</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span> <span class="k">volatile</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">format</span><span class="p">))</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="n">last_iformat</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">format</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">av_register_output_format</span><span class="p">(</span><span class="n">AVOutputFormat</span> <span class="o">*</span><span class="n">format</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">AVOutputFormat</span> <span class="o">**</span><span class="n">p</span> <span class="o">=</span> <span class="n">last_oformat</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">format</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">||</span> <span class="n">avpriv_atomic_ptr_cas</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span> <span class="k">volatile</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">format</span><span class="p">))</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="n">last_oformat</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">format</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVOutputFormat</span> <span class="n">ff_hevc_muxer</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">name</span>              <span class="o">=</span> <span class="s">&quot;hevc&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">long_name</span>         <span class="o">=</span> <span class="n">NULL_IF_CONFIG_SMALL</span><span class="p">(</span><span class="s">&quot;raw HEVC video&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">extensions</span>        <span class="o">=</span> <span class="s">&quot;hevc&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">audio_codec</span>       <span class="o">=</span> <span class="n">AV_CODEC_ID_NONE</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">video_codec</span>       <span class="o">=</span> <span class="n">AV_CODEC_ID_HEVC</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">write_packet</span>      <span class="o">=</span> <span class="n">ff_raw_write_packet</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">flags</span>             <span class="o">=</span> <span class="n">AVFMT_NOTIMESTAMPS</span><span class="p">,</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用gprof]]></title>
    <link href="http://lazybing.github.io/blog/2016/09/22/how-to-use-gprof/"/>
    <updated>2016-09-22T09:52:06-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/09/22/how-to-use-gprof</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Gprof">Gprof</a> 是一个 Unix 应用程序性能分析工具。
<!--more--></p>

<p><a href="https://sourceware.org/binutils/docs/gprof/index.html">Profiling</a> 可以使我们看到程序运行时程序的调用关系、函数的消耗时长等。这些信息可以使我们了解程序中那块代码耗时高于预期。</p>

<p>使用 Profiling 主要包括如下三步：</p>

<ul>
  <li>
    <p>编译链接程序时要使能 profiling 。</p>
  </li>
  <li>
    <p>执行编译处的可执行文件，产生 profile 数据文件。</p>
  </li>
  <li>
    <p>使用 gpro 分析 profile 数据。</p>
  </li>
</ul>

<p>根据产生的 profile ，可以产生各种不同实行的分析输出。如 The Flat Profile、The Call Graph、The Annotated Source Listing。</p>

<p>示例分析：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;time.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">fun2</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">fun1</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">        <span class="n">fun2</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">fun1</span><span class="p">();</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>编译，注意要添加<code>-pg</code>选项，这样才能与后面的 gprof 结合使用。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gcc -pg -o test test.c</span></code></pre></td></tr></table></div></figure>

<p>执行, 执行完毕后，会生成 gmon.out 文件，用于性能分析的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./test</span></code></pre></td></tr></table></div></figure>

<p>分析, 使用 gprof 分析。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gprof test gmon.out &gt; analysis.txt</span></code></pre></td></tr></table></div></figure>

<p>此时生成的分析文件 analysis.txt 中有两种形式的分析数据。</p>

<p>Flat Profile 如图：</p>

<p><img src="http://lazybing.github.io/images/gprof/Flat_profile.png" /></p>

<p>Call Graph 如图：</p>

<p><img src="http://lazybing.github.io/images/gprof/Call_graph.png" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[媒体文件格式分析之TS]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/26/ts-parse-format/"/>
    <updated>2016-07-26T04:57:15-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/26/ts-parse-format</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/MPEG_transport_stream">TS</a>是MPEG2-TS 的简称，是“Transport Stream”的缩写。一段 TS 流，必须包含 PAT 包、PMT 包、多个音频包、多个视频包、多个 PCR 包以及其他信息包。
<!--more--></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[媒体文件格式分析之MP4]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/26/mp4-parse-format/"/>
    <updated>2016-07-26T04:31:32-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/26/mp4-parse-format</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#box" id="markdown-toc-box">最小组单元 BOX</a></li>
  <li><a href="#mp4-" id="markdown-toc-mp4-">MP4 文件整体结构</a>    <ul>
      <li><a href="#file-type-box" id="markdown-toc-file-type-box">File Type Box</a></li>
      <li><a href="#movie-box" id="markdown-toc-movie-box">Movie Box</a>        <ul>
          <li><a href="#movie-header-box" id="markdown-toc-movie-header-box">Movie Header Box</a></li>
        </ul>
      </li>
      <li><a href="#track-box" id="markdown-toc-track-box">Track Box</a>        <ul>
          <li><a href="#track-header-box" id="markdown-toc-track-header-box">Track Header Box</a></li>
        </ul>
      </li>
      <li><a href="#media-box" id="markdown-toc-media-box">Media Box</a>        <ul>
          <li><a href="#media-header-box" id="markdown-toc-media-header-box">Media Header Box</a></li>
          <li><a href="#handler-reference-box" id="markdown-toc-handler-reference-box">Handler Reference Box</a></li>
          <li><a href="#media-informatino-box" id="markdown-toc-media-informatino-box">Media Informatino Box</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><a href="https://en.wikipedia.org/wiki/MPEG-4_Part_14">MP4</a>是由许多 Box 和 FullBox 组成的，每个 Box 是由 Header 和 Data 组成的，FullBox 是 Box 的扩展，Box 结构的基础上在 Header 中增加 8bits version 和 24bits flags。
<!--more--></p>

<h2 id="box">最小组单元 BOX</h2>

<p>MP4 是由一些列的 box 组成，它的最小组成单元是 box。MP4 文件中的所有数据都装在 box 中，即 MP4 文件由若干个 box 组成，每个
 box 有类型和长度，可以将 box 理解为一个数据对象块。box 中可以包含另一个 box，这种 box 称为 container box。一个 MP4 文件首先会有且仅有
 一个<code>ftype</code>类型的 box,作为 MP4 格式的标志并包含关于文件的一些信息，之后会有且只有一个<code>moov</code>类型的box(Movie Box)，她是一种 container box,
 可以有多个，也可以没有，媒体数据的结构由 metadata 进行描述。</p>

<p><img src="http://lazybing.github.io/images/MP4/mp4_box.png" /></p>

<ul>
  <li>size：指明了 box 所占用的大小，包括 header 部分。</li>
  <li>type: 表示这个 box 的类型。</li>
  <li>largesize: 如果 box 很大超过 uint32 的最大数值,size 就被设置为 1,并用接下来的 largesize 来存放大小。</li>
</ul>

<p>一些基本概念：</p>

<ul>
  <li>track 表示一些 sample 的集合，对于媒体数据来说， track 表示一个视频或音频序列。</li>
  <li>hint track 这个特殊的 track 并不包含媒体数据，而是包含了一些将其他数据 track 打包成流媒体的指示信息。</li>
  <li>sample 对于非 hint track 来说， video  sample 即为一帧视频，或一组连续视频帧，audio sample 即为一段连续的压缩音频，统称为 sample。对于 hint track，sample 定义一个或多个流媒体包的格式。</li>
  <li>sample table 指明 sample 时序和物理布局的表。</li>
  <li>chunk 一个track的几个 sample 组成的单元。</li>
</ul>

<h2 id="mp4-">MP4 文件整体结构</h2>

<p><img src="http://lazybing.github.io/images/MP4/box.png" /></p>

<h3 id="file-type-box">File Type Box</h3>

<p><code>ftyp</code>类型会出现在 MP4 文件的开头，作为 MP4 容器格式的可表示信息。<code>ftyp box</code>内容结构如下：</p>

<p><img src="http://lazybing.github.io/images/MP4/filetypebox.png" /></p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class FileTypeBox
</span><span class="line">extends Box('ftyp'){
</span><span class="line">unsigned int(32) major_brand;
</span><span class="line">unsigned int(32) minor_version;
</span><span class="line">unsigned int(32) compatible_brands[];
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<h3 id="movie-box">Movie Box</h3>

<p><code>moov</code>里面包含了很多个 box,一般情况下 moov 会紧跟着 ftype。moov 里面包含着 MP4 文件中的 metedata。音视频相关
的基础信息。</p>

<h4 id="movie-header-box">Movie Header Box</h4>

<p><img src="http://lazybing.github.io/images/MP4/movie_header.png" /></p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class MovieHeader extends FullBox('mvhd', version, 0)
</span><span class="line">{
</span><span class="line">    if(version == 1)
</span><span class="line">    {
</span><span class="line">        unsinged int(64) creation_time;
</span><span class="line">        unsinged int(64) modification_time;
</span><span class="line">        unsinged int(64) timescale;
</span><span class="line">        unsinged int(64) duration;
</span><span class="line">    }else{
</span><span class="line">        unsinged int(32) creation_time;
</span><span class="line">        unsinged int(32) modification_time;
</span><span class="line">        unsinged int(32) timescale;
</span><span class="line">        unsinged int(32) duration;
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    template int(32) rate = 0x00010000;
</span><span class="line">    template int(16) volume = 0x0100;
</span><span class="line">    const bit(16) reserved = 0;
</span><span class="line">    const ungigned int(32)[2] reserved = 0;
</span><span class="line">    template int(32)[9] matrix = 
</span><span class="line">    { 0x0001000, 0, 0, 0, 0x0001000, 0, 0, 0, 0x40000000};
</span><span class="line">    bit(32)[6] pre_defined = 0;
</span><span class="line">    unsigned int(32) next_track_ID;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<p>各个 Field 含义表格：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Field</th>
      <th style="text-align: center">Type</th>
      <th style="text-align: center">Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">box size</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">box 大小</td>
    </tr>
    <tr>
      <td style="text-align: center">box type</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">box 类型</td>
    </tr>
    <tr>
      <td style="text-align: center">version</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">box 版本</td>
    </tr>
    <tr>
      <td style="text-align: center">flags</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">flags</td>
    </tr>
    <tr>
      <td style="text-align: center">creation time</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">创建时间</td>
    </tr>
    <tr>
      <td style="text-align: center">modification time</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">修改时间</td>
    </tr>
    <tr>
      <td style="text-align: center">time scale</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">文件媒体在 1s 时间内的刻度值，可以理解为 1s 长度的时间单元数，一般情况下视频都是90000</td>
    </tr>
    <tr>
      <td style="text-align: center">duration</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">该 track 的时间长度，用 duration 和 time scale 值可以计算 track 时长</td>
    </tr>
    <tr>
      <td style="text-align: center">rate</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">推荐播放速率</td>
    </tr>
    <tr>
      <td style="text-align: center">volume</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">与 rate 类似</td>
    </tr>
    <tr>
      <td style="text-align: center">reserved</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">保留位</td>
    </tr>
    <tr>
      <td style="text-align: center">matrix</td>
      <td style="text-align: center">36</td>
      <td style="text-align: center">视频变化矩阵</td>
    </tr>
    <tr>
      <td style="text-align: center">pre-defined</td>
      <td style="text-align: center">24</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">nex track id</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">下一个 track 使用过的id 号</td>
    </tr>
  </tbody>
</table>

<h3 id="track-box">Track Box</h3>

<p>在<code>moov</code>这个box中会含有若干个track box每个track都是相对独立，track box里面会包含很多别的box，有2个很关键
<code>Track Header Box</code><code>Media Box</code>。</p>

<h4 id="track-header-box">Track Header Box</h4>

<p><img src="http://lazybing.github.io/images/MP4/movie_header.png" /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Field</th>
      <th style="text-align: center">Type</th>
      <th style="text-align: center">Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">box size</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">box大小</td>
    </tr>
    <tr>
      <td style="text-align: center">box type</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">box类型</td>
    </tr>
    <tr>
      <td style="text-align: center">version</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">box版本</td>
    </tr>
    <tr>
      <td style="text-align: center">flags</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">按位或操作结果值，预定义如下：0x000001 track_enabled,否则该track不被播放；0x000002 track_in_movie，表示该track在播放中被引用。</td>
    </tr>
    <tr>
      <td style="text-align: center">track id</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">id号</td>
    </tr>
    <tr>
      <td style="text-align: center">reserved</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">保留位</td>
    </tr>
    <tr>
      <td style="text-align: center">duration</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">track的时间长度</td>
    </tr>
    <tr>
      <td style="text-align: center">reserved</td>
      <td style="text-align: center">8</td>
      <td style="text-align: center">保留位</td>
    </tr>
    <tr>
      <td style="text-align: center">layer</td>
      <td style="text-align: center">2 视频层，默认为0， 值小的在上层</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">alternate group</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">track 分组信息，默认为0表示该track未与其他track组有关系</td>
    </tr>
    <tr>
      <td style="text-align: center">volume</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">[8.8]格式，如果为音频track,1.0表示最大音量，否则为0</td>
    </tr>
    <tr>
      <td style="text-align: center">reserved</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">保留位</td>
    </tr>
    <tr>
      <td style="text-align: center">matrix</td>
      <td style="text-align: center">36</td>
      <td style="text-align: center">视频变化矩阵</td>
    </tr>
    <tr>
      <td style="text-align: center">width</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">宽</td>
    </tr>
    <tr>
      <td style="text-align: center">height</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">高</td>
    </tr>
  </tbody>
</table>

<h3 id="media-box">Media Box</h3>

<h4 id="media-header-box">Media Header Box</h4>

<p><img src="http://lazybing.github.io/images/MP4/media_header_box.png" /></p>

<table>
  <tbody>
    <tr>
      <td>Field</td>
      <td>Type</td>
      <td>Comment</td>
    </tr>
    <tr>
      <td>box size</td>
      <td>4</td>
      <td>box 大小</td>
    </tr>
    <tr>
      <td>box type</td>
      <td>4</td>
      <td>box 类型</td>
    </tr>
    <tr>
      <td>version</td>
      <td>1</td>
      <td>box 版本</td>
    </tr>
    <tr>
      <td>creation_time</td>
      <td>4</td>
      <td>创建时间</td>
    </tr>
    <tr>
      <td>modification_time</td>
      <td>4</td>
      <td>修改时间</td>
    </tr>
    <tr>
      <td>time scale</td>
      <td>4</td>
      <td>文件媒体在1s内的刻度值</td>
    </tr>
    <tr>
      <td>duration</td>
      <td>4</td>
      <td>该 track 的时间长度</td>
    </tr>
    <tr>
      <td>langurage</td>
      <td>2</td>
      <td>媒体语言码</td>
    </tr>
    <tr>
      <td>pre_defined</td>
      <td>2</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h4 id="handler-reference-box">Handler Reference Box</h4>

<p><img src="http://lazybing.github.io/images/MP4/media_header_box.png" /></p>

<table>
  <tbody>
    <tr>
      <td>Field</td>
      <td>Type</td>
      <td>Comment</td>
    </tr>
    <tr>
      <td>box size</td>
      <td>4</td>
      <td>box 大小</td>
    </tr>
    <tr>
      <td>box type</td>
      <td>4</td>
      <td>box 类型</td>
    </tr>
    <tr>
      <td>flags</td>
      <td>3</td>
      <td> </td>
    </tr>
    <tr>
      <td>pre_defined</td>
      <td>4</td>
      <td> </td>
    </tr>
    <tr>
      <td>handler_type</td>
      <td>4</td>
      <td>Video track(vide)/Audio track(soun)/Hint track(hint)a</td>
    </tr>
    <tr>
      <td>reserved</td>
      <td>12</td>
      <td>0</td>
    </tr>
    <tr>
      <td>name</td>
      <td>string</td>
      <td>字符串 tracke type name</td>
    </tr>
  </tbody>
</table>

<h4 id="media-informatino-box">Media Informatino Box</h4>

<p><code>minf</code>里面包含着一系列的box，里面是track相关的特征信息。一般
情况minf包含:Media Information Header Boxes、Data Information Box(dinf)、Sample Table Box。</p>

<p>Media Information Header Boxes 根据类型分为 vmhd、smhd、hmhd、nmhd。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[媒体文件格式分析之AVI]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/24/avi-parse-format/"/>
    <updated>2016-07-24T01:04:52-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/24/avi-parse-format</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">基本数据结构</a></li>
  <li><a href="#avi-" id="markdown-toc-avi-">AVI 文件类型</a></li>
  <li><a href="#avi--1" id="markdown-toc-avi--1">AVI 文件布局</a>    <ul>
      <li><a href="#mainaviheaderavih" id="markdown-toc-mainaviheaderavih">MainAVIHeader(avih)</a></li>
      <li><a href="#stream-header-list" id="markdown-toc-stream-header-list">Stream Header List</a></li>
      <li><a href="#stream-header-list-elementstrh" id="markdown-toc-stream-header-list-elementstrh">Stream Header List Element(strh)</a></li>
      <li><a href="#stream-header-list-elementstrf" id="markdown-toc-stream-header-list-elementstrf">Stream Header List Element(strf)</a></li>
      <li><a href="#stream-header-list-elementindx" id="markdown-toc-stream-header-list-elementindx">Stream Header List Element(indx)</a></li>
      <li><a href="#stream-header-list-elementstrn" id="markdown-toc-stream-header-list-elementstrn">Stream Header List Element(strn)</a></li>
    </ul>
  </li>
  <li><a href="#avi-indexes" id="markdown-toc-avi-indexes">AVI Indexes</a>    <ul>
      <li><a href="#old-style-index" id="markdown-toc-old-style-index">old style index</a></li>
      <li><a href="#open-dml-index" id="markdown-toc-open-dml-index">Open-DML Index</a></li>
      <li><a href="#using-the-open-dml-index" id="markdown-toc-using-the-open-dml-index">Using the Open-DML index</a></li>
    </ul>
  </li>
  <li><a href="#the-movi---lists" id="markdown-toc-the-movi---lists">The movi - Lists</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">参考文献</a></li>
</ul>

<p><a href="https://en.wikipedia.org/wiki/Audio_Video_Interleave">AVI</a> 是音视频交错(Audio Video Interleaved)的缩写，它是 Microsoft 公司开发的一种符合 RIFF 文件规范的数字音频与视频文件格式。
<!--more--></p>

<h2 id="section">基本数据结构</h2>

<p>AVI 文件中有两种类型结构:Chunks 和 Lists。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//Chunks
</span><span class="line">typedef struct {
</span><span class="line">    DWORD dwFourCC;
</span><span class="line">    DWORD dwSize;
</span><span class="line">    BYTE  data[dwSize];
</span><span class="line">}CHUNK;
</span><span class="line">//Lists
</span><span class="line">typedef struct{
</span><span class="line">    DWORD dwList;
</span><span class="line">    DWORD dwSize;
</span><span class="line">    DWORD dwFourCC;
</span><span class="line">    BYTE  data[dwSize - 4];
</span><span class="line">}LIST;</span></code></pre></td></tr></table></div></figure>

<p>一个包含了<code>video</code>、<code>audio</code>或<code>subtitle</code>数据的<code>chunk</code>使用一个<code>dwFourCC</code>，
<code>dwFourCC</code>包含 2 个十六进制数字表示 stream number，2 个字母表示数据类型( dc 表示 video， wb 表示 audio, tx 表示 text)。
<code>dwFourCC</code>和<code>dwSize</code>在<code>Chunks</code>和<code>Lists</code>中有相同的含义。</p>

<p><code>dwFourCC</code>描述chunk 的类型（如<code>hdrl</code>表示 <code>header list</code>），<code>dwSize</code>表示该 chunk 或 list 的大小，
包含<code>dwSize</code>后的所有 byte。在 List 中，<code>dwSize</code>包含了<code>dwFourCC</code>所占有的4 bytes.</p>

<p><code>dwList</code>的值可以是<code>RIFF（RIFF-List</code>或<code>LIST(List)</code>。</p>

<h2 id="avi-">AVI 文件类型</h2>

<p>通常来讲，有 3 种类型的 AVI 文件：</p>

<ul>
  <li>AVI 1.0, 最初始的 AVI 文件类型。</li>
  <li>Open-DML, AVI 文件格式的扩展。1.02版本相对于1.0版本有两个提高：基本没有文件大小的限制、负载降低了33%。</li>
  <li>Hybride-Files，Open-DML 文件因为兼容的原因有个额外的限制，Hybride-Files 虽然不是官方致命的文件类型，但确实是一个不错的类型。</li>
</ul>

<h2 id="avi--1">AVI 文件布局</h2>
<p>一个<code>dwFourCC=AVI</code>的<code>RIFF-List</code>称为<code>RIFF-AVI-List</code>，
一个<code>dwFourCC=AVIX</code>的<code>RIFF-List</code>称为<code>RIFF-AVIX-List</code>。</p>

<p>每个 AVI 文件都有如下布局：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">RIFF AVI    //mandatory
</span><span class="line">{RIFF AVIX} //only for Open-DML files</span></code></pre></td></tr></table></div></figure>

<p>并非之受限于 uint32 的限制，文件大小的极限并非 4G,而是</p>

<ul>
  <li>对于 AVI 1.0: sizeof(RIFF-AVI) &lt; 2G</li>
  <li>对于 Open-DML, sizeof(RIFF-AVI) &lt; 1G(!!), sizeof(RIFF-AVIX) &lt; 2G</li>
</ul>

<p>一般来讲，RIFF-AVI-Lists被创建的越小越好。</p>

<h3 id="mainaviheaderavih">MainAVIHeader(avih)</h3>

<p><code>avih</code>结构定义如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">typedef struct
</span><span class="line">{
</span><span class="line">    DWORD dwMicroSecPerFrame;   //frame display rate(or 0)
</span><span class="line">    DWORD dwMaxBytesPerSec;     //max transfer rate
</span><span class="line">    DWORD dwPaddingGranularity; //pad to multiples of this size
</span><span class="line">    DWORD dwFlags               //the ever-present flags
</span><span class="line">    DWORD dwTotalFrames;        //frames in file
</span><span class="line">    DWORD dwInitialFrames;
</span><span class="line">    DWORD dwStreams;
</span><span class="line">    DWORD dwSuggestedBufferSize;
</span><span class="line">
</span><span class="line">    DWORD dwWidth;
</span><span class="line">    DWORD dwHeight;
</span><span class="line">
</span><span class="line">    DWORD dwReserved[4];
</span><span class="line">}MainAVIHeader;</span></code></pre></td></tr></table></div></figure>
<ul>
  <li>dwMicroSecPerFrame 以微妙为单位，包含了一个视频帧的持续时间。该值可以被忽略。注意，某些程序中可能会把它写成 framerate 值，因此 dwMicroSecPerFrame 并不可靠。</li>
  <li>dwMaxBytesPerSec 文件中最大的数据率，该值同样的不是特别重要。</li>
  <li>dwPaddingGranularity 填充的数据。</li>
  <li>dwFlags <code>AVIF_HASINDEX</code>（该文件有index）、<code>AVIF_MUSTUSEINDEX</code>（）、<code>AVIF_ISINTERLEAVED</code> <code>AVIF_WASCAPTUREFILE</code> <code>AVIF_COPYRIGHTED</code> <code>AVIF_TRUSTCKTYPE</code>。</li>
  <li>dwTotalFrames 包含了<code>RIFF-AVI list</code>中视频帧数。如果文件中包含<code>RIFF-AVIX-Lists</code>，它不会包含其中的视频帧。因为某些<code>muxer</code>会写一些错误的值，因此该值同样的不可靠。</li>
  <li>dwInitialFrames 忽略</li>
  <li>dwStreams 文件中<code>streams</code>的数量。</li>
  <li>dwSuggestedBufferSize 文件chunks 所需要的内存大小。同样不要高估它的可靠性。</li>
  <li>dwWidth 视频的宽。</li>
  <li>dwHeight 视频的高。</li>
</ul>

<h3 id="stream-header-list">Stream Header List</h3>

<p>针对每个<code>stream</code>都有一个<code>strl</code>，如果<code>strl</code>的数量与<code>MainAVIHeader::dwStreams</code>不同，就需要发出一个<code>fatal error report</code>。</p>

<h3 id="stream-header-list-elementstrh">Stream Header List Element(strh)</h3>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">typedef struct{
</span><span class="line">    FOURCC fccType;
</span><span class="line">    FOURCC fccHandler;
</span><span class="line">    DWORD  dwFlags;
</span><span class="line">    WORD   wPriority;
</span><span class="line">    WORD   wLanguage;
</span><span class="line">    DWORD  dwInitialFrames;
</span><span class="line">    DWORD  dwScale;
</span><span class="line">    DWORD  dwRate;  // dwRate / dwScale == samples /second
</span><span class="line">    DWORD  dwStart;
</span><span class="line">    DWORD  dwLength;  //In units above
</span><span class="line">    DWORD  dwSuggestedBufferSize;
</span><span class="line">    DWORD  dwQuality;
</span><span class="line">    DWORD  dwSampleSize;
</span><span class="line">    RECT   rcFrame;
</span><span class="line">}AVIStreamHeader;</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>fccType <code>vids</code>代表 video, <code>auds</code>代表 audio, <code>txts</code>代表 subtitle。</li>
  <li>fccHandler</li>
  <li>dwFlags <code>AVISF_DISABLED</code> <code>AVISF_VIDEO_PALCHANGES</code></li>
  <li>dwInitialFrames</li>
  <li>dwRate / dwScale = samples / second(audio) or frames / second(video)</li>
  <li>dwStart</li>
  <li>dwLength</li>
  <li>dwSuggestedBufferSize</li>
  <li>dwQuality</li>
  <li>dwSampleSize</li>
</ul>

<h3 id="stream-header-list-elementstrf">Stream Header List Element(strf)</h3>

<p><code>strf</code>的结构依据媒体类型。对于 video，使用<code>BITMAPINFOHEADER</code>结构，而 audion，使用<code>WAVEFORMATEX</code>结构。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">typedef struct tagBITMAPINFOHEADER{
</span><span class="line">    DWORD biSize;
</span><span class="line">    LONG  biWidth;
</span><span class="line">    LONG  biHeight;
</span><span class="line">    WORD  biPlanes;
</span><span class="line">    WORD  biBitCount;
</span><span class="line">    DWORD biCompression;
</span><span class="line">    DWORD biSizeImage;
</span><span class="line">    LONG  biXPelsPerMeter;
</span><span class="line">    LONG  biYPelsPerMeter;
</span><span class="line">    DWORD biClrUsed;
</span><span class="line">    DWORD biClrImportant;
</span><span class="line">}BITMAPINFOHEADER, *PBITMAPINFOHEADER;</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>biSize  该结构体所需要的 byte 大小。</li>
  <li>biWidth 图像的宽度。如果<code>biCompression</code>是<code>BI_JPEG</code>或<code>BI_PNG</code>，<code>biWidth</code>成员相应的指解压缩后的<code>JPEG</code>或<code>PNG</code>图像文件的宽。</li>
  <li>biHeight 位图的高度。如果<code>biHeight</code>是正数，位图是自底向上的<code>DIB</code>,它的原点是右下角地点；。如果<code>biHeight</code>是正数，位图是自顶向下的<code>DIB</code>,它的原点是右上角地点；
如果<code>biHeight</code>是负数，<code>biCompression</code>要么是<code>BI_RGB</code>或<code>BI_BITFIELDS</code>，自顶向下的<code>DIB</code>不能被压缩。
如果<code>biCompression</code>是<code>BI_JPEG</code>或<code>BI_PNG</code>，则<code>biHeight</code>程序分别指解压缩后的<code>JPEG</code>或<code>PNG</code>图像的高。</li>
  <li>biPlanes 目标设备的<code>planes</code>的数量，该值必须是1。</li>
  <li>biBitCount 每个像素所用的 bit 数，<code>BITMAPINFOHEADER</code>的成员<code>biBitCount</code>决定了每个 pixel 所占的 bit 数、以及位图中表示颜色所能用到的最大数。该值可以是<code>0/1/4/8/16/24/32</code>。</li>
  <li>biCompression 压缩的自底向上的位图的压缩类型，可以是<code>BI_RGB</code><code>BI_RLE8</code><code>BI_RLE4</code><code>BI_BITFIELDS</code><code>BI_JPEG</code><code>BI_PNG</code>.</li>
  <li>biSizeImage 图像的大小，单位 byte。如果是<code>BI_RGB</code>位图，该值被设置为0。如果<code>biCompression</code>是<code>BI_JPEG</code>或<code>BI_PNG</code>，该值分别指示 JPEG 或 PNG 图像的大小。</li>
  <li>biXPelsPerMeter 水平分辨率。</li>
  <li>biYPelsPerMeter 垂直分辨率。</li>
  <li>biClrUsed 颜色表中该位图实际使用的颜色指针。</li>
  <li>biClrImportant</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">typedef struct{
</span><span class="line">    WORD  wFormatTag;
</span><span class="line">    WORD  nChannels;
</span><span class="line">    DWORD nSamplesPerSec;
</span><span class="line">    DWORD nAvgBytesPerSec;
</span><span class="line">    WORD  nBlocAlign;
</span><span class="line">    WORD  wBitsPerSample;
</span><span class="line">    WORD  cbSize;
</span><span class="line">}WAVEFORMATEX;</span></code></pre></td></tr></table></div></figure>
<p>(待续…)</p>

<h3 id="stream-header-list-elementindx">Stream Header List Element(indx)</h3>

<p>该结构请看下面的<code>AVI index</code>小结。</p>

<h3 id="stream-header-list-elementstrn">Stream Header List Element(strn)</h3>

<p>该部分包含了<code>stream</code>的的名字。该名字只能使用标准的<code>ASCII</code>，尤其不能使用<code>UTF-8</code>。</p>

<h2 id="avi-indexes">AVI Indexes</h2>

<h3 id="old-style-index">old style index</h3>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">AVIINDEXENTRY index_entry[n]  
</span><span class="line">typedef struct{
</span><span class="line">    DWORD ckid;
</span><span class="line">    DWORD dwFlags;
</span><span class="line">    DWORD dwChunkOffset;
</span><span class="line">    DWORD dwChunkLength;
</span><span class="line">}AVIINDEXENTRY;</span></code></pre></td></tr></table></div></figure>

<h3 id="open-dml-index">Open-DML Index</h3>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">typedef struct _aviindex_chunk{
</span><span class="line">    FOURCC fcc;
</span><span class="line">    DWORD  cb;
</span><span class="line">    WORD   wLongsPerEntry;
</span><span class="line">    BYTE   bIndexSubType;
</span><span class="line">    BYTE   bIndexType;
</span><span class="line">    DWORD  nEntriesInUse;
</span><span class="line">    DWORD  dwChunkId;
</span><span class="line">    DWORD  dwReserved[3];
</span><span class="line">    struct _aviindex_entry{
</span><span class="line">        DWORD adw[wLongsPerEntry];
</span><span class="line">    }aIndex[];
</span><span class="line">}AVIINDEXCHUNK;</span></code></pre></td></tr></table></div></figure>

<h3 id="using-the-open-dml-index">Using the Open-DML index</h3>

<h2 id="the-movi---lists">The movi - Lists</h2>

<p><code>Movi-List</code>包含<code>Video</code><code>Audio</code><code>Subtitle</code>和<code>index data</code>。它们可以打包进<code>rec-List</code>。如：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">LIST movi
</span><span class="line">    LIST rec
</span><span class="line">        01wb
</span><span class="line">        02wb
</span><span class="line">        03dc
</span><span class="line">    LIST rec
</span><span class="line">        01wb
</span><span class="line">        02wb
</span><span class="line">    LIST rec
</span><span class="line">        ...
</span><span class="line">        ...
</span><span class="line">        ix01
</span><span class="line">        ix02
</span><span class="line">        ...</span></code></pre></td></tr></table></div></figure>
<p>其中的<code>chunks</code> ID 分别定义如下：</p>

<ul>
  <li>..wb : audio chunk</li>
  <li>..dc : video chunk</li>
  <li>..tx : subtitle chunk</li>
  <li>ix.. : standard index block</li>
</ul>

<h2 id="section-1">参考文献</h2>

<ol>
  <li><a href="http://www.ezr8.com/avi.html">What is avi?</a></li>
  <li><a href="http://pvdtools.sourceforge.net/aviformat.txt">BETA DOCUMENTATION OF RIFF-AVI FILE FORMAT</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Audio_Video_Interleave">Audio Video Interleave</a></li>
  <li><a href="http://blog.csdn.net/jszj/article/category/614875">AVI 文件格式</a></li>
  <li><a href="http://blog.csdn.net/njuitjf/article/details/5680632">AVI 文件解析</a></li>
  <li><a href="https://www.ffmpeg.org/doxygen/0.6/avidec_8c-source.html">FFmpeg AVI</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[媒体文件格式分析之FLV]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/24/flv-parse/"/>
    <updated>2016-07-24T00:22:21-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/24/flv-parse</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#flv-header" id="markdown-toc-flv-header">FLV Header</a></li>
  <li><a href="#flv-file-body" id="markdown-toc-flv-file-body">FLV File Body</a></li>
  <li><a href="#flv-tags" id="markdown-toc-flv-tags">FLV tags</a>    <ul>
      <li><a href="#audio-tags" id="markdown-toc-audio-tags">Audio tags</a></li>
      <li><a href="#video-tags" id="markdown-toc-video-tags">Video tags</a></li>
      <li><a href="#video-data" id="markdown-toc-video-data">Video Data</a></li>
      <li><a href="#avcvideopacket" id="markdown-toc-avcvideopacket">AVCVIDEOPACKET</a></li>
      <li><a href="#onmetadata" id="markdown-toc-onmetadata">onMetaData</a></li>
    </ul>
  </li>
</ul>

<p><a href="https://en.wikipedia.org/wiki/Flash_Video">FLV</a> 是 FLASH VIDEO 的简称，FLV 流媒体是随着Flash MX 的推出发展而来的视频格式。FLV 一般由文件头(FLV header) 和文件体(FLV body) 组成。其中文件体(FLV body)由一些列tag组成，tag又可分成三类:audio/video/script，分别代表音频流、视频流、脚本流(关键字或文件信息之类)。
<!--more-->
在 FLV 文件中，每种 tag 类型都由一个单独的流组成，即在 FLV 文件中最多有一个视频流和一个音频流，对同一种类型的流，FLV 中不能够定义多个独立的流。
与 SWF 文件不同,FLV 文件以大字节序存储多字节。比如，0x300(0x12C) 在 SWF 文件中的字节序为 0x2C 0x01,在FLV 文件中则为 0x01 0x2C。</p>

<h2 id="flv-header">FLV Header</h2>
<p>以 FLV Header <code>46 4C 56 01 05 00 00 00 09</code>为例：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Field</th>
      <th style="text-align: center">Type</th>
      <th style="text-align: center">Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Signature</td>
      <td style="text-align: center">UI8</td>
      <td style="text-align: center">Signature byte always ‘F’(0x46)</td>
    </tr>
    <tr>
      <td style="text-align: center">Signature</td>
      <td style="text-align: center">UI8</td>
      <td style="text-align: center">Signature byte always ‘L’(0x4C)</td>
    </tr>
    <tr>
      <td style="text-align: center">Signature</td>
      <td style="text-align: center">UI8</td>
      <td style="text-align: center">Signature byte always ‘V’(0x56)</td>
    </tr>
    <tr>
      <td style="text-align: center">Version</td>
      <td style="text-align: center">UI8</td>
      <td style="text-align: center">File version(0x01 for FLV version 1)</td>
    </tr>
    <tr>
      <td style="text-align: center">TypeFlagsReserved</td>
      <td style="text-align: center">UB[5]</td>
      <td style="text-align: center">Must be 0</td>
    </tr>
    <tr>
      <td style="text-align: center">TypeFlagsAudio</td>
      <td style="text-align: center">UB[1]</td>
      <td style="text-align: center">Audio tags are present</td>
    </tr>
    <tr>
      <td style="text-align: center">TypeFlagsReserved</td>
      <td style="text-align: center">UB[1]</td>
      <td style="text-align: center">Must be 0</td>
    </tr>
    <tr>
      <td style="text-align: center">TypeFlagsVideo</td>
      <td style="text-align: center">UB[1]</td>
      <td style="text-align: center">Video tags are present</td>
    </tr>
    <tr>
      <td style="text-align: center">DataOffset</td>
      <td style="text-align: center">UI32</td>
      <td style="text-align: center">Offset in bytes from start of file to start of body(that is size of header)</td>
    </tr>
  </tbody>
</table>

<p><code>DataOffset</code>字段在 FLV 1 时，通常是 9。</p>

<p>FLV Header 的前三个字节是固定的<code>FLV</code>的 ASCII 码的值<code>0x46 0x4C 0x56</code>; 接下来的一个字节表示 FLV 的版本号,例如 0x01 代表 FLV 版本号为 1。第 5 个字节中的第0位和第2位分别表示video和audio的存在情况（1表示存在，0表示不存在）,其余6位必须为0.最后的4字节表示FLV Header的长度，对于version 1，此处为9.</p>

<h2 id="flv-file-body">FLV File Body</h2>
<p>FLV Header 之后，FLV 文件的剩余部分由tag组成，它们交替如下：</p>

<table>
  <tbody>
    <tr>
      <td>PreviousTagSize0</td>
      <td>Tag1</td>
      <td>PreviousTagSize1</td>
      <td>Tag2</td>
      <td>……</td>
      <td>PreviousTagSizeN-1</td>
      <td>TagN</td>
      <td>PreviousTagSizeN</td>
    </tr>
  </tbody>
</table>

<h2 id="flv-tags">FLV tags</h2>
<p>FLV tags 有以下几个字段构成：8bit的<code>TagType</code>、24bit的<code>DataSize</code>、24bit的<code>TimeStamp</code>、8bit的<code>TimeStampExtended</code>、24bit的<code>StreamID</code>以及最后的<code>Data</code>。</p>

<p><code>TagType</code>指该Tag的类型，8 代表 Audio，9 代表 Video，18 代表 Script Data。</p>

<p><code>DataSize</code>指定后面的<code>Data</code>字段的大小。</p>

<p>以 Tag <code>12 00 12 A9 00 00 00 00 00 00 00 02 00 0A……</code>为例，<code>0x12</code>代表该 tag 为script data，<code>00 12 A9</code>代表该 tag 的 DataSize 为 681 byte，<code>00 00 00</code>代表该 tag 的 TimeStamp 为 0，<code>00</code>代表该 tag 的 TimeStampExtended 为 0，StreamID 总是 0，接下来的 681 byte 为script data 的内容。</p>

<p>播放过程中，FLV tag的时间信息完全依赖于 FLV 时间戳，内置的其他时间信息都被忽略掉。</p>

<h3 id="audio-tags">Audio tags</h3>

<h3 id="video-tags">Video tags</h3>

<p>Video Tag 与 SWF 文件格式中的 VideoFrame Tag 类似，它们的 Payload 数据是同一的。关于 SWF 文件格式的介绍，请看<a href="www.adobe.com/go/swf_file_format">SWF(File Format Specification)</a>。</p>

<p>以<code>09 00 00 2D 00 00 00 00 00 00 00 17 00 00 00 00 01 4D 40 1F FF E1 00 19 67 4D 40 ……</code>为例，<code>09</code>表示 Tag Type 为 Video Tag;<code>00 00 2D</code>表示 DataSize 为 45；<code>00 00 00</code>表示 Timestamp 为 0；<code>00</code>表示 TimestampExtended 为 0；<code>00 00 00</code>表示 StreamID 为 0；<code>17</code>中的 8 bit，其中前 4 bit<code>1</code>表示 FrameType 为 keyframe,后 4 bit<code>7</code>表示 CodecID 为 AVC；之后的 45 byte 为 VideoData;</p>

<h3 id="video-data">Video Data</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Field</th>
      <th style="text-align: center">Type</th>
      <th style="text-align: center">Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">FrameType</td>
      <td style="text-align: center">UB[4]</td>
      <td style="text-align: center">1.keyframe(for AVC, a seekable frame) 2.inter frame(for AVC, a non-seekable frame) 3.disposable inter frame(H.263 only) 4.generated keyframe(reserved for serve use only) 5.video info/command frame</td>
    </tr>
    <tr>
      <td style="text-align: center">CodeID</td>
      <td style="text-align: center">UB[4]</td>
      <td style="text-align: center">1:JPEG(currently unused) 2:Sorenson H.263 3:Screen video 4:On2 VP6 5:On2 VP6 with alpha channel 6:Screen video version 2 7:AVC</td>
    </tr>
    <tr>
      <td style="text-align: center">VideoData</td>
      <td style="text-align: center">if CodecID == 7 AVCVIDEOPACKET</td>
      <td style="text-align: center">Video frame payload or UI8(see note following table)</td>
    </tr>
  </tbody>
</table>

<p>如果 FrameType = 5,此时的 VideoData 含义如下：</p>

<ul>
  <li>0 = Start of client-side seeking video frame sequence</li>
  <li>1 = End of client-side seeking video frame sequence</li>
</ul>

<h3 id="avcvideopacket">AVCVIDEOPACKET</h3>

<p>AVCVIDEOPACKET 携带一个AVC video data。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Field</th>
      <th style="text-align: center">Type</th>
      <th style="text-align: center">Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">AVCPacketType</td>
      <td style="text-align: center">UI8</td>
      <td style="text-align: center">0:AVC sequence header 1:AVC NALU 2:AVC end of sequence</td>
    </tr>
    <tr>
      <td style="text-align: center">CompositionTime</td>
      <td style="text-align: center">SI24</td>
      <td style="text-align: center">if AVCPacketType == 1 CompositionTime offset else 0</td>
    </tr>
    <tr>
      <td style="text-align: center">Data</td>
      <td style="text-align: center">UI8[n]</td>
      <td style="text-align: center">if AVCPacketType == 0 AVCDecoderConfigurationRecord else if AVCPacketType == 1 one or more NALUs</td>
    </tr>
  </tbody>
</table>

<h3 id="onmetadata">onMetaData</h3>
<ul>
  <li>duration : 一个 DOUBLE 指定了整个文件的总时长，单位 seconds</li>
  <li>width : 一个 DOUBLE 指定了视频的宽，单位 pixel</li>
  <li>height : 一个 DOUBLE 指定了视频的高,danwei pixel</li>
  <li>videodatarate : 一个DOUBLE 指定了 video bit rate，单位 kilobits per second</li>
  <li>framerate : 一个DOUBLE 指定了每秒的 frame 数</li>
  <li>videocodeid : 一个DOUBLE 指定了 video codec ID</li>
  <li>audiosamplerate : 一个 DOUBLE 指定了音频采样的分辨率</li>
  <li>stereo : 一个 BOOL 指定了data 是否是stereo</li>
  <li>filesize : 一个 DOUBLE 指定了文件的总大小，单位 byte.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RTMP协议学习（中）：源码分析]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/20/lib-trmp-source-code-study/"/>
    <updated>2016-07-20T17:03:14-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/20/lib-trmp-source-code-study</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">大致流程</a></li>
  <li><a href="#initsocket" id="markdown-toc-initsocket">InitSocket()</a></li>
  <li><a href="#rtmpinitstruct-rtmp" id="markdown-toc-rtmpinitstruct-rtmp">RTMP_Init(Struct RTMP)</a></li>
  <li><a href="#rtmpparseurl" id="markdown-toc-rtmpparseurl">RTMP_ParseURL</a></li>
  <li><a href="#rtmpsetupstream" id="markdown-toc-rtmpsetupstream">RTMP_SetupStream</a></li>
  <li><a href="#fopen" id="markdown-toc-fopen">fopen</a></li>
  <li><a href="#rtmpconnect" id="markdown-toc-rtmpconnect">RTMP_Connect()</a></li>
  <li><a href="#rtmpconnectstream" id="markdown-toc-rtmpconnectstream">RTMP_ConnectStream</a></li>
  <li><a href="#download" id="markdown-toc-download">Download</a></li>
  <li><a href="#cleanuprtmpclosertmp-fclosefile-cleanupsockets" id="markdown-toc-cleanuprtmpclosertmp-fclosefile-cleanupsockets">CleanUp:RTMP_Close(&amp;rtmp); fclose(file); CleanupSockets();</a></li>
</ul>

<p>了解了 RTMP 协议规范后，本文主要记录下 RTMPDump 源码的学习过程。
<!--more--></p>

<h3 id="section">大致流程</h3>

<p>使用RTMP下载流媒体的主要流程包括以下几个步骤：</p>

<ul>
  <li>InitSocket()</li>
  <li>RTMP_Init(Struct RTMP)</li>
  <li>RTMP_ParseURL</li>
  <li>RTMP_SetupStream</li>
  <li>fopen</li>
  <li>RTMP_Connect()</li>
  <li>RTMP_ConnectStream</li>
  <li>Download</li>
  <li>CleanUp:RTMP_Close(&amp;rtmp); fclose(file); CleanupSockets();</li>
</ul>

<p>下面逐个记录各个步骤的功能。
在了解具体步骤之前，先了解结构重要的Structure:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">RTMP</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_inChunkSize</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_outChunkSize</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_nBWCheckCounter</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_nBytesIn</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_nBytesInSent</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_nBufferMS</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_stream_id</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_mediaChannel</span><span class="p">;</span>
</span><span class="line">    <span class="kt">uint32_t</span> <span class="n">m_mediaStamp</span><span class="p">;</span>
</span><span class="line">    <span class="kt">uint32_t</span> <span class="n">m_pauseStamp</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_pausing</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_nServerBW</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_nClientBW</span><span class="p">;</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="n">m_nClientBW2</span><span class="p">;</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="n">m_bPlaying</span><span class="p">;</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="n">m_bSendEncoding</span><span class="p">;</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="n">m_bSendCounter</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">m_numInvokes</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">m_numCalls</span><span class="p">;</span>
</span><span class="line">    <span class="n">RTMP_METHOD</span> <span class="o">*</span><span class="n">m_methodCalls</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="initsocket">InitSocket()</h3>

<p>初始化 Socket ,代码非常简单。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int InitSockets()
</span><span class="line">{
</span><span class="line">#ifdef WIN32
</span><span class="line">    WORD version;
</span><span class="line">    WSADATA wsaData;
</span><span class="line">
</span><span class="line">    version MAKEWORD(1, 1);       
</span><span class="line">    return (WSASTartup(version, &amp;wsaData) == 1);
</span><span class="line">#else
</span><span class="line">    return TRUE;
</span><span class="line">#endif
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<h3 id="rtmpinitstruct-rtmp">RTMP_Init(Struct RTMP)</h3>

<p>初始化 RTMP 结构体。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">void RTMP_Init(RTMP *r)
</span><span class="line">{
</span><span class="line">#ifdef CRYPTO
</span><span class="line">    if(!RTMP_TLS_cts)
</span><span class="line">        RTMP_TLS_Init();
</span><span class="line">#endif
</span><span class="line">
</span><span class="line">    memset(r, 0, sizeof(RTMP));
</span><span class="line">    r-&gt;m_sb.sb_socket = -1;
</span><span class="line">    r-&gt;m_inChunkSize  = RTMP_DEFAULT_CHUNKSIZE;
</span><span class="line">    r-&gt;m_outChunkSize = RTMP_DEFAULT_CHUNKSIZE;
</span><span class="line">    r-&gt;m_nBufferMS    = 30000;
</span><span class="line">    r-&gt;m_nClientBW    = 2500000;
</span><span class="line">    r-&gt;m_nClientBW2   = 2;
</span><span class="line">    r-&gt;m_nServerBW    = 2500000;
</span><span class="line">    r-&gt;m_fAudioCodecs = 3191.0;
</span><span class="line">    r-&gt;m_fVideoCodecs = 252.0;
</span><span class="line">    r-&gt;Link.timeout   = 20;
</span><span class="line">    r-&gt;Link.swfAge    = 30;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<h3 id="rtmpparseurl">RTMP_ParseURL</h3>

<p>URL 一般由三部分组成: 资源类型、存放资源的主机域名、资源文件名。
语法格式为([]为可选项):protocol://hostname[:port]/path/[:parameters][?query]#fragment
protocol(协议名称)、hostname(主机名)、port(端口号)、path(路径)、parameters(参数)。</p>

<p>RTMP_ParseURL函数定义:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int RTMP_ParseURL(const char *url, int *protocol, AVal *host, unsigned int *port, AVal *playpath, AVal *app);</span></code></pre></td></tr></table></div></figure>

<p>从函数定义的几个参数可以看出，url 被定位为 const 型，即该参数在函数内部不可改变，而protocol、host、port、palypath、app 则是在函数内部根据url来进行解析，之后进行赋值的。</p>

<h3 id="rtmpsetupstream">RTMP_SetupStream</h3>

<h3 id="fopen">fopen</h3>

<h3 id="rtmpconnect">RTMP_Connect()</h3>

<h3 id="rtmpconnectstream">RTMP_ConnectStream</h3>

<h3 id="download">Download</h3>

<h3 id="cleanuprtmpclosertmp-fclosefile-cleanupsockets">CleanUp:RTMP_Close(&amp;rtmp); fclose(file); CleanupSockets();</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RTMP 协议学习（上）: 协议规范]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/17/rtmp-protocol-standard/"/>
    <updated>2016-07-17T08:17:38-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/17/rtmp-protocol-standard</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">1. 几个概念</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">2.字节序、字节对齐和时间格式</a></li>
  <li><a href="#rtmp-chunk-stream" id="markdown-toc-rtmp-chunk-stream">3. RTMP Chunk Stream</a>    <ul>
      <li><a href="#section-2" id="markdown-toc-section-2">3.1 消息格式</a></li>
      <li><a href="#handshake" id="markdown-toc-handshake">3.2 握手(HandShake)</a>        <ul>
          <li><a href="#section-3" id="markdown-toc-section-3">握手序列:</a></li>
          <li><a href="#c--s-" id="markdown-toc-c--s-">C 和 S 格式：</a></li>
          <li><a href="#handshake-diagram" id="markdown-toc-handshake-diagram">握手框图(HandShake Diagram)</a></li>
        </ul>
      </li>
      <li><a href="#chunking" id="markdown-toc-chunking">3.3 分块(Chunking)</a>        <ul>
          <li><a href="#chunk-" id="markdown-toc-chunk-">Chunk 格式</a>            <ul>
              <li><a href="#chunk-basic-header" id="markdown-toc-chunk-basic-header">Chunk Basic Header</a></li>
              <li><a href="#chunk-message-header" id="markdown-toc-chunk-message-header">Chunk Message Header</a></li>
              <li><a href="#extended-timestamp" id="markdown-toc-extended-timestamp">Extended Timestamp</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#protocol-control-message" id="markdown-toc-protocol-control-message">3.4 协议控制消息(Protocol Control Message)</a>        <ul>
          <li><a href="#set-chunk-size-1" id="markdown-toc-set-chunk-size-1">设置块大小1(Set Chunk Size 1)</a></li>
          <li><a href="#acknowledgement-3" id="markdown-toc-acknowledgement-3">确认消息3(Acknowledgement 3)</a></li>
          <li><a href="#window-acknowledgement-size-5" id="markdown-toc-window-acknowledgement-size-5">视窗大小确认5(Window Acknowledgement Size 5)</a></li>
          <li><a href="#set-peer-bandwidth-6" id="markdown-toc-set-peer-bandwidth-6">设置对等带宽6(Set Peer BandWidth 6)</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#rtmprtmp-message-formats" id="markdown-toc-rtmprtmp-message-formats">4. RTMP消息格式(RTMP Message Formats)</a>    <ul>
      <li><a href="#rtmprtmp-message-format" id="markdown-toc-rtmprtmp-message-format">4.1 RTMP消息格式(RTMP Message Format)</a>        <ul>
          <li><a href="#message-header" id="markdown-toc-message-header">消息头部(Message Header)</a></li>
          <li><a href="#message-payload" id="markdown-toc-message-payload">消息负载(Message Payload)</a></li>
        </ul>
      </li>
      <li><a href="#section-4" id="markdown-toc-section-4">4.2 使用控制消息(4)</a></li>
    </ul>
  </li>
  <li><a href="#rtmprtmp-command-message" id="markdown-toc-rtmprtmp-command-message">5. RTMP指令消息(RTMP Command Message)</a>    <ul>
      <li><a href="#types-of-message" id="markdown-toc-types-of-message">5.1 消息类型(Types of Message)</a></li>
      <li><a href="#types-of-commands" id="markdown-toc-types-of-commands">5.2 指令类型(Types of Commands)</a></li>
    </ul>
  </li>
  <li><a href="#section-5" id="markdown-toc-section-5">6. 参考文献</a></li>
</ul>

<p><a href="https://en.wikipedia.org/wiki/Real-Time_Messaging_Protocol">RTMP</a>(Real Time Messaging Protocol) 即实时消息传输协议，它是 Adobe 公司开发的，并且提供了官方的<a href="https://www.adobe.com/devnet/rtmp.html">文档</a>。Adobe 公司提供的RTMP协议是基于可靠传输协议(如TCP)，提供双向的信息多元化服务,其目的是在两个通信节点间传输带有时间信息的音视频并发流。其实现会针对不同的消息种类分配不同的优先级，当传输能力有限时，这就会影响流传输的排队顺序。
<!--more--></p>

<h3 id="section">1. 几个概念</h3>
<ul>
  <li>负载(Payload): 分组中包含的数据，比如音频采样数据和视频压缩数据。</li>
  <li>分组(Packet): 数据分组由固定头部和负载组成的。对于底层协议，可能需要定义分组的封装。</li>
  <li>端口(Port): 用于区分不同的目标抽象，一般用整数表示，如TCP/IP中的端口号。</li>
  <li>传输地址(Transport address): 网络地址和端口号的组合,用于标识一个传输层的端口。如IP地址+TCP端口号。</li>
  <li>消息流(Message stream): 允许消息流动的逻辑上的通讯通道。</li>
  <li>消息流ID(Message stream ID): 每隔消息都有与之关联的ID号，用于与其他消息流作区分。</li>
  <li>块(Chunk): 一个消息片段。消息被放到网络上传输之前被切分成小的片段并被交错存取。分块确保跨流的所有消息按时间戳顺序被不断的传输。</li>
  <li>块流(Chunk stream):</li>
  <li>块流ID(Chunk stream ID): 每个块所关联的用于区分其他块流的ID。</li>
  <li>复用(Multiplexing): 将音视频数据整合到一个数据流内,使得多个音视频数据流可以同步传输.</li>
  <li>解复用(DeMultimplexing): 复用的反过程,交互的音视频数据被分成原始的音频数据和视频数据。</li>
  <li>远程过程调用(Remote Procedure Call(RPC)):</li>
  <li>元数据(Metadata): 数据的一个简单描述。如一部电影的电影名、时长、制作时间等等.</li>
  <li>应用Instance（Application Instance): 对于服务器端的应用Instance，客户端就是通过连接该Instance来发送请求的.</li>
  <li>Action Message Format(AMF):</li>
</ul>

<h3 id="section-1">2.字节序、字节对齐和时间格式</h3>
<p>所有完整的字段都是按照网络字节序被承载的。即零字节是第一个字节，bit 0 是一个字段中的最高有效位。即所谓的大端。
如无特殊说明，RTMP 中的所有字段都是字节对齐的。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#define ALIGN_16bit(value) (((value + 15) &gt;&gt; 4) &lt;&lt; 4)
</span><span class="line">#define ALIGN_32bit(value) (((value + 31) &gt;&gt; 5) &lt;&lt; 5)
</span><span class="line">#define ALIGN_64bit(value) (((value + 63) &gt;&gt; 6) &lt;&lt; 6)</span></code></pre></td></tr></table></div></figure>
<p>RTMP 中的时间戳用整数来表示，它是以毫秒为单位的相对时间。典型的，码流中都是从时间戳为0开始的，但这不是必须的，只要通讯双方用统一的时间即可。注意，这就要求任何跨流的同步都需要 RTMP 外的额外机制。</p>

<h3 id="rtmp-chunk-stream">3. RTMP Chunk Stream</h3>

<h4 id="section-2">3.1 消息格式</h4>

<p>根据上层协议，消息格式可以被分成多个块以支持复用。消息格式应包含如下字段，这对于创建块是必须的:</p>

<ol>
  <li>时间戳(TimeStamp)：消息的时间戳，占 4 个字节。</li>
  <li>长度(Length): 消息的长度，包含头部。占头部中的3 个字节。</li>
  <li>类型Id(Type Id): 消息的类型 Id,占 1 个字节。</li>
  <li>消息流ID（Message Stream ID）:  每个消息的唯一标识，划分成 Chunk 和还原 Chunk 为 Message 时，
都是根据这个 ID 来辨识是否是同一个消息的 Chunk 的，占 4 个字节，并且以小端格式存储。</li>
</ol>

<h4 id="handshake">3.2 握手(HandShake)</h4>

<p>RTMP 协议开始于握手，这里的握手不同于其他协议的握手，它是由 3 个固定大小的块组成，而不是带有头部的可变大小的块。
客户端和服务器端都会发送 3 个固定大小的块。客户端发送的称为 C0/C1/C2，服务器端发送的称为S0/S1/S2。</p>

<h5 id="section-3">握手序列:</h5>

<p>首先，握手必须是由客户端发送C0/C1开始的。 <br />
其次，客户端必须接收到服务器端发送的S1后才能发送C2, 必须接收到服务器端发送的S2后才能发送其他数据。 <br />
再次，服务器端必须等到客户端发送的C0后才能发送S0和S1,也可等到接收到C1后再发送。 <br />
同样，服务器端必须等到客户端发送的C1后才能发送S1,必须等到客户端发送的C2后才能发送其他数据。</p>

<h5 id="c--s-">C 和 S 格式：</h5>

<p>C0 和 S0 是一个8-bit的整数字段： <br />
C1 和 S1 是一个1536 byte 的序列，其中 4 byte 是表示时间，4 byte 全部填0，剩余部分填写其他值。 <br />
C2 和 S2 是对 C1 和 S1 的一个对等。</p>

<h5 id="handshake-diagram">握手框图(HandShake Diagram)</h5>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/HandShake_Diagram.png" /></p>

<hr />

<p>对上面的框图进行简单说明如下：</p>

<p>未初始化阶段(Uninitialized):协议版本会在该阶段发送。客户端和服务器端都处于未初始化阶段。客户端在 C0 包里发送协议版本，如果服务器端支持该协议，就会发送 S0 和 S1 作为反馈，如果不支持，就会终止连接。 <br />
版本发送阶段(Version Sent): Uninitialized 阶段后，客户端和服务器端都会进入 Version Sent 阶段。客户端等待服务器端发送的 S1 包，服务器端等待客户端发送的 C1 包。一旦等到回应后，客户端会发送 C2 包、服务器端会发送 S2 包。之后进入 Ack Sent 阶段。    <br />
确认阶段(ACK Sent):客户端和服务器端分别等待 S2 和 C2.    <br />
握手结束(Handshake Done):客户端和服务器端交换消息.</p>

<h4 id="chunking">3.3 分块(Chunking)</h4>

<p>握手后，连接就会多路传输一个或多个 chunk streams。每个 chunk stream 携带来自一个消息流的一种类型的消息。每个 chunk stream 有一个独立的 chunk stream ID。
chunk 通过网络传输，传输过程中，每个 chunk 必须在下一个 chunk 前传输完成。接收端会根据 chunk stream ID 将 chunks 组合进消息。</p>

<p>Chunk size 是可配置的。它可以使用一个控制消息来设置 chunk size。size 较大的chunk 降低 CPU 的使用，size 较小的 chunk 不适用于高比特流的码流。chunk size 的维护是双向独立的。</p>

<h5 id="chunk-">Chunk 格式</h5>

<p>每个 Chunk 包含一个 header 和 data 部分。Header 又包含：<code>Basic Header</code><code>Message Header</code><code>Extended Timestamp</code>三部分。</p>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/chunk_format.png" /></p>

<ul>
  <li>Basize Header : 1 到 3 byte,该字段编码了 chunk stream ID 和 chunk type。其中 chunk type 决定了编码的message header 的格式。它的长度完全由 chunk stream ID 来决定，它是一个变长字段。</li>
  <li>Message Header : (0/3/7/11 byte)，该地段编码了关于发送的消息的信息。它的长度同样由 chunk header 里面的chunk type 指定。</li>
  <li>Extended Timestamp : (0/4 byte)，该字段是否出现取决于 chunk message header 里面的 timestamp 或 timestamp delta 字段。</li>
  <li>Chunk Data : 可变大小，chunk 的负载，最大值为配置的最大 chunk size。</li>
</ul>

<h6 id="chunk-basic-header">Chunk Basic Header</h6>

<p>Chunk Basic Header 编码了chunk stream ID 和 chunk type(由 fmt 字段表示)。Chunk Basic Header 字段可能是0-3 byte，取决于 chunk stream ID。实现应该使用最小的size。<br />
协议支持最大 65597 streams，对应的 ID 为 3-65599。值为 0/1/2 的 ID 保留。</p>

<h6 id="chunk-message-header">Chunk Message Header</h6>

<p>根据 chunk basic header 里的<code>fmt</code>字段的不同，chunk message header 有 4 种不同的格式。</p>

<ul>
  <li>Type 0</li>
</ul>

<p>Type 0 的 chunk header 是 11 byte 长。该类型只能在 chunk 流的开始使用。</p>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/chunk_message_header_type0.png" /></p>

<p><code>timestamp</code>3 字节，对于 type 0 的 chunk,timestamp 的消息在此处发送。如果timestamp 大于或等于0xFFFFFF,该字段等于0XFFFFFF,指明extended timestamp字段被编码。</p>

<ul>
  <li>Type 1</li>
</ul>

<p>Type 1 的 chunk header 是7 byte 长，不包含 message stream ID，该 chunk 与上一个 chunk 有相同的 stream ID。变长消息的 stream 在第一个消息后，应该使用该格式作为第一个 chunk。</p>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/chunk_message_header_type1.png" /></p>

<ul>
  <li>Type 2</li>
</ul>

<p>Type 2 的 chunk header 是 3 byte 长，既不包含 stream ID，也不包含 message length，它与前一个 chunk 有相同的 stream ID 和 消息长度。固定大小的流应该使用这种格式。</p>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/chunk_message_header_type2.png" /></p>

<ul>
  <li>Type 3</li>
</ul>

<p>Type 3 chunk 没有 message header，stream ID 和 消息长度以及 timestamp delta 字段都未出现，该类型的 chunk 与之前的 chunk 有相同的 chunk stream ID。
当一个单独的消息被分成不同的 chunk 时，该消息的所有 chunks 处理第一个都应该使用该类型。</p>

<ul>
  <li>共用 Header 字段</li>
</ul>

<p><code>timestamp delta</code>（3 字节）：对于type是1或2的chunk来说，该字段表示上一个chunk的timestamp和当前chunk的timestamp的差值。如果该字段值
大于等于0XFFFFFF,该字段值必须为0XFFFFFF，表示Extended Timestamp字段被编码；否则表示实际的差值。<br />
<code>message length</code>（3 字节）：对于type是0或1的chunk来说，消息的长度由此字段传送。注意它与chunk负载的长度不同。chunk负载的长度是对除最后一个chunk外的所有chunk的最大size。<br />
<code>message type id</code>（1 字节）：对于type是0或1的chunk，消息的类型由该字段传送。<br />
<code>message stream id</code>（4 字节）：对于type是0的chunk，message stream ID由该字段传送。</p>

<h6 id="extended-timestamp">Extended Timestamp</h6>

<p>上面我们提到在chunk中会有时间戳timestamp和时间戳差timestamp delta，并且它们不会同时存在，只有这两者之一大于3个字节能表示的最大数值0xFFFFFF＝16777215时，才会用这个字段来表示真正的时间戳，否则这个字段为0。扩展时间戳占4个字节，能表示的最大数值就是0xFFFFFFFF＝4294967295。当扩展时间戳启用时，timestamp字段或者timestamp delta要全置为1，表示应该去扩展时间戳字段来提取真正的时间戳或者时间戳差。注意扩展时间戳存储的是完整值，而不是减去时间戳或者时间戳差的值。</p>

<h4 id="protocol-control-message">3.4 协议控制消息(Protocol Control Message)</h4>

<p>RTMP 块流使用消息类型ID为1/2/3/5/6的消息作为协议控制消息，这些消息中包含了 RTMP 块流协议所需要的信息。这些协议控制消息的消息流ID必须
为0（控制流），而他们的块流ID必须为2。协议控制消息一旦接受即刻生效，它们的时间戳会被忽略。</p>

<h5 id="set-chunk-size-1">设置块大小1(Set Chunk Size 1)</h5>

<p>协议控制消息1，设置块大小，用于通知另一端最大块大小。默认的最大块大小为 128 字节，但客户端和服务器端可以使用该消息来更新最大块大小的值到对端。
例如，假设客户端想要发送 131 字节的音频数据，而最大块大小为 128，此时客户端会发送消息到服务端并通知它，当前最大块为 131 字节。此时客户端
只用一个块即可发送这些音频数据。</p>

<p>最大块大小通常不会小于 128 字节，最小不能小于1 字节。最大块大小是双向独立的。</p>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/set_chunk_size.png" /></p>

<p>0:该 bit 必须为0.<br />
块大小(chunk size)：该字段以字节形式保存新的最大块大小，该值将用于后续所有发送块。取值范围为1——2147483647（0X7FFFFFFF）,然而所有大于0XFFFFFF的值都是等同的。</p>

<h5 id="acknowledgement-3">确认消息3(Acknowledgement 3)</h5>

<p>协议控制消息2，终止消息，被用于通知对端，可以丢弃通过指定块流接收到的部分数据.</p>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/abort_message.png" /></p>

<p>块流ID(32bit)：该字段表示块流ID，它的当前消息可被丢弃。</p>

<h5 id="window-acknowledgement-size-5">视窗大小确认5(Window Acknowledgement Size 5)</h5>

<p>在接受到与窗口大小相等的消息后，客户端或服务端必须发送一个确认消息给对端。窗口大小是发送端发送的最大字节数，无论有没有收到接收端发送的确认消息。该消息指明序列号，代表目前为止接收到的字节数。</p>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/acknowledgement.png" /></p>

<p>序列号(32bit)：该字段表示目前为止已接收到字节总数。</p>

<h5 id="set-peer-bandwidth-6">设置对等带宽6(Set Peer BandWidth 6)</h5>

<p>客户端或服务端发送该消息来限制对端的输出带宽。接收端收到消息后，通过将已发送但尚未被确认的数据总数限制为该消息指定的视窗大小，来
实现限制输出带宽的目的。如果视窗大小与上一个视窗大小不同，则该消息的接收端应该向该消息的发送端发送视窗大小确认消息。</p>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/set_peer_bandwidth.png" /></p>

<p>Limit Type(显示类型)有以下可选值：</p>

<ul>
  <li>0-Hard：消息接收端应该将输出带宽限制为指定视窗大小。</li>
  <li>1-Soft:消息接收端应该将输出带宽限制为指定视窗大小和当前视窗大小中较小值。</li>
  <li>2-Dynamic：如果上一个消息的限制类型为Hard,则该消息同样为 Hard，否则抛弃该消息。</li>
</ul>

<h3 id="rtmprtmp-message-formats">4. RTMP消息格式(RTMP Message Formats)</h3>

<p>本部分描述 RTMP 消息遵循底层协议在网络中断之间传输时的消息格式。</p>

<p>尽管 RTMP 被设计成使用 RTMP 块流传输，但它可以使用其他传输协议来发送消息。RTMP 块流和 RTMP 非常适合
音视频应用，包括单播、一对多实时直播、视频点播和视频会议等。</p>

<h4 id="rtmprtmp-message-format">4.1 RTMP消息格式(RTMP Message Format)</h4>

<p>服务端和客户端通过网络发送 RTMP 消息来进行通讯，消息包好视频、音频、数据和其他信息。RTMP 消息包含两部分：头部和负载。</p>

<h5 id="message-header">消息头部(Message Header)</h5>

<p>消息头部包含：消息类型、长度、时间戳和消息流ID.</p>

<ul>
  <li>消息类型(Message Type)：1 字节字段代表消息类型。类型ID(1-6)是为协议控制消息保留的。</li>
  <li>长度(Length)：3 字节字段代表负载的大小，字节为单位，大端格式。</li>
  <li>时间戳(Timestamp):4 字节字段代表消息的时间戳。同样为大端格式。</li>
</ul>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/message_header.png" /></p>

<h5 id="message-payload">消息负载(Message Payload)</h5>

<p>消息头部后面的是消息的负载，它是消息内真实的数据。例如，它可能是某些音频样本或压缩的视频数据。</p>

<h4 id="section-4">4.2 使用控制消息(4)</h4>

<p>RTMP 协议将消息类型 4 作为用户层控制消息 ID。该消息包含了 RTMP 流所需要的信息。消息类型 ID 为
1、2、3、5 和 6的协议消息被用作 RTMP 块流协议。</p>

<p>用户控制消息应该使用 ID 为 0 的消息流(即控制流)，并且通过 RTMP 块流传输时使用 ID 为 2 的块流。
用户控制消息收到后立即生效，它们的时间戳信息会被忽略。</p>

<p>客户端或服务端通过发送该消息告知对方用户控制事件。该消息携带事件类型和事件数据两部分。</p>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/user_control_message.png" /></p>

<p>消息数据的前 2 字节用于指定事件类型，紧跟着的是事件数据。事件数据字段长度可变。但如果使用 RTMP 块
流传输，则消息总长度不能超过最大块大小，以使消息可以使用一个单独的块进行传输。</p>

<h3 id="rtmprtmp-command-message">5. RTMP指令消息(RTMP Command Message)</h3>

<p>本部分描述了用于服务端和客户端通讯用到的消息类型和命令类型。</p>

<p>服务端和客户端通过交换不同的消息类型来传送不同的消息：音频消息传送音频数据、视频消息传送视频数据、数据消息传送用户数据、共享对象消息和指令消息等。共享对象消息为管理分布与不同客户端和相同服务器的功效数据提供了规范途径。指令消息携带客户端与服务端之间的 AMF 编码指令，客户端或服务端也可以通过指令消息来实现远程过程调用(RPC)。</p>

<h4 id="types-of-message">5.1 消息类型(Types of Message)</h4>

<p>服务端和客户端双方通过网络发送消息进行通信。消息可以是任意类型，包括音频消息、视频消息、命令消息、共享对象消息、数据消息和用户控制消息。</p>

<ul>
  <li>
    <p>命令消息(Command Message, Message Type ID = 17或20)<br />
命令消息携带<code>AMF</code>编码的命令用于客户端和服务器端的传递。如果消息采用AMF0编码，它的 Message Type ID = 20;如果消息采用AMF3编码，它的 Message Type ID=17。命令消息大致可分为两类：用于通知对方执行某些操作的消息，比如connect、createStream、publish、play、pause等;用于通知发送方请求命令状态的消息，比如onstatus、result等。
一个命令消息包含如下：command name、transaction ID以及包含相关参数的command object。</p>
  </li>
  <li>
    <p>数据消息(Data Message, Message Type ID = 18或15)<br />
客户端或服务端利用数据消息发送Metadata或其他用户数据给对端。Metadata 包含关于数据(例如音频或视频等)的一些描述，比如创建时间、持续时长、标题等。当消息采用AMF0编码时，其 Message Type ID=18;当消息采用AMF3编码时，其 Message Type ID=15。</p>
  </li>
  <li>
    <p>共享消息(Shared Object Message Type ID = 19或16)<br />
共享消息是一个 Flash 类型的对象，由键值对的集合组成，用于多客户端，多实例时使用。当消息使用AMF0编码时，Message Type ID = 19;当消息使用AMF3编码时，Message Type ID = 16。每个消息可以包含如下多个事件。</p>
  </li>
</ul>

<p><img src="http://lazybing.github.io/images/RTMPProtocol/shared_object_message_format.png" /></p>

<p>RTMP 协议支持如下事件类型：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Event</th>
      <th style="text-align: center">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Use(=1)</td>
      <td style="text-align: center">客户端发送该事件通知服务端创建共享对象</td>
    </tr>
    <tr>
      <td style="text-align: center">Release(=2)</td>
      <td style="text-align: center">当共享对象在客户端侧删除时，客户端发送该事件到服务端</td>
    </tr>
    <tr>
      <td style="text-align: center">Request Change(=3)</td>
      <td style="text-align: center">客户端发送该事件到服务端请求更改共享对象的某个给定参数名的值</td>
    </tr>
    <tr>
      <td style="text-align: center">Change(=4)</td>
      <td style="text-align: center">服务端发送该事件来通知所有客户端，更改某个给定参数名的参数值</td>
    </tr>
    <tr>
      <td style="text-align: center">Success(=5)</td>
      <td style="text-align: center">如果客户端发送的请求被服务端接受，服务端会发送该事件给到请求的客户端，最为请求的回应</td>
    </tr>
    <tr>
      <td style="text-align: center">SendMessage(=6)</td>
      <td style="text-align: center">客户端向服务端发送该事件，用于广播一个消息。接收到该事件后，服务端广播一条消息到所有的客户端，包括发送的客户端</td>
    </tr>
    <tr>
      <td style="text-align: center">Status(=7)</td>
      <td style="text-align: center">服务端发送一个事件通知客户端关于error condictions</td>
    </tr>
    <tr>
      <td style="text-align: center">Clear(=8)</td>
      <td style="text-align: center">服务端发送该事件到客户端，用于清除一个共享对象。服务端同样会发送该事件用于回应客户端发送的Use事件</td>
    </tr>
    <tr>
      <td style="text-align: center">Remove(=9)</td>
      <td style="text-align: center">服务端发送该事件请求客户端删除一个slot</td>
    </tr>
    <tr>
      <td style="text-align: center">Request Remove(=10)</td>
      <td style="text-align: center">客户端发送该事件请求客户端删除一个slot</td>
    </tr>
    <tr>
      <td style="text-align: center">Use Success(=11)</td>
      <td style="text-align: center">服务端发送该事件通知客户端建立成功</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>音频消息(Audio Message, Message Type ID = 8)<br />
客户端或服务端发送该消息用于发送音频数据给对端。</p>
  </li>
  <li>
    <p>视频消息(Video Message, Message Type ID = 9)
客户端或服务端发送该消息用于发送视频数据给对端。</p>
  </li>
  <li>
    <p>用户控制消息事件(User Control Message Event)
客户端或服务端发送该消息来通知对端关于用户控制事件。RTMP 支持如下的用户控制事件类型：</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Event</th>
      <th style="text-align: center">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Stream Begin(=0)</td>
      <td style="text-align: center">服务端发送该事件通知客户端，流功能已经完成，可以用于通信。默认情况下，应用连接命令成功接收到后，该事件的ID会被设置为0。事件数据为4字节</td>
    </tr>
    <tr>
      <td style="text-align: center">Stream EOF(=1)</td>
      <td style="text-align: center">服务端发送该事件通知客户端，数据的播放已经结束。</td>
    </tr>
    <tr>
      <td style="text-align: center">StreamDry(=2)</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">SetBuffer Lenght(=3)</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">StreamIsRecorded(=4)</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">PingRequest(=6)</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">PingResponse(=7)</td>
      <td style="text-align: center"> </td>
    </tr>
  </tbody>
</table>

<ul>
  <li>聚集消息(Aggregate Message, Messaget Type ID=22)</li>
</ul>

<h4 id="types-of-commands">5.2 指令类型(Types of Commands)</h4>

<h3 id="section-5">6. 参考文献</h3>

<p>1.<a href="http://mingyangshang.github.io/2016/03/06/RTMP%E5%8D%8F%E8%AE%AE/">带你吃透RTMP</a><br />
2.<a href="https://www.gitbook.com/book/chenlichao/rtmp-zh_cn/details">RTMP协议规范中文版</a><br />
3.<a href="http://wwwimages.adobe.com/content/dam/Adobe/en/devnet/rtmp/pdf/rtmp_specification_1.0.pdf">RTMP官方协议英文版</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将vim打造成IDE]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/07/how-to-use-vim/"/>
    <updated>2016-07-07T08:17:10-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/07/how-to-use-vim</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#mac-osx--gvim" id="markdown-toc-mac-osx--gvim">Mac OSX 下安装 gvim</a></li>
  <li><a href="#section" id="markdown-toc-section">基本设置</a></li>
  <li><a href="#vim-" id="markdown-toc-vim-">vim 对单个字符的操作</a>    <ul>
      <li><a href="#section-1" id="markdown-toc-section-1">删除某个字符</a></li>
      <li><a href="#section-2" id="markdown-toc-section-2">替换某个字符</a></li>
      <li><a href="#section-3" id="markdown-toc-section-3">移动到某个字符</a></li>
    </ul>
  </li>
  <li><a href="#vim--1" id="markdown-toc-vim--1">vim 对单字的操作</a>    <ul>
      <li><a href="#section-4" id="markdown-toc-section-4">删除某个单字</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">修改某个单字</a></li>
      <li><a href="#section-6" id="markdown-toc-section-6">移动到某个单字</a></li>
    </ul>
  </li>
  <li><a href="#vim--2" id="markdown-toc-vim--2">vim 对整行的操作</a>    <ul>
      <li><a href="#section-7" id="markdown-toc-section-7">移动到行首或行尾</a></li>
      <li><a href="#section-8" id="markdown-toc-section-8">移动到指定行</a></li>
      <li><a href="#section-9" id="markdown-toc-section-9">使用标签记录并跳转到某行</a></li>
    </ul>
  </li>
  <li><a href="#vim--3" id="markdown-toc-vim--3">vim 对单个文件的浏览</a>    <ul>
      <li><a href="#vim--4" id="markdown-toc-vim--4">vim 滚动屏幕命令</a></li>
      <li><a href="#vim--5" id="markdown-toc-vim--5">vim 切分窗口</a></li>
    </ul>
  </li>
  <li><a href="#vim--6" id="markdown-toc-vim--6">vim 对多个文件的操作</a>    <ul>
      <li><a href="#section-10" id="markdown-toc-section-10">工程文件浏览</a></li>
      <li><a href="#section-11" id="markdown-toc-section-11">多文档编辑</a></li>
    </ul>
  </li>
  <li><a href="#vim--7" id="markdown-toc-vim--7">vim 寄存器</a></li>
  <li><a href="#vim--8" id="markdown-toc-vim--8">vim 分屏功能</a></li>
</ul>

<p><code>Vim</code> 是一个学习成本比较高的编辑器。本文主要记录对于编辑浏览代码时，如何配置<code>vim</code>才能更高效的编辑、浏览代码。</p>

<!--more-->

<h2 id="mac-osx--gvim">Mac OSX 下安装 gvim</h2>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install macvim</span></code></pre></td></tr></table></div></figure>

<h2 id="section">基本设置</h2>

<p>配置信息都放到了<code>~/.vimrc</code>文件中：<br />
显示行号，在<code>.vimrc</code>中添加<code>set nu</code>  <br />
开启文件类型侦测, <code>filetype on</code><br />
根据侦测到的不同类型加载对应的插件， <code>filetype plugin on</code><br />
开启实时搜索功能，</p>

<h2 id="vim-">vim 对单个字符的操作</h2>

<blockquote>
  <p>To err is human. To really foul up you need a computer.</p>
</blockquote>

<h3 id="section-1">删除某个字符</h3>

<p>删除字符命令非常简单，就是单个字符<code>x</code>,例如上面的一行code，如果将光标至于<code>really</code>的<code>r</code>处执行<code>x</code>命令，就会将 <code>r</code> 删除。</p>

<h3 id="section-2">替换某个字符</h3>

<p>替换字符的命令<code>rx</code>将光标下的字符 replace 成字符<code>x</code>。如果发现连个相邻的字符颠倒了，可以直接在前一个字符处执行<code>xp</code>命令即可，其中的<code>x</code>时删除光标下的字符，<code>p</code>时黏贴。</p>

<h3 id="section-3">移动到某个字符</h3>

<p><code>fx</code>命令在一行中向前搜索单个字符<code>x</code>。速记：<code>f</code>此处是<code>Find</code>的简写。</p>

<p>例如，你现在处于上面 code 的开头处，假设你想将光标移动到<code>human</code>中的<code>h</code>字符处。此时你只需要简单的执行<code>fh</code>，光标将会跳转到<code>h</code>:</p>

<pre><code>To err is human.  To really foul up you need a computer. ~
----------&gt;---------------&gt;
    fh		 fy
</code></pre>

<p>上面命令也显示了<code>fy</code>移动光标到<code>really</code>的<code>y</code>处。当然，此时你也可以在命令前添加执行次数，可以用<code>3fl</code>命令跳转光标到<code>foult</code>的<code>l</code>处：</p>

<pre><code>To err is human.  To really foul up you need a computer. ~
	  ---------------------&gt;
		   3fl
</code></pre>

<p>与<code>f</code>相对应的<code>F</code>命令会向左搜索：</p>

<pre><code>To err is human.  To really foul up you need a computer. ~
	  &lt;---------------------
		    Fh
</code></pre>

<p>除了<code>fx</code>命令用于搜索一行中的某个特定字符外，还有<code>tx</code>命令，<code>tx</code>命令会停在搜索的字符<code>x</code>前。速记：<code>t</code>时<code>To</code>的简写。与<code>Fx</code>相对应的是<code>Tx</code>。</p>

<pre><code>To err is human.  To really foul up you need a computer. ~
	   &lt;------------  -------------&gt;
		Th		tn
</code></pre>

<p><code>fx</code><code>Fx</code><code>tx</code><code>Tx</code>这四个命令可以用<code>;</code>命令重复，<code>,</code>向相反的方向执行。</p>

<p>上面的移动命令虽然很好用，但有如果一行中存在多个我们想要查找的字符，我们要么人肉看一下搜索的字符位于第几个位置，要么要一直重复执行相同的移动命令。非常影响思维连贯性。例如想要从上面一行的开头找到<code>computer</code>中的<code>o</code>。
此时我们可以借助插件来完成，<code>easymotion</code>即可帮助我们，它会把所有满足条件的位置用[A-Za-z]间的标签字符标出来，找到你想要去的位置再键入对应标签字符即可快速到达。
比如，上面的例子，假设关闭在行首，我只需要键入<Leader><Leader>fo,所有字符a都被重新标记成a、b、c、d等等标签（原始内容不变），直接键入标签字母即可到达需要到达的地方。</Leader></Leader></p>

<h2 id="vim--1">vim 对单字的操作</h2>

<h3 id="section-4">删除某个单字</h3>

<p>删除某个单字非常简单，只需要在单字的开始执行<code>dw</code>即可。速记：<code>d</code>是<code>deleate</code>的简写。</p>

<h3 id="section-5">修改某个单字</h3>

<p>修改某个单字时，只需要在单字的开始执行<code>cxxxxx</code>即可，<code>c</code>是<code>change</code>的简写，<code>xxxxx</code>即代表要修改的单字。</p>

<h3 id="section-6">移动到某个单字</h3>

<p>想要移动光标大下一个单字，使用<code>w</code>命令。跟很多<code>vim</code>命令一样，可以在命令前添加一个执行次数。比如,<code>3w</code>就是移动 3 个单字。下面展示它是如何工作的：</p>

<pre><code>This is a line with example text ~
  ---&gt;--&gt;-&gt;-----------------&gt;
   w  w  w    3w
</code></pre>

<p>注意，<code>w</code>命令会移动到下一个单字的起始处。<br />
<code>b</code>命令向前移动到前一个单字的起始处。</p>

<pre><code>This is a line with example text ~
&lt;----&lt;--&lt;-&lt;---------&lt;---
   b   b b    2b      b
</code></pre>

<p>与<code>w</code><code>b</code>对应的有<code>e</code>和<code>ge</code>命令分别向后和向前移动到单字的末尾：</p>

<pre><code>This is a line with example text ~
   &lt;-   &lt;--- -----&gt;   ----&gt;
   ge    ge     e       e
</code></pre>

<p>如果光标位于一行的最后一个单字，<code>w</code>命令会带你到下一行的第一个单字处。因此你可以使用<code>w</code>命令来在一行中移动。</p>

<h2 id="vim--2">vim 对整行的操作</h2>

<h3 id="section-7">移动到行首或行尾</h3>

<p><code>$</code>命令移动光标到一行的结尾，与<code>&lt;End&gt;</code>键作用相同。<code>^</code>命令移动到一行的第一个非空白字符处。<code>0</code>命令移动到一行的最前面第一个字符处，与<code>&lt;Home&gt;</code>键作用相同。</p>

<pre><code>	  ^
     &lt;------------
.....This is a line with example text ~
&lt;-----------------   ---------------&gt;
	0		   $
</code></pre>

<p>(….指空白符)</p>

<h3 id="section-8">移动到指定行</h3>

<p>C/C++ 程序员应该经常能遇到程序出错时，会有类似如下的提示信息：</p>

<pre><code>prog.c:33: j   undeclared (first use in this function) ~
</code></pre>

<p>这就提示我们该跳转到 33 行 fix 掉错误，此时可以使用<code>G</code>命令：<code>33G</code>即可跳转到 33 行。
另一种方法是在<code>shell</code>命令行下执行<code>:33&lt;Enter&gt;</code>。
上面的两种方法都是假设你想要移动到某个特定的行，而不管该行是否可见。假如你想要移动到屏幕的中间或者起始行时，该如何操作呢？</p>

<pre><code>		+---------------------------+
	H --&gt;	| text sample text	    |
		| sample text		    |
		| text sample text	    |
		| sample text		    |
	M --&gt;	| text sample text	    |
		| sample text		    |
		| text sample text	    |
		| sample text		    |
	L --&gt;	| text sample text	    |
		+---------------------------+
</code></pre>

<p>速记：<code>H</code>是<code>Home</code>的简写，<code>M</code>是<code>Middle</code>的简写，<code>L</code>是<code>Last</code>的简写。</p>

<h3 id="section-9">使用标签记录并跳转到某行</h3>

<p>在介绍标签之前，先了解另外两个命令<code>CTRL-O</code>和<code>CTRL-I</code>，其中<code>CTRL-O</code>是回到之前的位置，<code>CTRL-I</code>是回到下一个位置。例如：</p>

<pre><code>     |	example text   ^	     |
33G  |	example text   |  CTRL-O     | CTRL-I
     |	example text   |	     |
     V	line 33 text   ^	     V
     |	example text   |	     |
   /^The |	example text   |  CTRL-O     | CTRL-I
     V	There you are  |	     V
	example text
</code></pre>

<p>注意：CTRL-I 是和 <Tab> 相同的。</Tab></p>

<p><code>vim</code>可以使你定义自己的标签。命令<code>ma</code>标记当前光标所在的位置。`{mark} 和 ‘{mark}都可以跳回到标签处。不同的是`{mark} 跳回的是光标所在行的原来那一列，’{mark}跳回的是光标所在哪一行的起始位置。</p>

<h2 id="vim--3">vim 对单个文件的浏览</h2>

<h3 id="vim--4">vim 滚动屏幕命令</h3>

<p><code>CTRL-U</code>和<code>CTRL-D</code>命令向上或向下滚动半个屏幕。<br />
<code>CTRL-E</code>和<code>CTRL-Y</code>分别向上和向下滚动一行。<br />
<code>CTRL-F</code>和<code>CTRL-B</code>分别向前和向后滚动整个屏幕。
有时当执行多个<code>j</code>命令时，光标会在屏幕的最底部，此时如果想让光标所在行位于中间位置，可以使用<code>zz</code>命令,<code>zt</code>命令将光标所在行至于顶部，<code>zb</code>命令将光标所在行至于底部。</p>

<h3 id="vim--5">vim 切分窗口</h3>

<p>切分新窗口最简单的命令是<code>:split</code>，该命令可以使我们在两个窗口中查看同一个文件，比如可以使用第一个窗口显示变量声明，另一个窗口展示该变量的使用。
<code>CTRL-W w</code>命令可用于两个窗口间的跳转。垂直切分窗口命令是<code>:vsplitw</code>。窗口直接的切换命令如下：</p>

<pre><code>CTRL-W h	move to the window on the left
CTRL-W j	move to the window below
CTRL-W k	move to the window above
CTRL-W l	move to the window on the right

CTRL-W t	move to the TOP window
CTRL-W b	move to the BOTTOM window
</code></pre>

<h2 id="vim--6">vim 对多个文件的操作</h2>

<h3 id="section-10">工程文件浏览</h3>

<p>在项目工程中，经常要用到插件，此处介绍一个插件<code>NERDTree</code>，通过<code>NERDtree</code>插件可以查看文件列表，要打开哪个文件，
光标选中后回车即可在新<code>buffer</code>中打开。</p>

<p>常用操作：回车，打开选中文件;<code>r</code>刷新工程目录文件列表；<code>I</code>显示/影藏文件；<code>m</code>出现创建/删除/剪切/拷贝操作列表。键入<leader>fl后，右边子窗口为工程项目文件列表。</leader></p>

<h3 id="section-11">多文档编辑</h3>
<p><code>vim</code>的多文档编辑涉及三个概念:buffer、window、tab。vim把加载进内存的文件叫做buffer,buffer不一定可见；
若要buffer可见，则必须通过window作为载体呈现；同个看面上的多个window组合成一个tab。</p>

<p>vim中每打开一个文件，vim就对应的创建一个buffer,多个文件就有多个 buffer, 但默认你只能看到最后buffer对应
window，通过插件<code>MiniBufExplorer</code>可以把所有 buffer 罗列出来，并且可以显示多个 buffer 对应的Window。</p>

<h2 id="vim--7">vim 寄存器</h2>

<p>使用 vim 时，不管是复制、删除或粘贴，在 vim 中都是借助 register 实现的，vim 共有 9 类寄存器。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">寄存器种类</th>
      <th style="text-align: center">寄存器</th>
      <th style="text-align: center">寄存器描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">无名寄存器</td>
      <td style="text-align: center">””</td>
      <td style="text-align: center">缓存最后一个操作内容</td>
    </tr>
    <tr>
      <td style="text-align: center">数字寄存器</td>
      <td style="text-align: center">“0~”9</td>
      <td style="text-align: center">缓存最近操作内容</td>
    </tr>
    <tr>
      <td style="text-align: center">行内寄存器</td>
      <td style="text-align: center">”-</td>
      <td style="text-align: center">缓存行内删除内容</td>
    </tr>
    <tr>
      <td style="text-align: center">具名寄存器</td>
      <td style="text-align: center">“a~”z或”A~”Z</td>
      <td style="text-align: center">指定时可用</td>
    </tr>
    <tr>
      <td style="text-align: center">只读寄存器</td>
      <td style="text-align: center">”:,”.,”%,”#</td>
      <td style="text-align: center">分别缓存最近命令，最近插入文本，当前文件名，当前交替文件名</td>
    </tr>
    <tr>
      <td style="text-align: center">表达式寄存器</td>
      <td style="text-align: center">”=</td>
      <td style="text-align: center">只读，用于执行表达式命令</td>
    </tr>
    <tr>
      <td style="text-align: center">选择及拖拽寄存器</td>
      <td style="text-align: center">“*,”+,”~</td>
      <td style="text-align: center">存取GUI选择文本</td>
    </tr>
    <tr>
      <td style="text-align: center">黑洞寄存器</td>
      <td style="text-align: center">“_</td>
      <td style="text-align: center">不缓存操作内容</td>
    </tr>
    <tr>
      <td style="text-align: center">模式寄存器</td>
      <td style="text-align: center">”/</td>
      <td style="text-align: center">缓存最近的搜索模式</td>
    </tr>
  </tbody>
</table>

<h2 id="vim--8">vim 分屏功能</h2>

<image src="http://lazybing.github.io/images/vim_split_screen.png">

vim 同时打开多个文件。

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim -o file1 file2              //小写 o 参数来水平分屏
</span><span class="line">vim -O file1 file2              //大写 O 参数来垂直分屏</span></code></pre></td></tr></table></div></figure>

vim 在多窗口打开。

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">:vs path/file       //在新的垂直分屏中打开文件
</span><span class="line">:sv path/file       //在新的水平分屏中打开文件</span></code></pre></td></tr></table></div></figure>

多窗口间切换的3方法：`Ctrl+w+方向键``Ctrl+w+h/j/k/l``Ctrl+ww`。  

移动分屏的方法：`Ctrl+w L`向右移动分屏；`Ctrl+w H`向左移动分屏；`Ctrl+w K`向上移动分屏；`Ctrl+w J`向下移动分屏。  

## vim 插件安装

首先安装插件管理插件

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span></code></pre></td></tr></table></div></figure>

其次在`.vimrc`下增加配置信息如下。

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class=""><span class="line">" vundle 环境设置
</span><span class="line">filetype off
</span><span class="line">set rtp+=~/.vim/bundle/Vundle.vim
</span><span class="line">" vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间
</span><span class="line">call vundle#begin()
</span><span class="line">Plugin 'VundleVim/Vundle.vim'
</span><span class="line">Plugin 'altercation/vim-colors-solarized'
</span><span class="line">Plugin 'tomasr/molokai'
</span><span class="line">Plugin 'vim-scripts/phd'
</span><span class="line">Plugin 'Lokaltog/vim-powerline'
</span><span class="line">Plugin 'octol/vim-cpp-enhanced-highlight'
</span><span class="line">Plugin 'nathanaelkane/vim-indent-guides'
</span><span class="line">Plugin 'derekwyatt/vim-fswitch'
</span><span class="line">Plugin 'kshenoy/vim-signature'
</span><span class="line">Plugin 'vim-scripts/BOOKMARKS—Mark-and-Highlight-Full-Lines'
</span><span class="line">Plugin 'majutsushi/tagbar'
</span><span class="line">Plugin 'vim-scripts/indexer.tar.gz'
</span><span class="line">Plugin 'vim-scripts/DfrankUtil'
</span><span class="line">Plugin 'vim-scripts/vimprj'
</span><span class="line">Plugin 'dyng/ctrlsf.vim'
</span><span class="line">Plugin 'terryma/vim-multiple-cursors'
</span><span class="line">Plugin 'scrooloose/nerdcommenter'
</span><span class="line">Plugin 'vim-scripts/DrawIt'
</span><span class="line">Plugin 'SirVer/ultisnips'
</span><span class="line">Plugin 'Valloric/YouCompleteMe'
</span><span class="line">Plugin 'derekwyatt/vim-protodef'
</span><span class="line">Plugin 'scrooloose/nerdtree'
</span><span class="line">Plugin 'fholgado/minibufexpl.vim'
</span><span class="line">Plugin 'gcmt/wildfire.vim'
</span><span class="line">Plugin 'sjl/gundo.vim'
</span><span class="line">Plugin 'Lokaltog/vim-easymotion'
</span><span class="line">Plugin 'suan/vim-instant-markdown'
</span><span class="line">Plugin 'lilydjwg/fcitx.vim'
</span><span class="line">" 插件列表结束
</span><span class="line">call vundle#end()
</span><span class="line">filetype plugin indent on`</span></code></pre></td></tr></table></div></figure>

最后，进入`vim`执行

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">:PluginInstall</span></code></pre></td></tr></table></div></figure>

## vim 浏览代码

vim 浏览代码一般会与 `catgs` `cscope` `taglist` 等一起使用。  


</image>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVPacket 结构体解析]]></title>
    <link href="http://lazybing.github.io/blog/2016/07/03/avpacket-structure/"/>
    <updated>2016-07-03T08:19:32-07:00</updated>
    <id>http://lazybing.github.io/blog/2016/07/03/avpacket-structure</id>
    <content type="html"><![CDATA[<p>AVPacket是存储压缩编码数据相关信息的结构体。
<!--more--></p>

<p><code>AVPacket</code>作为 demuxer 的输出，并作为 decoder 的输入；或者作为 encoder 的输出，muxer 的输入。
对于 video,它一般包含一个压缩帧；对于 audio，它可能包含多个压缩音频帧。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">AVPacket</span><span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">AVBufferRef</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int64_t</span> <span class="n">pts</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int64_t</span> <span class="n">dts</span><span class="p">;</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span>   <span class="n">size</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span>   <span class="n">stream_index</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span>   <span class="n">flags</span><span class="p">;</span>
</span><span class="line">    <span class="n">AVPacketSideData</span> <span class="o">*</span><span class="n">side_data</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">side_data_elems</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span>   <span class="n">duration</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int64_t</span> <span class="n">pos</span><span class="p">;</span>                            <span class="c1">///&lt; byte position in stream, -1 if unknown</span>
</span><span class="line">    <span class="kt">int64_t</span> <span class="n">convergence_duration</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li><code>pts</code>代表显示时间戳(单位是AVStream-&gt;time_base units).</li>
  <li><code>dts</code>代表解码时间戳(单位是AVStream-&gt;time_base units).</li>
  <li><code>stream_index</code>标识该<code>AVPacket</code>所属的视频音频流。</li>
</ul>

]]></content>
  </entry>
  
</feed>
