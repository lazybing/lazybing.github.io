<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[懒人李冰]]></title>
  <link href="http://lazybing.github.io/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2017-12-26T05:21:00-08:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之x264_macroblock_encode函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/12/25/x264-macroblock-encode/"/>
    <updated>2017-12-25T19:52:38-08:00</updated>
    <id>http://lazybing.github.io/blog/2017/12/25/x264-macroblock-encode</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#x264macroblockencode-" id="markdown-toc-x264macroblockencode-">x264_macroblock_encode 概述</a>    <ul>
      <li><a href="#ipcm-" id="markdown-toc-ipcm-">I_PCM 编码模式</a></li>
      <li><a href="#pskip--bskip-" id="markdown-toc-pskip--bskip-">P_Skip 模式和 B_Skip 模式编码</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录 X264 中对于<code>x264_macroblock_encode</code>函数的分析，该函数主要变换和量化，对应 X264 中的宏块编码模块。<br />
<!--more--></p>

<h2 id="x264macroblockencode-">x264_macroblock_encode 概述</h2>

<p>该函数主要在<code>x264_slice_write()</code>函数调用，它主要完成了编码器中的变换、量化部分，该函数主要是封装了<code>x264_macroblock_encode_internal()</code>函数，它包括如下几个步骤：</p>

<figure class="code"><figcaption><span>x264_macroblock_encode </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_macroblock_encode</span><span class="p">(</span><span class="kt">x264_t</span> <span class="o">*</span><span class="n">h</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">CHROMA444</span><span class="p">)</span>
</span><span class="line">        <span class="n">x264_macroblock_encode_internal</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">        <span class="n">x264_macroblock_encode_internal</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<ol>
  <li>如果宏块类型为 PCM 类型，直接存储重建帧数据。</li>
  <li>如果宏块类型为 Skip 类型，调用<code>x264_macroblock_encode_skip()</code>编码 Skip 类型宏块，包括<code>P_SKIP</code>和<code>B_SKIP</code>类型。</li>
  <li>如果宏块类型为<code>I_16x16</code>，调用<code>x264_mb_encode_i16x16()</code>编码 Intra 16x16 类型的宏块，该函数除了进行 DCT 变换之外，还对 16 个小块的 DC 系数进行 Hadamard 变换。</li>
  <li>如果宏块类型为<code>I_4x4</code>，调用<code>x264_mb_encode_i4x4()</code>编码 Intra 4x4 类型的宏块。</li>
  <li>帧间宏块编码，该部分并没有单独的函数完成，而是写在了<code>x264_macroblock_encode_internal</code>函数内部。</li>
  <li>调用<code>x264_mb_encode_chroma()</code>函数编码色度卡。</li>
</ol>

<h3 id="ipcm-">I_PCM 编码模式</h3>

<p>I_PCM 是一种帧内编码模式，在该模式下，编码器直接传输图像的像素值，而不经过预测和变换。在一些特殊的情况下，特别是图像
内容不规则或者量化参数非常低时，该模式比常规的操作（帧内预测-变换-量化-编码）效率更高。</p>

<p>I_PCM 模式用于以下目的：</p>

<ol>
  <li>允许编码器精确地表示像素值。</li>
  <li>提供表示不规则图像内容的准确性，而不引起重大的数据量增加。</li>
  <li>严格限制宏块解码比特数，但不降低编码效率。</li>
</ol>

<p>对 I_PCM 类型的编码，实现代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="p">...</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_type</span> <span class="o">==</span> <span class="n">I_PCM</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">//if PCM is chosen, we need to store reconstructed frame data</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">plane_count</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">h</span><span class="o">-&gt;</span><span class="n">mc</span><span class="p">.</span><span class="n">copy</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">](</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">.</span><span class="n">pic</span><span class="p">.</span><span class="n">p_fdec</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">FDEC_STRIDE</span><span class="p">,</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">.</span><span class="n">pic</span><span class="p">.</span><span class="n">p_fenc</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">FENC_STRIDE</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">chroma</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">16</span> <span class="o">&gt;&gt;</span> <span class="n">CHROMA_V_SHIFT</span><span class="p">;</span>
</span><span class="line">        <span class="n">h</span><span class="o">-&gt;</span><span class="n">mc</span><span class="p">.</span><span class="n">copy</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">](</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">.</span><span class="n">pic</span><span class="p">.</span><span class="n">p_fdec</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">FDEC_STRIDE</span><span class="p">,</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">.</span><span class="n">pic</span><span class="p">.</span><span class="n">p_fenc</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">FENC_STRIDE</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class="line">        <span class="n">h</span><span class="o">-&gt;</span><span class="n">mc</span><span class="p">.</span><span class="n">copy</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">](</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">.</span><span class="n">pic</span><span class="p">.</span><span class="n">p_fdec</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">FDEC_STRIDE</span><span class="p">,</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">.</span><span class="n">pic</span><span class="p">.</span><span class="n">p_fenc</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">FENC_STRIDE</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="pskip--bskip-">P_Skip 模式和 B_Skip 模式编码</h3>

<ul>
  <li>P_Skip 类型宏块：即 COPY 宏块，无像素残差，无运动矢量残差(MVD)。直接利用预测 MV 得到的像素预测值。像素重构值= 像素预测值。</li>
  <li>B_Skip 类型宏块：无像素残差，无运动矢量残差(MVD)。解码时，通过 Direct 预测模式(时间或空间)计算出前、后向 MV 后，直接利用前、后向 MV 得到像素预测值。像素重构值 = 像素预测值。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之x264_macroblock_analyse函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/11/13/x264-macroblock-analyse/"/>
    <updated>2017-11-13T07:06:23-08:00</updated>
    <id>http://lazybing.github.io/blog/2017/11/13/x264-macroblock-analyse</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">宏块分析概述</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">帧内预测</a>    <ul>
      <li><a href="#intra16x16-" id="markdown-toc-intra16x16-">Intra16x16 预测模式分析</a></li>
      <li><a href="#intra4x4-" id="markdown-toc-intra4x4-">Intra4x4 预测模式分析</a></li>
    </ul>
  </li>
  <li><a href="#section-2" id="markdown-toc-section-2">帧间预测</a>    <ul>
      <li><a href="#section-3" id="markdown-toc-section-3">运动补偿块</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">运动矢量</a></li>
      <li><a href="#mv-" id="markdown-toc-mv-">MV 预测</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">帧间预测函数分析</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录 X264 中对于<code>x264_macroblock_analyse</code>函数的分析，该函数主要完成 2 个任务：对于帧内宏块，分析帧内预测模式；对于帧间宏块，进行运动估计、分析帧间预测模式。 <br />
<!--more--></p>

<h2 id="section">宏块分析概述</h2>

<p>首先看一下<code>x264_macroblock_analyse</code>函数实现过程的大体过程：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class=""><span class="line">void x264_macroblock_analyse(x264_t *)
</span><span class="line">{
</span><span class="line">    h-&gt;mb.i_qp = x264_ratecontrol_mb_qp(h); //get QP of the MB
</span><span class="line">    ...
</span><span class="line">    x264_mb_analyse_init(h, &amp;analysis, h-&gt;mb.i_qp);
</span><span class="line">
</span><span class="line">    if(h-&gt;sh.i_type == SLICE_TYPE_I)
</span><span class="line">    {
</span><span class="line">        x264_mb_analyse_intra(h, &amp;analysis, CONST_MAX);
</span><span class="line">    }
</span><span class="line">    else if(h-&gt;sh.i_type == SLICE_TYPE_P)
</span><span class="line">    {
</span><span class="line">        x264_macroblock_probe_pskip(h);
</span><span class="line">
</span><span class="line">        x264_mb_analyse_inter_p16x16(h, &amp;analysis);
</span><span class="line">
</span><span class="line">        x264_mb_analyse_inter_p8x8(h, &amp;analysis);
</span><span class="line">
</span><span class="line">        x264_mb_analyse_inter_p4x4(h, &amp;analysis, i);
</span><span class="line">        
</span><span class="line">        x264_mb_analyse_inter_p8x4(h, &amp;analysis, i);
</span><span class="line">
</span><span class="line">        x264_mb_analyse_inter_p4x8(h, &amp;analysis, i);
</span><span class="line">
</span><span class="line">        x264_mb_analyse_inter_p16x8(h, &amp;analysis, i_cost);
</span><span class="line">
</span><span class="line">        x264_mb_analyse_inter_p8x16(h, &amp;analysis, i_cost);
</span><span class="line">
</span><span class="line">        x264_me_refine_qpel(h, &amp;analysis.xxxx);
</span><span class="line">    }
</span><span class="line">    else if(h-&gt;sh.i_type == SLICE_TYPE_B)
</span><span class="line">    {
</span><span class="line">        x264_mb_analyse_inter_b16x16(h, &amp;analysis);
</span><span class="line">        x264_mb_analyse_inter_b8x8( h, &amp;analysis );
</span><span class="line">        x264_mb_analyse_inter_b16x8( h, &amp;analysis );
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<p>上面只是给出了该函数中调用的函数，并没有给出实际编码中的逻辑判断。它的实现如下：</p>

<ol>
  <li>如果当前是I Slice, 调用<code>x264_mb_analyse_intra()</code>进行Intra宏块的帧内预测模式分析。</li>
  <li>如果当前是P Slice, 则进行下面流程的分析：</li>
</ol>

<blockquote>
  <p>a.调用<code>x264_macroblock_probe_pskip()</code>分析是否为skip宏块，如果是skip宏块，则不再进行下面分析。<br />
b.调用<code>x264_mb_analyse_inter_p16x16()</code>分析P16x16帧间预测的代价。<br />
c.调用<code>x264_mb_analyse_inter_p8x8</code>分析P8x8帧间预测的代价。<br />
d.如果 P8x8 代价值小于 P16x16，则依次对 4 个 8x8 的子宏块分割进行判断： <br />
 * 调用<code>x264_mb_analyse_inter_p4x4()</code>分析 P4x4 帧间预测的代价。<br />
 * 如果P4x4代价值小于P8x8，则调用<code>x264_mb_analyse_inter_p8x4()</code>和<code>x264_mb_analyse_inter_p4x8()</code>分析P8x4和P4x8帧间预测的代价。<br />
e.如果P8x8代价值小于P16x16,调用<code>x264_mb_analyse_inter_p16x8()</code>和<code>x264_mb_analyse_inter_p8x16()</code>分析P16x8和P8x16帧间预测的代价。<br />
f.此外，还要调用<code>x264_mb_analyse_intra()</code>，检查当前宏块作为 Intra 宏块编码的代价是否小于作为 P 宏块编码的代价。</p>
</blockquote>

<ol>
  <li>如果当前是B Slice，则进行和 P Slice 类似的处理。</li>
</ol>

<h2 id="section-1">帧内预测</h2>

<p>帧内预测模式种，预测块 P 是基于已编码重建块和当前块形成的，对亮度像素来说，P 块用于 4x4 子块或者 16x16 宏块的相关操作。其中 4x4 宏块，有 9 种可选预测模式，适用于
带有大量细节的图像编码；16x16 宏块适用于比较平坦的图像，该宏块有 4 种预测模式，预测整个 16x16 亮度块。色度块也有 4 种预测模式，与 16x16 亮度块预测模式类似。编码器
通常会选择使 P 块和编码块之间差异最小的预测模式。</p>

<p>除此之外，还有一种帧内预测模式称为 I_PCM 编码模式。该模式下，编码器直接传输图像像素值，而不经过预测和变换。在一些特殊的情况下，特别是
图像内容不规则或者量化参数非常低时该模式比常规操作(帧内预测-变换-量化-熵编码)效率更高。I_PCM 模式用于以下目的：</p>

<ol>
  <li>允许编码器精确的表示像素值</li>
  <li>提供表示不规则图像内容的准确值，而不引起重大的数据量增加</li>
  <li>严格限制宏块解码比特数，但不损害编码效率</li>
</ol>

<p>关于帧内预测的原理介绍部分，参考<a href="http://lazybing.github.io/blog/2017/06/30/x264-intra-prediction/">X264 源码解析之帧内预测</a>。</p>

<p><code>x264_mb_analyse_intra</code>中关于帧内预测模式的选择判断，整体思路是，遍历所有可能的预测模式，包括 4 种 16x16 的预测模式、9 种 4x4 的预测模式，具体流程如下：</p>

<h3 id="intra16x16-">Intra16x16 预测模式分析</h3>
<p>对于非<code>AVC-Intra Compat</code>，首先根据当前宏块左边、上边宏块的可参考情况，判断该宏块可能存在的预测模式。
对于每个宏块，根据重建宏块和预测模式，调用<code>predict_16x16[]</code>做帧内预测;调用<code>x264_pixel_function_t</code>中的<code>mbcmp[]</code>计算编码代价。
选择最小的编码代价，记录编码代价的值，并记录编码模式。核心代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="p">...</span>
</span><span class="line"><span class="k">for</span><span class="p">(;</span> <span class="o">*</span><span class="n">predict_mode</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">predict_mode</span><span class="o">++</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_satd</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_mode</span> <span class="o">=</span> <span class="o">*</span><span class="n">predict_mode</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">.</span><span class="n">b_lossless</span><span class="p">)</span>
</span><span class="line">        <span class="n">x264_predict_lossless_16x16</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i_mode</span><span class="p">);</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">        <span class="n">h</span><span class="o">-&gt;</span><span class="n">predict_16x16</span><span class="p">[</span><span class="n">i_mode</span><span class="p">](</span><span class="n">p_dst</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">i_satd</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">pixf</span><span class="p">.</span><span class="n">mbcmp</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">](</span><span class="n">p_dst</span><span class="p">,</span> <span class="n">FDEC_STRIDE</span><span class="p">,</span> <span class="n">psr</span><span class="p">,</span> <span class="n">FENC_STRIDE</span><span class="p">)</span> <span class="o">+</span>
</span><span class="line">        <span class="n">lambda</span> <span class="o">*</span> <span class="n">bs_size_ue</span><span class="p">(</span><span class="n">x264_mb_pred_mode16x16_fix</span><span class="p">[</span><span class="n">i_mode</span><span class="p">]);</span>
</span><span class="line">    <span class="n">COPY2_IF_LT</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">i_satd_i16x16</span><span class="p">,</span> <span class="n">i_satd</span><span class="p">,</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">i_predict16x16</span><span class="p">,</span> <span class="n">i_mode</span><span class="p">);</span>
</span><span class="line">    <span class="n">a</span><span class="o">-&gt;</span><span class="n">i_satd_i16x16_dir</span><span class="p">[</span><span class="n">i_mode</span><span class="p">]</span> <span class="o">=</span> <span class="n">i_satd</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4-">Intra4x4 预测模式分析</h3>

<p>循环处理 16 个 4x4 的块：首先调用<code>x264_mb_predict_intra4x4_mode()</code>函数根据周围宏块情况判断该宏块可用的预测模式。之后循环计算 9 种 Intra4x4 的帧内预测模式，调用<code>predict_4x4[]</code>函数根据重建帧宏块进行帧内预测，调用<code>x264_pixel_funtion_t</code>中的<code>mbcmp[]</code>计算编码代码。
获取最小代缴的 Intra4x4 模式。将 16 个 4x4 宏块的最小代价相加，得到总代价。核心代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="p">...</span>
</span><span class="line"><span class="k">const</span> <span class="kt">int8_t</span> <span class="o">*</span><span class="n">predict_mode</span> <span class="o">=</span> <span class="n">predict_4x4_mode_available</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">b_avoid_topright</span><span class="p">,</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">.</span><span class="n">i_neighbour4</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">idx</span><span class="p">);</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="o">*</span><span class="n">predict_mode</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">predict_mode</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_satd</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_mode</span> <span class="o">=</span> <span class="o">*</span><span class="n">predict_mode</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">.</span><span class="n">b_lossless</span> <span class="p">)</span>
</span><span class="line">        <span class="n">x264_predict_lossless_4x4</span><span class="p">(</span> <span class="n">h</span><span class="p">,</span> <span class="n">p_dst_by</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">i_mode</span> <span class="p">);</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">        <span class="n">h</span><span class="o">-&gt;</span><span class="n">predict_4x4</span><span class="p">[</span><span class="n">i_mode</span><span class="p">](</span> <span class="n">p_dst_by</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">i_satd</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">pixf</span><span class="p">.</span><span class="n">mbcmp</span><span class="p">[</span><span class="n">PIXEL_4x4</span><span class="p">](</span> <span class="n">p_dst_by</span><span class="p">,</span> <span class="n">FDEC_STRIDE</span><span class="p">,</span> <span class="n">p_src_by</span><span class="p">,</span> <span class="n">FENC_STRIDE</span> <span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span> <span class="n">i_pred_mode</span> <span class="o">==</span> <span class="n">x264_mb_pred_mode4x4_fix</span><span class="p">(</span><span class="n">i_mode</span><span class="p">)</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">i_satd</span> <span class="o">-=</span> <span class="n">lambda</span> <span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span> <span class="n">i_satd</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">i_best</span> <span class="o">=</span> <span class="n">i_satd</span><span class="p">;</span>
</span><span class="line">            <span class="n">a</span><span class="o">-&gt;</span><span class="n">i_predict4x4</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">i_mode</span><span class="p">;</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">COPY2_IF_LT</span><span class="p">(</span> <span class="n">i_best</span><span class="p">,</span> <span class="n">i_satd</span><span class="p">,</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">i_predict4x4</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">i_mode</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="section-2">帧间预测</h2>

<p>帧间预测时指利用视频时间域相关性，使用临近已编码图像像素预测当前图像的像素，以达到有效去除视频时域冗余的目的。
由于视频序列通常包括较强的时域相关性，因此预测残差值接近于0，将残差信号作为后续模块的输入进行变换、量化、扫描、熵编码，可实现对视频信号的高效压缩。</p>

<p>接下来主要介绍基于<code>Baseline Profile</code>支持的 P 帧预测模式工具以及<code>Main Profile</code>和<code>Extended Profile</code>支持的 B 帧和加权预测等帧间预测工具。</p>

<h3 id="section-3">运动补偿块</h3>

<p>每个宏块(16x16 像素)可分割为 4 种方式：一个 16x16,两个 16x8, 两个 8x16,四个 8x8。其运动补偿也有相应的四种。8x8 模式的每个子宏块还
可以继续分割，分割方式为：一个 8x8，两个 4x8，两个 8x4，四个 4x4。</p>

<p>每个分割或子宏块都有一个独立的运动补偿。每个 MV 必须被编码、传输，分割的选择也需要编码到压缩码流中。对于大的尺寸而言，MV 选择和分割
类型只需少量的比特，但运动补偿残差在多细节区域能量将非常高。小尺寸分割运动补偿残差能量低，但需要较多的比特表示 MV 和分割选择。分割
尺寸的选择影响了压缩性能。整体而言，大的分割尺寸适合平坦的区域，而小尺寸适合多细节区域。</p>

<p>宏块的色度成分(Cr 和 Cb)则为相应亮度的一半(水平和垂直各一半)。色度块采用和亮度块同样的分割模式，只是尺寸减半(水平和垂直方向都减半)。
例如，8x16 的亮度块相应色度块尺寸为 4x8，8x4 亮度块相应色度块尺寸为 4x2 等等。色度块的 MV 也是通过相应亮度 MV 水平和垂直分量减半而得。</p>

<h3 id="section-4">运动矢量</h3>

<p>帧间编码宏块的每个分割或子宏块都是从参考图像某一相同尺寸区域预测而得。两者之间的差异(MV)对亮度成分采用 1/4 像素精度，色度 1/8 像素精度。
亚像素位置的亮度和色度像素并不存在于参考图像中，需利用临近已编码点进行内插而得。如果 MV 的垂直和水平分量为正数，则参考块相应像素实际存在，
如果其中一个或两个为分数，则预测像素要通过参考帧中相应像素内插获得。</p>

<h3 id="mv-">MV 预测</h3>

<p>每个分割 MV 的编码需要相当数目的比特，特别是使用小分割尺寸时。为了减少传输比特数，可利用邻近分割的 MV 较强的相关性，MV 可由邻近已编码分割
的 MV 预测而得。预测矢量 MVp 基于已计算 MV 和 MVD（预测与当前的差异）并被编码和传送。MVp 则取决于运动补偿尺寸和邻近 MV 的有无。</p>

<p>示例如下：</p>

<p><img src="http://lazybing.github.io/images/macroblock_analyse/mv_prediction_macroblock.png" /></p>

<p>E 为当前宏块或宏块分割子宏块。A、B、C 分别为 E 的左、上、右上方的三个相对应块。如果 E 的左边不止一个分割，取其中最上的一个为 A；上方
不止一个分割时，取最左边一个为 B。</p>

<p>1)  传输分割不包括 16x8 和 8x16 时，MVP 为 A、B、C 分割 MV 的中值；<br />
2） 16x8 分割，上面部分 MVp 由 B 预测，下面部分 MVp 由 A 预测；<br />
3） 8x16 分割，左面部分 MVp 由 A 预测，右面部分 MVp 由 B 预测；<br />
4） skipped MB 类型同 1 。</p>

<h3 id="section-5">帧间预测函数分析</h3>

<p>帧间预测的帧类型大多是 P 帧或 B 帧。对于 P 帧，它的宏块分析流程为：</p>

<ol>
  <li>调用<code>x264_macroblock_probe_pskip()</code>分析是否为 Skip 宏块，如果是则不进行后面的分析。</li>
  <li>调用<code>x264_mb_analyse_inter_p16x16()</code>分析 P16x16 帧间预测的代价。</li>
  <li>调用<code>x264_mb_analyse_inter_p8x8()</code>分析 P8x8 帧间预测的代价。</li>
  <li>如果 P8x8 代价小于 P16x16, 则依次对 4 个 8x8 的子宏块分割进行判断：<br />
 i. 调用<code>x264_mb_analyse_inter_p4x4()</code>分析 P4x4 的帧间预测代价。<br />
 ii. 如果 P4x4 代价值小于 P8x8，则调用<code>x264_mb_analyse_inter_p8x4()</code>和<code>x264_mb_analyse_inter_p4x8()</code>分析 P8x4 和 P4x8 帧间预测的代价。</li>
  <li>如果 P8x8 代价值小于 P16x8，调用<code>x264_mb_analyse_inter_p16x8()</code>和<code>x264_mb_analyse_inter_p8x16()</code>分析 P16x8 和 P8x16 帧间预测的代价。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_bitstream_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/11/12/bitstream-init/"/>
    <updated>2017-11-12T06:48:31-08:00</updated>
    <id>http://lazybing.github.io/blog/2017/11/12/bitstream-init</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#h264-spec-annex-b" id="markdown-toc-h264-spec-annex-b">H264 SPEC Annex B</a></li>
  <li><a href="#jm--annexb-" id="markdown-toc-jm--annexb-">JM 中关于 AnnexB 的源码分析</a></li>
  <li><a href="#x264--bitstream-" id="markdown-toc-x264--bitstream-">X264 中 Bitstream 的源码分析</a></li>
</ul>

<p>本文主要记录 X264 中对于 bitstream 的处理方法，它主要实现 SPEC 中<code>Annex B:Byte stream format</code>中的规定。
<!--more--></p>

<h2 id="h264-spec-annex-b">H264 SPEC Annex B</h2>

<p>首先看一下，H264 的 SPEC 中关于 Bitstream 中的规定。</p>

<figure class="code"><figcaption><span>AnndexB </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">byte_stream_nal_unit</span><span class="p">(</span><span class="n">NumBytesInNALunit</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">next_bits</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x000001</span> <span class="o">&amp;&amp;</span>
</span><span class="line">          <span class="n">next_bits</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x00000001</span><span class="p">)</span>
</span><span class="line">        <span class="n">leading_zero_8bits</span> <span class="c1">//equal to 0x00 f(8)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">next_bits</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x000001</span><span class="p">)</span>
</span><span class="line">        <span class="n">zero_byte</span>  <span class="c1">//equal to 0x00 f(8)</span>
</span><span class="line">
</span><span class="line">    <span class="n">start_code_prefix_one_3bytes</span> <span class="c1">//equal to 0x000001 f(24)</span>
</span><span class="line">
</span><span class="line">    <span class="n">nal_unit</span><span class="p">(</span><span class="n">NumBytesInNALunit</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">more_data_in_byte_stream</span><span class="p">()</span> <span class="o">&amp;&amp;</span>
</span><span class="line">          <span class="n">next_bits</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x000001</span> <span class="o">&amp;&amp;</span>
</span><span class="line">          <span class="n">next_bits</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x00000001</span><span class="p">)</span>
</span><span class="line">        <span class="n">trailing_zero_8bits</span> <span class="c1">//equal to 0x00 f(8)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>SPEC 中定义的解码的部分，因为我们根据上面的描述，可以理出 H264 的大致解析过程：</p>

<ol>
  <li>解码过程开始时，解码器把其当前的位置初始化为字节流的起始位置。然后提取，并丢弃每一个<code>leading_zero_8bits</code>语法元素(如果存在的话)，移动当前位置至某一时刻的字节处，直到比特流的当前位置紧接的四个字节为四字节序列<code>0x00000001</code>。</li>
  <li>当字节流里的紧接的四个字节构成四字节序列<code>0x00000001</code>，对比特流中下一个字节(为 zero_byte 语法元素)进行提取并丢弃时，字节流的当前位置设为紧接被丢弃的字节的字节位置。</li>
  <li>提取与丢弃比特流中下一个三字节序列(为 start_code_prefix_one_3bytes)，且比特流当前位置设为此紧接被丢弃的 3 字节序列的字节的位置。</li>
  <li>NumBytesInNALunit 设为自当前字节位置起至下述条件前的位置的最后一个字节，且包括最后一个字节的编号。
a. 一个三字节序列的排列等于<code>0x000000</code>，或
b. 字一个三字节序列的排列等于<code>0x000001</code>，或 
c. 字节流的结束，由未规定的方式判决。</li>
  <li>NumBytesInNALunit 字节从比特流中移除，字节流的当前位置前移 NumBytesInNALunit 字节。这个字节序列为 <code>nal_unit(NumBytesInNALunit)</code>,并用 NAL 单元解码过程进行解码。</li>
  <li>当字节流中的当前位置不为字节流的结尾(由未规定的方式判决)，且字节流中的下一个字节不是等于<code>0x000001</code>开始的三字节序列，也不是等于<code>0x00000001</code>开始的四字节序列。解码器提取并丢弃每一个<code>trailing_zero_8bits</code>语法元素，移动字节流中的当前位置到某一时刻的一个字节处，直到字节流里的当前位置接下来的四个字节构成四字节的序列<code>0x00000001</code>或已至字节流的结尾(由未规定的当时判决)。</li>
</ol>

<h2 id="jm--annexb-">JM 中关于 AnnexB 的源码分析</h2>

<p>在看<code>X264</code>源码之前，让我们先看一下 JM 中关于 AnnexB 的解码的源码实现部分。</p>

<p><code>JM</code>中关于 AnnexB 部分的描述在<code>jm\decod\src\annexb.c</code>中,首先看一下其中最重要的一个函数<code>int GetAnnexbNALU(NALU_t *nalu)</code>,该函数的声明如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/*
</span><span class="line"> * Brief: Returns the size of the NALU( bits between start codes in case of
</span><span class="line"> *        Annex B, nalu-&gt;buf and nalu-&gt;len are filled. Other field in
</span><span class="line"> *        nalu-&gt;remain uninitialized( will be taken care of by NALUtoRBSP.
</span><span class="line"> * Return: 0 if there is nothing any more to read(EOF)
</span><span class="line"> *         -1 in case of any error
</span><span class="line"> * note Side-effect: Returns length of start-code in bytes.
</span><span class="line"> * 
</span><span class="line"> * Note: GetAnnexbNALU expects start codes at byte aligned positions in the file
</span><span class="line"> */
</span><span class="line">int GetAnnexbNALU(NALU_t *nalu);</span></code></pre></td></tr></table></div></figure>

<p><code>GetAnnexbNALU</code>的定义如下：</p>

<figure class="code"><figcaption><span>GetAnnexbNALU </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">GetAnnexbNALU</span><span class="p">(</span><span class="n">NALU_t</span> <span class="o">*</span><span class="n">nalu</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">info2</span><span class="p">,</span> <span class="n">info3</span><span class="p">,</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">StartCodeFound</span><span class="p">,</span> <span class="n">rewind</span><span class="p">;</span>
</span><span class="line">  <span class="kt">char</span> <span class="o">*</span><span class="n">Buf</span><span class="p">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">LeadingZero8BitsCount</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">TrailingZero8Bits</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="p">((</span><span class="n">Buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">max_size</span> <span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">no_mem_exit</span><span class="p">(</span><span class="s">&quot;GetAnnexbNALU: Buf&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//如果start_code前还有数据，丢弃start_code前leading_zero_8bits</span>
</span><span class="line">  <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">feof</span><span class="p">(</span><span class="n">bits</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">fgetc</span><span class="p">(</span><span class="n">bits</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">feof</span><span class="p">(</span><span class="n">bits</span><span class="p">))</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">pos</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;GetAnnexbNALU can&#39;t read start code</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">      <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class="line">      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">!=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;GetAnnexbNALU: no Start Code at the begin of the NALU, return -1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">pos</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;GetAnnexbNALU: no Start Code at the begin of the NALU, return -1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pos</span><span class="o">==</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">startcodeprefix_len</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">    <span class="n">LeadingZero8BitsCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">LeadingZero8BitsCount</span> <span class="o">=</span> <span class="n">pos</span><span class="o">-</span><span class="mi">4</span><span class="p">;</span>
</span><span class="line">    <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">startcodeprefix_len</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//the 1st byte stream NAL unit can has leading_zero_8bits, but subsequent ones are not</span>
</span><span class="line">  <span class="c1">//allowed to contain it since these zeros(if any) are considered trailing_zero_8bits</span>
</span><span class="line">  <span class="c1">//of the previous byte stream NAL unit.</span>
</span><span class="line">  <span class="c1">//字节流数据的第一个 NAL 单元才会有leading_zero_8bits;后面的 NALU 不会包含 leading_zero_8bits,</span>
</span><span class="line">  <span class="c1">//因为这些 leading_zero_8bits 会被看做前一个 NAL 单元后面的 trailing_zero_8bits</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">IsFirstByteStreamNALU</span> <span class="o">&amp;&amp;</span> <span class="n">LeadingZero8BitsCount</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;GetAnnexbNALU: The leading_zero_8bits syntax can only be present in the first byte stream NAL unit, return -1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="n">IsFirstByteStreamNALU</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="n">StartCodeFound</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="n">info2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="n">info3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">StartCodeFound</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">feof</span> <span class="p">(</span><span class="n">bits</span><span class="p">))</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="c1">//Count the trailing_zero_8bits</span>
</span><span class="line">      <span class="k">while</span><span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="n">TrailingZero8Bits</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="n">TrailingZero8Bits</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">      <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">startcodeprefix_len</span><span class="o">-</span><span class="n">LeadingZero8BitsCount</span><span class="o">-</span><span class="n">TrailingZero8Bits</span><span class="p">;</span>
</span><span class="line">      <span class="n">memcpy</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Buf</span><span class="p">[</span><span class="n">LeadingZero8BitsCount</span><span class="o">+</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">startcodeprefix_len</span><span class="p">],</span> <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">);</span>
</span><span class="line">      <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">forbidden_bit</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="mi">7</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">      <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">nal_reference_idc</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="mi">5</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">      <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">nal_unit_type</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0x1f</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// printf (&quot;GetAnnexbNALU, eof case: pos %d nalu-&gt;len %d, nalu-&gt;reference_idc %d, nal_unit_type %d \n&quot;, pos, nalu-&gt;len, nalu-&gt;nal_reference_idc, nalu-&gt;nal_unit_type);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#if TRACE</span>
</span><span class="line">  <span class="n">fprintf</span> <span class="p">(</span><span class="n">p_trace</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n\n</span><span class="s">Last NALU in File</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="n">fprintf</span> <span class="p">(</span><span class="n">p_trace</span><span class="p">,</span> <span class="s">&quot;Annex B NALU w/ %s startcode, len %d, forbidden_bit %d, nal_reference_idc %d, nal_unit_type %d</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">startcodeprefix_len</span> <span class="o">==</span> <span class="mi">4</span><span class="o">?</span><span class="s">&quot;long&quot;</span><span class="o">:</span><span class="s">&quot;short&quot;</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">forbidden_bit</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">nal_reference_idc</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">nal_unit_type</span><span class="p">);</span>
</span><span class="line">  <span class="n">fflush</span> <span class="p">(</span><span class="n">p_trace</span><span class="p">);</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">      <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class="line">      <span class="k">return</span> <span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//找 start_code，先找0x00000001,后找0x000001</span>
</span><span class="line">    <span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">fgetc</span> <span class="p">(</span><span class="n">bits</span><span class="p">);</span>
</span><span class="line">    <span class="n">info3</span> <span class="o">=</span> <span class="n">FindStartCode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">4</span><span class="p">],</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">info3</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">      <span class="n">info2</span> <span class="o">=</span> <span class="n">FindStartCode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">3</span><span class="p">],</span> <span class="mi">2</span><span class="p">);</span>
</span><span class="line">    <span class="n">StartCodeFound</span> <span class="o">=</span> <span class="p">(</span><span class="n">info2</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">info3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//Count the trailing_zero_8bits</span>
</span><span class="line">  <span class="c1">//计算 trailing_zero_8bits,如果start_code为0x000001,trailing_zero_8bits 肯定不存在</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">info3</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>	<span class="c1">//if the detected start code is 00 00 01, trailing_zero_8bits is sure not to be present</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">5</span><span class="o">-</span><span class="n">TrailingZero8Bits</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">      <span class="n">TrailingZero8Bits</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1">// Here, we have found another start code (and read length of startcode bytes more than we should</span>
</span><span class="line">  <span class="c1">// have.  Hence, go back in the file</span>
</span><span class="line">  <span class="n">rewind</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">info3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="n">rewind</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span><span class="p">;</span>
</span><span class="line">  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">info2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="n">rewind</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; Panic: Error in next start code search </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">fseek</span> <span class="p">(</span><span class="n">bits</span><span class="p">,</span> <span class="n">rewind</span><span class="p">,</span> <span class="n">SEEK_CUR</span><span class="p">))</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">snprintf</span> <span class="p">(</span><span class="n">errortext</span><span class="p">,</span> <span class="n">ET_SIZE</span><span class="p">,</span> <span class="s">&quot;GetAnnexbNALU: Cannot fseek %d in the bit stream file&quot;</span><span class="p">,</span> <span class="n">rewind</span><span class="p">);</span>
</span><span class="line">    <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class="line">    <span class="n">error</span><span class="p">(</span><span class="n">errortext</span><span class="p">,</span> <span class="mi">600</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Here the leading zeros(if any), Start code, the complete NALU, trailing zeros(if any)</span>
</span><span class="line">  <span class="c1">// and the next start code is in the Buf.</span>
</span><span class="line">  <span class="c1">// The size of Buf is pos, pos+rewind are the number of bytes excluding the next</span>
</span><span class="line">  <span class="c1">// start code, and (pos+rewind)-startcodeprefix_len-LeadingZero8BitsCount-TrailingZero8Bits</span>
</span><span class="line">  <span class="c1">// is the size of the NALU.</span>
</span><span class="line">
</span><span class="line">  <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="n">pos</span><span class="o">+</span><span class="n">rewind</span><span class="p">)</span><span class="o">-</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">startcodeprefix_len</span><span class="o">-</span><span class="n">LeadingZero8BitsCount</span><span class="o">-</span><span class="n">TrailingZero8Bits</span><span class="p">;</span>
</span><span class="line">  <span class="n">memcpy</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Buf</span><span class="p">[</span><span class="n">LeadingZero8BitsCount</span><span class="o">+</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">startcodeprefix_len</span><span class="p">],</span> <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">);</span>
</span><span class="line">  <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">forbidden_bit</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="mi">7</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">  <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">nal_reference_idc</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="mi">5</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">  <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">nal_unit_type</span> <span class="o">=</span> <span class="p">(</span><span class="n">nalu</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0x1f</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1">//printf (&quot;GetAnnexbNALU, regular case: pos %d nalu-&gt;len %d, nalu-&gt;reference_idc %d, nal_unit_type %d \n&quot;, pos, nalu-&gt;len, nalu-&gt;nal_reference_idc, nalu-&gt;nal_unit_type);</span>
</span><span class="line"><span class="cp">#if TRACE</span>
</span><span class="line">  <span class="n">fprintf</span> <span class="p">(</span><span class="n">p_trace</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n\n</span><span class="s">Annex B NALU w/ %s startcode, len %d, forbidden_bit %d, nal_reference_idc %d, nal_unit_type %d</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">startcodeprefix_len</span> <span class="o">==</span> <span class="mi">4</span><span class="o">?</span><span class="s">&quot;long&quot;</span><span class="o">:</span><span class="s">&quot;short&quot;</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">forbidden_bit</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">nal_reference_idc</span><span class="p">,</span> <span class="n">nalu</span><span class="o">-&gt;</span><span class="n">nal_unit_type</span><span class="p">);</span>
</span><span class="line">  <span class="n">fflush</span> <span class="p">(</span><span class="n">p_trace</span><span class="p">);</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line">  <span class="n">free</span><span class="p">(</span><span class="n">Buf</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">(</span><span class="n">pos</span><span class="o">+</span><span class="n">rewind</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>找<code>start_code</code>的定义如下,该函数的参数<code>zeros_in_startcode</code>可能为 3 或 4,寻找<code>0x000001</code>或<code>0x00000001</code>。</p>

<figure class="code"><figcaption><span>FindStartCode </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/*!</span>
</span><span class="line"><span class="cm"> ************************************************************************</span>
</span><span class="line"><span class="cm"> * \brief</span>
</span><span class="line"><span class="cm"> *    returns if new start code is found at byte aligned position buf.</span>
</span><span class="line"><span class="cm"> *    new-startcode is of form N 0x00 bytes, followed by a 0x01 byte.</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> *  \return</span>
</span><span class="line"><span class="cm"> *     1 if start-code is found or                      \n</span>
</span><span class="line"><span class="cm"> *     0, indicating that there is no start code</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> *  \param Buf</span>
</span><span class="line"><span class="cm"> *     pointer to byte-stream</span>
</span><span class="line"><span class="cm"> *  \param zeros_in_startcode</span>
</span><span class="line"><span class="cm"> *     indicates number of 0x00 bytes in start-code.</span>
</span><span class="line"><span class="cm"> ************************************************************************</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">FindStartCode</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">Buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">zeros_in_startcode</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">info</span><span class="p">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="n">info</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">zeros_in_startcode</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">      <span class="n">info</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">Buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="n">info</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="k">return</span> <span class="n">info</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="x264--bitstream-">X264 中 Bitstream 的源码分析</h2>

<p><code>X264</code>中关于<code>AnnexB</code>部分的描述主要是在<code>common/bitstream.c</code>中的<code>void x264_bitstream_init(int cpu, x264_bitstream_function_t *pf)</code>完成。
其中的<code>x264_bitstream_function_t</code>结构体定义如下：</p>

<figure class="code"><figcaption><span>x264_bitstream_function_t </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">typedef</span> <span class="k">struct</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">nal_escape</span><span class="p">)</span> <span class="p">(</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">end</span> <span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">cabac_block_residual_internal</span><span class="p">)(</span> <span class="n">dctcoef</span> <span class="o">*</span><span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b_interlaced</span><span class="p">,</span>
</span><span class="line">                                           <span class="kt">intptr_t</span> <span class="n">ctx_block_cat</span><span class="p">,</span> <span class="kt">x264_cabac_t</span> <span class="o">*</span><span class="n">cb</span> <span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">cabac_block_residual_rd_internal</span><span class="p">)(</span> <span class="n">dctcoef</span> <span class="o">*</span><span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b_interlaced</span><span class="p">,</span>
</span><span class="line">                                              <span class="kt">intptr_t</span> <span class="n">ctx_block_cat</span><span class="p">,</span> <span class="kt">x264_cabac_t</span> <span class="o">*</span><span class="n">cb</span> <span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">cabac_block_residual_8x8_rd_internal</span><span class="p">)(</span> <span class="n">dctcoef</span> <span class="o">*</span><span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b_interlaced</span><span class="p">,</span>
</span><span class="line">                                                  <span class="kt">intptr_t</span> <span class="n">ctx_block_cat</span><span class="p">,</span> <span class="kt">x264_cabac_t</span> <span class="o">*</span><span class="n">cb</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span> <span class="kt">x264_bitstream_function_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中<code>x264_bitstream_init</code>的定义如下：</p>

<figure class="code"><figcaption><span>X264_bitstream_init </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">X264_bitstream_init</span><span class="p">(</span><span class="kt">int</span> <span class="n">cpu</span><span class="p">,</span> <span class="kt">x264_bitstream_function_t</span> <span class="o">*</span><span class="n">pf</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">memset</span><span class="p">(</span><span class="n">pf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">pf</span><span class="p">));</span>
</span><span class="line">    <span class="n">pf</span><span class="o">-&gt;</span><span class="n">nal_escape</span> <span class="o">=</span> <span class="n">x264_nal_escape_c</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf</span><span class="o">-&gt;</span><span class="n">cabac_block_residual_internal</span> <span class="o">=</span> <span class="n">x264_cabac_block_residual_internal_sse2</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf</span><span class="o">-&gt;</span><span class="n">cabac_block_residual_rd_internal</span> <span class="o">=</span> <span class="n">x264_cabac_block_residual_rd_internal_sse2</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf</span><span class="o">-&gt;</span><span class="n">cabac_block_residual_8x8_rd_internal</span> <span class="o">=</span> <span class="n">x264_cabac_block_residual_8x8_rd_internal_sse2</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中的<code>x264_nal_escape_c</code>定义如下：</p>

<figure class="code"><figcaption><span>x264_nal_escape_c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="nf">x264_nal_escape_c</span><span class="p">(</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">end</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span> <span class="n">src</span> <span class="o">&lt;</span> <span class="n">end</span> <span class="p">)</span> <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">src</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span> <span class="n">src</span> <span class="o">&lt;</span> <span class="n">end</span> <span class="p">)</span> <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">src</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span> <span class="n">src</span> <span class="o">&lt;</span> <span class="n">end</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span> <span class="n">src</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mh">0x03</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">dst</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">dst</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line">            <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="mh">0x03</span><span class="p">;</span>
</span><span class="line">        <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">src</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">dst</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>最后，给出 X264 中关于每个 NALU 的编码的实现：</p>

<figure class="code"><figcaption><span>x264_nal_encode </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/****************************************************************************</span>
</span><span class="line"><span class="cm"> * x264_nal_encode:</span>
</span><span class="line"><span class="cm"> ****************************************************************************/</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">x264_nal_encode</span><span class="p">(</span> <span class="kt">x264_t</span> <span class="o">*</span><span class="n">h</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">x264_nal_t</span> <span class="o">*</span><span class="n">nal</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">src</span> <span class="o">=</span> <span class="n">nal</span><span class="o">-&gt;</span><span class="n">p_payload</span><span class="p">;</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">end</span> <span class="o">=</span> <span class="n">nal</span><span class="o">-&gt;</span><span class="n">p_payload</span> <span class="o">+</span> <span class="n">nal</span><span class="o">-&gt;</span><span class="n">i_payload</span><span class="p">;</span>
</span><span class="line">    <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">orig_dst</span> <span class="o">=</span> <span class="n">dst</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">b_annexb</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span> <span class="n">nal</span><span class="o">-&gt;</span><span class="n">b_long_startcode</span> <span class="p">)</span>
</span><span class="line">            <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="mh">0x00</span><span class="p">;</span>
</span><span class="line">        <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="mh">0x00</span><span class="p">;</span>
</span><span class="line">        <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="mh">0x00</span><span class="p">;</span>
</span><span class="line">        <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="mh">0x01</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="cm">/* save room for size later */</span>
</span><span class="line">        <span class="n">dst</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* nal header */</span>
</span><span class="line">    <span class="o">*</span><span class="n">dst</span><span class="o">++</span> <span class="o">=</span> <span class="p">(</span> <span class="mh">0x00</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span> <span class="p">)</span> <span class="o">|</span> <span class="p">(</span> <span class="n">nal</span><span class="o">-&gt;</span><span class="n">i_ref_idc</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span> <span class="p">)</span> <span class="o">|</span> <span class="n">nal</span><span class="o">-&gt;</span><span class="n">i_type</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">dst</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">bsf</span><span class="p">.</span><span class="n">nal_escape</span><span class="p">(</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">end</span> <span class="p">);</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="n">dst</span> <span class="o">-</span> <span class="n">orig_dst</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Write the size header for mp4/etc */</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">b_annexb</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="cm">/* Size doesn&#39;t include the size of the header we&#39;re writing now. */</span>
</span><span class="line">        <span class="n">orig_dst</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="o">&gt;&gt;</span><span class="mi">24</span><span class="p">;</span>
</span><span class="line">        <span class="n">orig_dst</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">;</span>
</span><span class="line">        <span class="n">orig_dst</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">;</span>
</span><span class="line">        <span class="n">orig_dst</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="o">&gt;&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">nal</span><span class="o">-&gt;</span><span class="n">i_payload</span> <span class="o">=</span> <span class="n">size</span><span class="o">+</span><span class="mi">4</span><span class="p">;</span>
</span><span class="line">    <span class="n">nal</span><span class="o">-&gt;</span><span class="n">p_payload</span> <span class="o">=</span> <span class="n">orig_dst</span><span class="p">;</span>
</span><span class="line">    <span class="n">x264_emms</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之参考帧]]></title>
    <link href="http://lazybing.github.io/blog/2017/10/19/reference-frame/"/>
    <updated>2017-10-19T07:53:49-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/10/19/reference-frame</id>
    <content type="html"><![CDATA[
<p>本篇博客主要记录<code>X264</code>中关于参考帧管理。</p>

<!--more-->

<p><code>X264</code>中的帧可以大致分为以下几类：参考帧(ference frame)、当前编码帧(current frame)、未使用帧(unused frame)等。对帧的管理操作
的基本操作由两种：从队列中获取帧(<code>x264_frame_pop</code>)、向队列中添加帧(<code>x264_frame_push_unused</code>)。</p>

<p>关于帧队列的管理是通过数组来的，下面先介绍最基本的帧队列的一些基本操作。</p>

<p>首先将<code>frame</code>帧插入到<code>list</code>队列中，实现代码如下：</p>

<figure class="code"><figcaption><span>x264_frame_push </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_frame_push</span><span class="p">(</span><span class="kt">x264_frame_t</span> <span class="o">**</span><span class="n">list</span><span class="p">,</span> <span class="kt">x264_frame_t</span> <span class="o">*</span><span class="n">frame</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>从<code>list</code>队列中获取<code>frame</code>帧，实现代码如下：</p>

<figure class="code"><figcaption><span>x264_frame_pop </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">x264_frame_t</span> <span class="o">*</span><span class="nf">x264_frame_pop</span><span class="p">(</span> <span class="kt">x264_frame_t</span> <span class="o">**</span><span class="n">list</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">x264_frame_t</span> <span class="o">*</span><span class="n">frame</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span> <span class="n">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="n">frame</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">    <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">frame</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>当编码帧类型为<code>IDR</code>帧时，需要重置整个参考帧队列，<code>X264</code>中重置参考队列是通过<code>x264_reference_reset</code>函数完成，实现过程即为将<code>reference</code>队列
所有的参考帧设置为<code>unused</code>队列中的<code>unused</code>帧；实现代码如下：</p>

<figure class="code"><figcaption><span>x264_reference_reset </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">x264_reference_reset</span><span class="p">(</span> <span class="kt">x264_t</span> <span class="o">*</span><span class="n">h</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">frames</span><span class="p">.</span><span class="n">reference</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line">        <span class="n">x264_frame_push_unused</span><span class="p">(</span> <span class="n">h</span><span class="p">,</span> <span class="n">x264_frame_pop</span><span class="p">(</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">frames</span><span class="p">.</span><span class="n">reference</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line">    <span class="n">h</span><span class="o">-&gt;</span><span class="n">fdec</span><span class="o">-&gt;</span><span class="n">i_poc</span> <span class="o">=</span>
</span><span class="line">    <span class="n">h</span><span class="o">-&gt;</span><span class="n">fenc</span><span class="o">-&gt;</span><span class="n">i_poc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之判断帧类型]]></title>
    <link href="http://lazybing.github.io/blog/2017/10/11/x264-slicetype-decide/"/>
    <updated>2017-10-11T08:59:17-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/10/11/x264-slicetype-decide</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程小技巧]]></title>
    <link href="http://lazybing.github.io/blog/2017/09/29/coding-tips/"/>
    <updated>2017-09-29T13:35:57-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/09/29/coding-tips</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">获取文件路径后缀名</a>    <ul>
      <li><a href="#c-" id="markdown-toc-c-">C 语言实现</a></li>
      <li><a href="#c--1" id="markdown-toc-c--1">C++ 语言实现</a></li>
      <li><a href="#shell-" id="markdown-toc-shell-">Shell 脚本实现</a></li>
    </ul>
  </li>
  <li><a href="#section-1" id="markdown-toc-section-1">调试信息分级打印</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">分析特定格式的文件</a></li>
  <li><a href="#fopen-" id="markdown-toc-fopen-">fopen 函数个数限制</a></li>
</ul>

<p>本篇博客主要记录在写代码过程中遇到的一些小技巧，它并不是特别难以实现的复杂算法，也不是对某种特定语言的记录，而是在
工作中遇到某个问题时，自然而然能想到的解决方法，通常是一些比较通用的小技巧。</p>

<!--more-->

<h2 id="section">获取文件路径后缀名</h2>

<p>工作中经常遇到对一批视频文件进行统一处理的情况，有时会根据文件名的不同后缀名进行不同的处理操作。此时就需要首先获取文件的后缀名，
之后再根据后缀名的不同进行相应的操作。</p>

<h3 id="c-">C 语言实现</h3>

<p>实现思路：获取文件字符串的最后一个字符，依次向前寻找<code>.</code>，<code>.</code>后面即为后缀名。</p>

<figure class="code"><figcaption><span>get_filename_extension </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kr">inline</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">get_filename_extension</span><span class="p">(</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">char</span> <span class="o">*</span><span class="n">ext</span> <span class="o">=</span> <span class="n">filename</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span> <span class="n">filename</span> <span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span> <span class="o">*</span><span class="n">ext</span> <span class="o">!=</span> <span class="sc">&#39;.&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">ext</span> <span class="o">&gt;</span> <span class="n">filename</span> <span class="p">)</span>
</span><span class="line">        <span class="n">ext</span><span class="o">--</span><span class="p">;</span>
</span><span class="line">    <span class="n">ext</span> <span class="o">+=</span> <span class="o">*</span><span class="n">ext</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ext</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="c--1">C++ 语言实现</h3>

<p>实现思路：首先将文件或路径名转换为一个<code>string</code>类，使用它的成员函数<code>rfind</code>找到最后一个<code>.</code>的位置，最后使用<code>substr</code>成员函数返回<code>.</code>后的所有内容，即得后缀名。</p>

<figure class="code"><figcaption><span>get_filename_extension </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">;</span>
</span><span class="line"><span class="n">string</span> <span class="nf">getFileExt</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">rfind</span><span class="p">(</span><span class="sc">&#39;.&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span> <span class="n">i</span><span class="p">));</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="shell-">Shell 脚本实现</h3>

<figure class="code"><figcaption><span>get_filename_extension </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c">#!/bin/sh</span>
</span><span class="line"><span class="nv">fullfilename</span><span class="o">=</span><span class="nv">$1</span>
</span><span class="line"><span class="nv">filename</span><span class="o">=</span><span class="k">$(</span>basename <span class="s2">&quot;$fullfilename&quot;</span><span class="k">)</span>
</span><span class="line"><span class="nv">fname</span><span class="o">=</span><span class="s2">&quot;${filename%.*}&quot;</span>
</span><span class="line"><span class="nv">ext</span><span class="o">=</span><span class="s2">&quot;${filename##*.}&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Input File:$fullfilename&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Filename without Path:$filename&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Filename without Extension:$fname&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;File Extension without Name:$ext&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="section-1">调试信息分级打印</h2>

<p>在工作中，经常遇到需要将调试信息分级打印的情况。比如在码流播放中可能默认要打印出码流的宽高、码流的 CODEC 类型等基本信息，可以定义此类信息级别为<code>LOG_INFO</code>级别；
码流播放时，可能会出现错误，此类信息级别为<code>LOG_ERROR</code>等。</p>

<p>实现思路：将需要打印的信息级别与默认打印信息级别进行比较，级别高时，将信息打印出来；级别低时，不打印信息。</p>

<figure class="code"><figcaption><span>log_level </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define LOG_DEFAULT 2</span>
</span><span class="line"><span class="cp">#define LOG_NONE    (-1)</span>
</span><span class="line"><span class="cp">#define LOG_ERROR   0</span>
</span><span class="line"><span class="cp">#define LOG_WARNING 1</span>
</span><span class="line"><span class="cp">#define LOG_INFO    2</span>
</span><span class="line"><span class="cp">#define LOG_DEBUG   3</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">Printf</span><span class="p">(</span><span class="kt">int</span> <span class="n">i_level</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">psz_fmt</span><span class="p">,</span> <span class="kt">va_list</span> <span class="n">arg</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">   <span class="kt">char</span> <span class="o">*</span><span class="n">psz_prefix</span><span class="p">;</span>
</span><span class="line">   <span class="k">switch</span><span class="p">(</span><span class="n">i_level</span><span class="p">)</span>
</span><span class="line">   <span class="p">{</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">LOG_ERROR</span><span class="p">:</span>
</span><span class="line">            <span class="n">psz_prefix</span> <span class="o">=</span> <span class="s">&quot;error&quot;</span><span class="p">;</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">LOG_WARNING</span><span class="p">:</span>
</span><span class="line">            <span class="n">psz_prefix</span> <span class="o">=</span> <span class="s">&quot;warning&quot;</span><span class="p">;</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">LOG_INFO</span><span class="p">:</span>
</span><span class="line">            <span class="n">psz_prefix</span> <span class="o">=</span> <span class="s">&quot;info&quot;</span><span class="p">;</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">LOG_DEBUG</span><span class="p">:</span>
</span><span class="line">            <span class="n">psz_prefix</span> <span class="o">=</span> <span class="s">&quot;debug&quot;</span><span class="p">;</span>
</span><span class="line">            <span class="n">brengak</span><span class="p">;</span>
</span><span class="line">        <span class="k">default</span><span class="o">:</span>
</span><span class="line">            <span class="n">psz_prefix</span> <span class="o">=</span> <span class="s">&quot;unknown&quot;</span><span class="p">;</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line">   <span class="n">vfprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="n">psz_fmt</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">LOG_PRINT</span><span class="p">(</span><span class="kt">int</span> <span class="n">i_level</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">psz_fmt</span><span class="p">,</span> <span class="p">...);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">LOG_PRINT</span><span class="p">(</span><span class="kt">int</span> <span class="n">i_level</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">psz_fmt</span><span class="p">,</span> <span class="p">...)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">i_level</span> <span class="o">&lt;=</span> <span class="n">LOG_DEFAULT</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">va_list</span> <span class="n">arg</span><span class="p">;</span>
</span><span class="line">        <span class="n">va_start</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="n">psz_fmt</span><span class="p">);</span>
</span><span class="line">        <span class="n">Printf</span><span class="p">(</span><span class="n">i_level</span><span class="p">,</span> <span class="n">psz_fmt</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span><span class="line">        <span class="n">va_end</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="section-2">分析特定格式的文件</h2>

<p>工作中在验证芯片的<code>vdec</code>模块是否正常工作时，需要大量的跑一些码流，这些码流通常会放到一个<code>filelist</code>中，因为需要测试的项不同，此时就可以
通过按照一定的格式并列存放这些码流，例如根据不同的<code>codec</code>、测试比较<code>YUV</code>或<code>CRC</code>，是要连续测试，还是要中途停止方便<code>Debug</code>问题，我们可以按照如下格式对<code>filelist</code>进行定义：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Codec_Type  Compare_Type Test_Type Bitstream_Full_Path</span></code></pre></td></tr></table></div></figure>

<p>对于上面这种<code>filelist</code>，可以通过<code>fscanf</code>来逐个的获取特定的字符串，并通过<code>feof</code>来判断文件文件是否读取完毕， 之后使用<code>strcmp</code>来与特定的字符串进行匹配。例如，有如下的一个<code>filelist.txt</code>：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">HEVC Compare_CRC Debug F:\FFmpeg\hevc_bitstream1.bin
</span><span class="line">H264 Compare_YUV Release F:\FFmpeg\h264_bitstream2.bin</span></code></pre></td></tr></table></div></figure>

<p>分析<code>filelist.txt</code>示例代码：</p>

<figure class="code"><figcaption><span>parse_filelist </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">char</span> <span class="n">Codec_Type</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line"><span class="kt">char</span> <span class="n">Compare_Type</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line"><span class="kt">char</span> <span class="n">Release_Type</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line"><span class="kt">char</span> <span class="n">Bitstream_Path</span><span class="p">[</span><span class="mi">200</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="kt">FILE</span> <span class="o">*</span><span class="n">pFile</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;./filelist.txt&quot;</span><span class="p">,</span> <span class="s">&quot;rb&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">pFile</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;open file fail %s&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">feof</span><span class="p">(</span><span class="n">pFile</span><span class="p">))</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">fscanf</span><span class="p">(</span><span class="n">pFile</span><span class="p">,</span> <span class="s">&quot;%s %s %s %s&quot;</span><span class="p">,</span> <span class="n">Codec_Type</span><span class="p">,</span> <span class="n">Compare_Type</span><span class="p">,</span> <span class="n">Release_Type</span><span class="p">,</span> <span class="n">Bitstream_Path</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="s">&quot;HEVC&quot;</span><span class="p">,</span> <span class="n">Codec_Type</span><span class="p">))</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Codec Type is HEVC</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="s">&quot;H264&quot;</span><span class="p">,</span> <span class="n">Codec_Type</span><span class="p">))</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Codec Type is H264</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strcasecmp</span><span class="p">(</span><span class="s">&quot;hevc&quot;</span><span class="p">,</span> <span class="n">Codec_Type</span><span class="p">))</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Codec Type is HEVC</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>

<p>注意上面表示出来了通过<code>strcmp</code>来判断<code>Codec_Type</code>的类型，后面的<code>Compare_Type</code>可以用同样的方法来给出。</p>

<p>在使用过程中，人们并不会特别在意字母的大小写，但要表达的意思通常是一样的，比如<code>HEVC</code><code>hevc</code><code>Hevc</code>通过都是一样的，如果此时还用<code>strcmp</code>来判断，会出错，为此，我们提出了<code>strcasecmp</code>的使用方法，来避免大小写带来的问题，这也算是编写类似代码的一个小技巧。</p>

<h2 id="fopen-">fopen 函数个数限制</h2>

<p>严格来讲，这个并不是编程的一些小的技巧，而是自己在工作中遇到的一个小问题，最近在每晚上跑测试时，经常遇到一晚上跑完 503 个测试后，程序就会崩溃掉，给出的提示信息是”Open File Fail”,起初是通过观察<code>errno</code>的类型来<code>Debug</code>出错的原因，最后定位到问题是，
对每个文件都打开了两次，而关闭只有一次，导致文件描述符的个数爆掉了。这个问题的原因是在不同的系统中，都会有对文件描述符的最大个数有一定的限制。</p>

<p>在&lt;UNIX环境高级编程:文件I/O&gt;中有这样的解释：</p>

<blockquote>
  <p>当读或写一个文件时，使用<code>open</code>返回的文件描述符标识该文件，将其作为参数传送给<code>read</code>或<code>write</code>。文件描述符的变化范围是<code>0~OPEN_MAX</code>。</p>
</blockquote>

<p>关于文件描述符的最大个数问题，从<code>stackoverflow</code>上找到了以下几个问题的回复，可参考：</p>

<p><a href="https://stackoverflow.com/questions/870173/is-there-a-limit-on-number-of-open-files-in-windows">1.Is there a limit on number of open files in Windows</a><br />
<a href="https://stackoverflow.com/questions/17931583/maximum-number-of-files-that-can-be-opened-by-c-fopen-in-linux">2.maximum-number-of-files-that-can-be-opened-by-c-fopen-in-linux</a><br />
<a href="https://stackoverflow.com/questions/3184345/fopen-problem-too-many-open-files">3.fopen-problem-too-many-open-files</a></p>

<p>关于<code>fopen</code>的使用，通常会判断返回值是否<code>NULL</code>来判断是否打开成功，其实除此之外，还可以继续监测出错的类型<code>errno</code>，并用<code>strerror()</code>函数直接显示出错的具体原因。技巧如下：</p>

<figure class="code"><figcaption><span>fopen_tips </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;error.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">FILE</span> <span class="o">*</span><span class="n">pFile</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;file_full_path&quot;</span><span class="p">,</span> <span class="s">&quot;rb&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">pFile</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Open File Fail:%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[视频编解码算法之编码]]></title>
    <link href="http://lazybing.github.io/blog/2017/09/12/video-coding/"/>
    <updated>2017-09-12T07:34:26-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/09/12/video-coding</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#exp-golomb-" id="markdown-toc-exp-golomb-">Exp-Golomb 哥伦布编码</a></li>
  <li><a href="#cavlc-" id="markdown-toc-cavlc-">CAVLC 基于上下文自适应的可变长编码</a></li>
  <li><a href="#cabac-" id="markdown-toc-cabac-">CABAC 基于上下文的自适应二进制算术熵编码</a></li>
  <li><a href="#section" id="markdown-toc-section">参考文献</a></li>
</ul>

<p>本文记录<code>H.264</code>编解码器使用到的编码算法，包括<code>Exp-Golomb(哥伦布编码)</code>、<code>CAVLC(基于上下文自适应的可变长编码)</code>、<code>CABAC(基于上下文的自适应二进制算术熵编码)</code>。<br />
<!--more--></p>

<p>H264 编码格式的码流包含许多编码符合，这些编码符号包括各种<code>syntax</code>、参数、预测类型、不同编码的运动矢量、转换系数等等。H264/AVC 标准
有多种编码方法：</p>

<ul>
  <li>Fixed length code(定长编码):符号被转换成特定长度(n bits)的二进制码字。</li>
  <li>Exponential-Golomb variable length code(哥伦布变长编码):符号被编码成哥伦布码字，通常越短的哥伦布码字用于表示大概率出现的符号。</li>
  <li>CAVLC(基于上下文自适应的可变长编码):</li>
  <li>CABAC(基于上下文的自适应二进制算术熵编码):</li>
</ul>

<h2 id="exp-golomb-">Exp-Golomb 哥伦布编码</h2>

<h2 id="cavlc-">CAVLC 基于上下文自适应的可变长编码</h2>

<h2 id="cabac-">CABAC 基于上下文的自适应二进制算术熵编码</h2>

<h2 id="section">参考文献</h2>

<ol>
  <li><a href="http://files.cnblogs.com/files/irish/The_H.264_advanced_video_compression_standard.pdf">THE H.264 ADVANCED VIDEO COMPRESSION STANDARD</a></li>
  <li><a href="http://blog.csdn.net/yu_yuan_1314/article/details/8969950">指数哥伦布编码</a></li>
  <li><a href="http://www.cnblogs.com/TaigaCon/p/3571651.html">指数哥伦布编码</a></li>
  <li><a href="http://www.cnblogs.com/DwyaneTalk/p/4035206.html">H.264学习笔记6——指数哥伦布编码</a></li>
  <li><a href="http://wobblycucumber.blogspot.com/2013/12/cavlc-encoder-demo.html">CAVLC Encoder Demo</a></li>
  <li><a href="http://wobblycucumber.blogspot.com/2013/12/cavlc-encoding-tutorial.html">CAVLC Encoding Tutorial</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令之Grep]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/25/linux-command-grep/"/>
    <updated>2017-08-25T22:46:22-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/25/linux-command-grep</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">语法结构</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">基础应用</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">高阶应用</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">参考文献</a></li>
</ul>

<p>本文主要记录 Linux 中常用命令之一 Grep 的使用方法。
<a href="https://en.wikipedia.org/wiki/Grep">grep</a> 是个命令行工具，它主要用于搜索文件中与规则表达式的纯文本数据相匹配的行。它是<code>globally search a regular expression and print</code>的简写，主要用在类 Unix 系统中。</p>

<!--more-->

<h2 id="section">语法结构</h2>

<blockquote>
  <p>grep [options] PATTERN [FILES…]</p>
</blockquote>

<p>先来总结几个基本的<code>options</code>的作用：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">选项</th>
      <th style="text-align: center">含义</th>
      <th style="text-align: center">示例</th>
      <th style="text-align: center">备注</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">–help</td>
      <td style="text-align: center">显示帮助信息</td>
      <td style="text-align: center">grep –help</td>
      <td style="text-align: center">一般选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-V(–version)</td>
      <td style="text-align: center">显示版本号信息</td>
      <td style="text-align: center">grep -V</td>
      <td style="text-align: center">一般选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-e pattern</td>
      <td style="text-align: center">匹配 pattern 所指的选项，可与<code>-f file</code>一起使用</td>
      <td style="text-align: center">grep -e “abc” -e “def” test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-f file</td>
      <td style="text-align: center">从 file 中获取 pattern，每行</td>
      <td style="text-align: center">grep -f file test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-i(–ignore-case)/-y</td>
      <td style="text-align: center">忽略匹配大小写</td>
      <td style="text-align: center">grep -i “abc” test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-v(–invert-match)</td>
      <td style="text-align: center">不匹配 pattern 中的某行</td>
      <td style="text-align: center">grep -v “abc” test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-w(–word-regexp)</td>
      <td style="text-align: center">只匹配全 pattern 字的行</td>
      <td style="text-align: center">grep -w “abc” test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-x(–line-regexp)</td>
      <td style="text-align: center">匹配全 pattern 行</td>
      <td style="text-align: center">grep -x “abc” test.txt</td>
      <td style="text-align: center">匹配选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-c(–count)</td>
      <td style="text-align: center">输出匹配的行数</td>
      <td style="text-align: center">grep -c “abc” test.txt</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-L(–files-without-match)</td>
      <td style="text-align: center">输出没有匹配的文件</td>
      <td style="text-align: center">grep -L “abc” *</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-l(–files-with-matches)</td>
      <td style="text-align: center">输出匹配的文件</td>
      <td style="text-align: center">grep -l “abc” *</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-m num(–max-count=num)</td>
      <td style="text-align: center">输出匹配的前 num 个</td>
      <td style="text-align: center">grep -m 3 “abc” test.txt</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-b(–byte-offset)</td>
      <td style="text-align: center">每行输出匹配字符在文件中的偏移</td>
      <td style="text-align: center">grep -b “abc” test.txt</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-H(–with-filename)</td>
      <td style="text-align: center">输出匹配的文件名</td>
      <td style="text-align: center">grep -H “abc” *</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-h(–no-filenmae)</td>
      <td style="text-align: center">输出不匹配的文件名</td>
      <td style="text-align: center">grep -h “abc” *</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-n(–line-number)</td>
      <td style="text-align: center">输出匹配所在文件的行号</td>
      <td style="text-align: center">grep -n “abc” test.txt</td>
      <td style="text-align: center">输出格式选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-A num(–after-context=num)</td>
      <td style="text-align: center">输出匹配行后的 num 行内容</td>
      <td style="text-align: center">grep -A 2 “abc” test.txt</td>
      <td style="text-align: center">输出内容选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-B num(–before-context=num)</td>
      <td style="text-align: center">输出匹配行前的 num 行内容</td>
      <td style="text-align: center">grep -B 2 “abc” test.txt</td>
      <td style="text-align: center">输出内容选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-C num(-num/–context=num)</td>
      <td style="text-align: center">输出匹配行前后 num 行的内容</td>
      <td style="text-align: center">grep -C 2 “abc” test.txt</td>
      <td style="text-align: center">输出内容选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-r(–recursive)</td>
      <td style="text-align: center">递归搜索目录文件，但不搜索链接文件</td>
      <td style="text-align: center">grep -r “abc” ./</td>
      <td style="text-align: center">文件和目录选项</td>
    </tr>
    <tr>
      <td style="text-align: center">-R(–dereference-recursive)</td>
      <td style="text-align: center">递归搜索所有目录文件，包含链接文件</td>
      <td style="text-align: center">grep -R “abc” ./</td>
      <td style="text-align: center">文件和目录选项</td>
    </tr>
  </tbody>
</table>

<p>除了<code>options</code>外，下面记录下<code>PATTERN</code>的使用：</p>

<ul>
  <li><code>.</code> : 匹配一个字符。</li>
  <li><code>?</code> : 最多匹配一个字符。</li>
  <li><code>*</code> : 匹配若干个字符，或者空字符。</li>
  <li><code>^</code> : 指代匹配字符位于一行的最开始。</li>
  <li><code>$</code> : 指代匹配字符位于一行的最末尾。</li>
  <li><code>{num}</code> : 重复匹配 num 次。</li>
  <li><code>{n,}</code> : 重复匹配至少 n 次。</li>
  <li><code>{,m}</code> : 重复匹配最多 m 次。</li>
  <li><code>{n,m}</code> : 重复匹配最少 n 次，最多 m 次。</li>
  <li><code>[   ]</code> : 包含匹配 [] 内的某个字符，如[a-d]代表’abcd’中的某个。</li>
</ul>

<h2 id="section-1">基础应用</h2>

<p>搜索<code>text.txt</code>文件中是否包含<code>abc</code>的字符串，并提示匹配的行号。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep -n abc text.txt</span></code></pre></td></tr></table></div></figure>

<p>搜索<code>text.txt</code>文件中不包含<code>abc</code>字符串的行，并显示出来。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep -ni abc text.txt</span></code></pre></td></tr></table></div></figure>

<p>搜索<code>text.txt</code>文件中包含<code>abc</code>字符串的行，不区分大小写，并显示出来。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep -nv abc text.txt</span></code></pre></td></tr></table></div></figure>

<p>搜索包含特殊字符的字符串，并显示出来，如搜索<code>a*b</code>。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep -f "a*b" text.txt</span></code></pre></td></tr></table></div></figure>

<p>搜索当前目录下所有文件包含<code>abc</code>字符串的行。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep -r abc *</span></code></pre></td></tr></table></div></figure>

<p>搜索包含<code>abc</code>或<code>aabc</code>或<code>aaabc</code>字符串的行。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep "a\{1,3\}bc" text.txt   </span></code></pre></td></tr></table></div></figure>

<p>边界表示<code>\b</code>。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep "\babc" text.txt //搜索起始字段为abc的字符串的行
</span><span class="line">grep "abc\b" text.txt //搜索结尾字段为abc的字符串的行
</span><span class="line">grep "\babc\b" text.txt //搜索起始结尾字段为abc的字符串的行，与-w选项相同</span></code></pre></td></tr></table></div></figure>

<p>搜索多个文件，仅仅输出匹配到的文件名。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep -l abc *</span></code></pre></td></tr></table></div></figure>

<h2 id="section-2">高阶应用</h2>

<p>使用<code>grep</code>的 OR/AND/NOT 操作。比如想要搜索某个文件中是否含有<code>abc</code>或<code>def</code>字符串，就会用到 grep 的 OR 操作；想要同时搜索既含有<code>abc</code>又含有<code>def</code>字符串，就会用到 grep 的 AND 操作；想要搜索不包含<code>abc</code>的字符串，就会用到 grep 的 NOT 操作。</p>

<p>OR 操作方法：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep "abc\|def" text.txt   //or   
</span><span class="line">grep -E "abc|def" text.txt //or  
</span><span class="line">egrep "abc|def" text.txt   //or  
</span><span class="line">grep -e "abc" -e "def" text.txt  //or  </span></code></pre></td></tr></table></div></figure>

<p>AND 操作方法：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep -E "pattern1.*pattern2|pattern2.*pattern1" text.txt //and
</span><span class="line">grep -E "pattern1" text.txt | grep -E "pattern2"  //and</span></code></pre></td></tr></table></div></figure>

<p>NOT 操作方法：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep -v "pattern1" text.txt</span></code></pre></td></tr></table></div></figure>

<h2 id="section-3">参考文献</h2>

<ol>
  <li><a href="https://www.gnu.org/software/grep/manual/grep.html">GNU Grep 3.0 - GNU.org</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Grep">GREP Command Wiki</a></li>
  <li><a href="https://www.computerhope.com/unix/ugrep.htm">Linux grep command</a></li>
</ol>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令之Find]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/25/linux-command-find/"/>
    <updated>2017-08-25T08:39:05-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/25/linux-command-find</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#find-" id="markdown-toc-find-">Find 命令概述</a></li>
  <li><a href="#find--1" id="markdown-toc-find--1">Find 命令示例</a></li>
  <li><a href="#section" id="markdown-toc-section">参考资料</a></li>
</ul>

<p>本文主要记录 Linux 中常用命令之一Find 的使用方法。</p>

<!--more-->

<h2 id="find-">Find 命令概述</h2>

<p>Linux 中的 Find 命令是 Linux 系统中最重要最常用的命令之一。它是用来在指定目录下查找文件的，并对查找到的文件进行处理。它的使用格式如下：</p>

<blockquote>
  <p>$find <指定目录> <指定条件> <指定动作></指定动作></指定条件></指定目录></p>
</blockquote>

<ul>
  <li>指定目录:所要搜索的目录，比如默认为当前目录，或指定特定的目录。</li>
  <li>指定条件:所要搜索的文件特征比如文件名称、文件大小、文件属性等。</li>
  <li>指定动作:对搜索结果进行特定的处理，比如对搜索到的结果删除、将搜索结果放到特定文件中。</li>
</ul>

<p>任何位于参数之前的字符串都被视为搜索目录。
它可以根据不同的命令参数选择不同的搜索方式，常用的参数选项有：</p>

<ul>
  <li>-name <filename>:指定搜索文件名称。</filename></li>
  <li>-type <filetype>:指定搜索文件的类型。</filetype></li>
  <li>-size <filesize>:指定搜索文件的大小。</filesize></li>
  <li>-user <username>:指定特定用户。</username></li>
  <li>-group <groupname>:指定特定组。</groupname></li>
  <li>-maxdepth/mindepth <num>:指定搜索目录级别。</num></li>
  <li>-exec <command />:假设 find 指令的回传值为 TRUE，就执行 command 指令。</li>
</ul>

<h2 id="find--1">Find 命令示例</h2>

<p>查看当前目录及其子目录下的所有文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">find</span></code></pre></td></tr></table></div></figure>

<p>根据名字查找文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//find [dir-path] -name [filename]
</span><span class="line">$ find . -name testfile1.txt
</span><span class="line">$ find /home -name testfile1.txt</span></code></pre></td></tr></table></div></figure>

<p>查找某种特定类型的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>忽视大小写来查找文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//find -iname [filename]
</span><span class="line">$ find -iname testfile1.txt</span></code></pre></td></tr></table></div></figure>

<p>查找与搜索模式不匹配的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -not -name "*.txt"
</span><span class="line">$find . ! -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>限定搜索目录级别。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -maxdepth 3 -name "*.txt"
</span><span class="line">$find . -mindepth 3 -name "*.txt"
</span><span class="line">$find . -mindepth 2 -maxdepth 4 -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>显示所有的空文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -empty</span></code></pre></td></tr></table></div></figure>

<p>查找某个特定组的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -group bing -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>查找某个特定用户的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -user bing -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>查找最近修改过的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -mmin 1 -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>查找特定类型的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// find -type &lt;filetype&gt;
</span><span class="line">$find -type d //查找目录文件</span></code></pre></td></tr></table></div></figure>

<p>查找两种类型的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . \( -name a.out -o -name '*.o' -o name 'core' \) -exec rm {} \;</span></code></pre></td></tr></table></div></figure>

<p>对查找到的文件执行某些命令。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find $HOME/. -name *.txt -exec head -n 1 -v {} \; &gt; report.txt</span></code></pre></td></tr></table></div></figure>

<h2 id="section">参考资料</h2>

<ol>
  <li><a href="https://en.wikipedia.org/wiki/Find">Find Command Wiki</a></li>
  <li><a href="http://man7.org/linux/man-pages/man1/find.1.html">Find Command Man Page</a></li>
  <li><a href="https://www.howtoforge.com/tutorial/linux-find-command/">14 Practical Examples of Linux Find Command for Beginners</a></li>
  <li><a href="https://www.ibm.com/developerworks/cn/aix/library/es-unix-find.html">使用 UNIX find 命令的高级技术</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_quant_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/23/x264-quant-init/"/>
    <updated>2017-08-23T08:43:19-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/23/x264-quant-init</id>
    <content type="html"><![CDATA[
<p>本文主要记录 X264 中使用到的量化。该函数主要对<code>x264_quant_functions_t</code>结构体中的函数指针进行赋值，</p>

<!--more-->

<p>首先看其中的一个例子<code>quant_8x8</code>函数，它的定义位于<code>common/quant.c</code>中，定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">quant_8x8</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="n">dct</span><span class="p">[</span><span class="mi">64</span><span class="p">],</span> <span class="n">udctcoef</span> <span class="n">mf</span><span class="p">[</span><span class="mi">64</span><span class="p">],</span> <span class="n">udctcoef</span> <span class="n">bias</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">nz</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">64</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">        <span class="n">QUANT_ONE</span><span class="p">(</span> <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">mf</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">bias</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="o">!!</span><span class="n">nz</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中<code>QUANT_ONE</code>定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define QUANT_ONE( coef, mf, f ) \</span>
</span><span class="line"><span class="cp">{ \</span>
</span><span class="line"><span class="cp">    if( (coef) &gt; 0 ) \</span>
</span><span class="line"><span class="cp">        (coef) = (f + (coef)) * (mf) &gt;&gt; 16; \</span>
</span><span class="line"><span class="cp">    else \</span>
</span><span class="line"><span class="cp">        (coef) = - ((f - (coef)) * (mf) &gt;&gt; 16); \</span>
</span><span class="line"><span class="cp">    nz |= (coef); \</span>
</span><span class="line"><span class="cp">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_mc_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/22/x264-mc-init/"/>
    <updated>2017-08-22T07:48:31-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/22/x264-mc-init</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">运动补偿原理</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">运动估计</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">参考资料</a></li>
</ul>

<p>本文主要记录 X264 中使用到的运动补偿。该函数主要对<code>x264_mc_functions_t</code>结构体中的函数指针进行赋值，
完成了像素内插、拷贝、求平均的函数等等。</p>

<!--more-->

<h3 id="section">运动补偿原理</h3>

<p><a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF">运动补偿</a>是一种描述相邻帧（相邻指编码关系上的相邻，播放顺序未必相邻）差别的方法，具体来说是描述前一帧的每个小块怎样移动到当前帧中的某个位置去。该方法常被视频压缩/视频编解码器用来减少视频序列中的时域冗余，还可用来进行去交织以及运动插值的操作。</p>

<p>一个视频序列包含一定数量的图片–通常称为帧（frame）。相邻的图片通常很相似，也就是说，包含了很多冗余。使用运动补偿的目的是通过消除这种冗余，来提高压缩比。
最早的运动补偿的设计只是简单的从当前帧中减去参考帧，从而得到通常含有较少能量（或者称为信息）的”残差”，从而可以用较低的码率进行编码。解码器可以通过简单的加法完全恢复编码帧。<br />
一个稍微复杂一点的设计是估计一下整帧场景的移动和场景中物体的移动，并将这些运动通过一定的参数编码到码流中去。这样预测帧上的像素值就是由参考帧上具有一定位移的相应像素值而生成的。这样的方法比简单的相减可以获得能量更小的残差，从而获得更好的压缩比–当然，用来描述运动的参数不能在码流中占据太大的部分，否则就会抵消复杂的运动估计带来的好处。<br />
通常，图像帧是一组一组进行处理的。每组的第一帧（通常是第一帧）在编码的时候不使用运动估计的办法，这种帧称为帧内编码帧（Intra frame）或者I帧。该组中的其它帧使用帧间编码帧（Inter frame），通常是P帧。这种编码方式通常被称为IPPPP，表示编码的时候第一帧是I帧，其它帧是P帧。<br />
在进行预测的时候，不仅仅可以从过去的帧来预测当前帧，还可以使用未来的帧来预测当前帧。当然在编码的时候，未来的帧必须比当前帧更早的编码，也就是说，编码的顺序和播放的顺序是不同的。通常这样的当前帧是使用过去和未来的I帧或者P帧同时进行预测，被称为双向预测帧，即B帧。这种编码方式的编码顺序的一个例子为IBBPBBPBBPBB。</p>

<p>运动补偿的方法包含：<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E5.85.A8.E5.B1.80.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">全局运动补偿</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E5.88.86.E5.9D.97.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">分块运动补偿</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E5.8F.AF.E5.8F.98.E5.88.86.E5.9D.97.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">可变分块运动补偿</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E9.87.8D.E5.8F.A0.E5.88.86.E5.9D.97.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">重叠分块运动个补偿</a>。</p>

<p>运动估计就是寻找最优或次优的运动向量的过程。某个块的预测误差量常常是指在运动补偿区域所有像素中，预测像素和实际像素数值的均方差或者绝对差别总和。</p>

<h3 id="section-1">运动估计</h3>

<p>运动估计的基本思想是将图像序列的每一帧分成许多互不重叠的宏块，并认为宏块内所有象素的位移量都相同，然后对每个宏块到参考帧某一给定特定搜索范围内根据一定的匹配准则找出与当前块最相似的块，即匹配块，匹配块与当前块的相对位移即为运动矢量。视频压缩的时候，只需保存运动矢量和残差数据就可以完全恢复出当前块。得到运动矢量的过程被称为运动估计。</p>

<p>运动矢量和经过运动匹配后得到的预测误差共同发送到解码端，在解码端按照运动矢量指明的位置，从已经解码的邻近参考帧图像中找到相应的块或宏块，和预测误差相加后就得到了块或宏块在当前帧中的位置。</p>

<p>实际应用时，只将运动矢量及最佳匹配块与当前块之间的差值块一起编码传输。在接收端，通过运动矢量在已经恢复的相邻帧中找到当前块的最佳匹配块，并与接收到的差值块相加恢复出当前块，这就是运动补偿基本过程。</p>

<p>运动估计算法是视频压缩编码的核心算法之一。高质量的运动估计算法是高效视频编码的前提和基础。其中块匹配法（BMA, Block Match Algorithm）由于算法简单和易于硬件实现，被广泛应用于各视频编码标准中。块匹配法的基本思想是先将图像划分为许多子块，然后对当前帧中的每一块根据一定的匹配准则在相邻帧中找出当前块的匹配块，由此得到两者的相对位移，即当前块的运动矢量。在H.264标准的搜索算法中，图像序列的当前帧被划分成互不重叠16×16大小的子块，而每个子块又可划分成更小的子块，当前子块按一定的块匹配准则在参考帧中对应位置的一定搜索范围内寻找最佳匹配块，由此得到运动矢量和匹配误差。运动估计的估计精度和运算复杂度取决于搜索策略和块匹配准则。</p>

<h3 id="section-2">参考资料</h3>

<ol>
  <li><a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF">运动补偿——维基百科</a></li>
  <li><a href="http://www.cnblogs.com/AndyJee/p/3724917.html">运动估计</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_deblock_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/22/deblock-filter/"/>
    <updated>2017-07-22T06:16:09-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/22/deblock-filter</id>
    <content type="html"><![CDATA[
<p>本文主要介绍 X264 中滤波的部分,<code>x264_deblock_init</code>函数主要对<code>x264_deblock_function_t</code>结构体中的函数指针赋值。<br />
<!--more--></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_zigzag_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/21/x264-zigzag-init/"/>
    <updated>2017-07-21T17:22:55-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/21/x264-zigzag-init</id>
    <content type="html"><![CDATA[
<p>本文主要记录 X264 中使用到的 zigzag 技术。
<!--more--></p>

<p>X264 中关于 zigzag 的函数定义在<code>dct.c</code>的<code>x264_zigzag_init</code>中。</p>

<p>首先看一下源码中关于 zigzag 的定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_zigzag_init</span><span class="p">(</span> <span class="kt">int</span> <span class="n">cpu</span><span class="p">,</span> <span class="kt">x264_zigzag_function_t</span> <span class="o">*</span><span class="n">pf_progressive</span><span class="p">,</span> <span class="kt">x264_zigzag_function_t</span> <span class="o">*</span><span class="n">pf_interlaced</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pf_interlaced</span><span class="o">-&gt;</span><span class="n">scan_8x8</span>   <span class="o">=</span> <span class="n">zigzag_scan_8x8_field</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_progressive</span><span class="o">-&gt;</span><span class="n">scan_8x8</span>  <span class="o">=</span> <span class="n">zigzag_scan_8x8_frame</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_interlaced</span><span class="o">-&gt;</span><span class="n">scan_4x4</span>   <span class="o">=</span> <span class="n">zigzag_scan_4x4_field</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_progressive</span><span class="o">-&gt;</span><span class="n">scan_4x4</span>  <span class="o">=</span> <span class="n">zigzag_scan_4x4_frame</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_interlaced</span><span class="o">-&gt;</span><span class="n">sub_8x8</span>    <span class="o">=</span> <span class="n">zigzag_sub_8x8_field</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_progressive</span><span class="o">-&gt;</span><span class="n">sub_8x8</span>   <span class="o">=</span> <span class="n">zigzag_sub_8x8_frame</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_interlaced</span><span class="o">-&gt;</span><span class="n">sub_4x4</span>    <span class="o">=</span> <span class="n">zigzag_sub_4x4_field</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_progressive</span><span class="o">-&gt;</span><span class="n">sub_4x4</span>   <span class="o">=</span> <span class="n">zigzag_sub_4x4_frame</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_interlaced</span><span class="o">-&gt;</span><span class="n">sub_4x4ac</span>  <span class="o">=</span> <span class="n">zigzag_sub_4x4ac_field</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_progressive</span><span class="o">-&gt;</span><span class="n">sub_4x4ac</span> <span class="o">=</span> <span class="n">zigzag_sub_4x4ac_frame</span><span class="p">;</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>从源码中可以看出 zigzag 扫描有两种分类方法：按照宏块大小可分为8x8扫描和4x4扫描、按照图像类型可分为<code>frame</code>扫描和<code>field</code>扫描。<br />
首先看一下最简单的4x4宏块帧扫描的代码描述：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define ZIGZAG4_FRAME\</span>
</span><span class="line"><span class="cp">    ZIGDC( 0,0,0) ZIG( 1,0,1) ZIG( 2,1,0) ZIG( 3,2,0)\</span>
</span><span class="line"><span class="cp">    ZIG( 4,1,1) ZIG( 5,0,2) ZIG( 6,0,3) ZIG( 7,1,2)\</span>
</span><span class="line"><span class="cp">    ZIG( 8,2,1) ZIG( 9,3,0) ZIG(10,3,1) ZIG(11,2,2)\</span>
</span><span class="line"><span class="cp">    ZIG(12,1,3) ZIG(13,2,3) ZIG(14,3,2) ZIG(15,3,3)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define ZIG(i,y,x) level[i] = dct[x*4+y];</span>
</span><span class="line"><span class="cp">#define ZIGDC(i,y,x) ZIG(i,y,x)</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">zigzag_scan_4x4_frame</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="n">level</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="n">dctcoef</span> <span class="n">dct</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">ZIGZAG4_FRAME</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>将上面的定义展开如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

<p>上面的代码只是简单的把一个4x4 宏块的二维数组扫描成了一个一维线性数组，但具体的扫描行为不够形象。</p>

<p>在<a href="http://files.cnblogs.com/files/irish/The_H.264_advanced_video_compression_standard.pdf">The H.264 advanced video compression standard</a>里有如下描述：</p>

<blockquote><p>Blocks of transform coefficients are scanned, i.e. converted to linear array, prior to entropy coding. The scan order is intended to group together significant coefficients, i.e. non-zero quantized coefficients. In a typical block in a progressive frame, non-zero coefficients tend to be clustered around the top left'DC' coefficient. In this case, a zigzag scan order may be the most efficient, shown in 4x4 and 8x8 blocks. After scanning the block in a zigzag order, the coefficients are placed in a linear array in which most of the non-zero coefficients tend to occur near the start of the array.</p><p>However, in an interlaced field or a field of a progressive frame converted from interlaced content, vertical frequencies in each block tend to dominate because the field is vertically sub-sampled from the original scene. This means that non-zero coefficients ten to occur at the top and towards the left side of the block. A block in a field macroblock is therefore scanned in a modified field scan order.</p><footer><strong>Block scan orders</strong></footer></blockquote>

<p>通过描述可以看出，通过扫描后，非零系统会集中在一维线性数组最开始的几个位置。示例图如下：</p>

<p><img src="http://lazybing.github.io/images/zigzag/progressive_scan_orders.png" /></p>

<p><img src="http://lazybing.github.io/images/zigzag/field_scan_orders.png" /></p>

<p>上面的图片给出了扫描的顺序，X264 中的源码，与 4x4 frame 类似，此处不在重复。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之码流控制]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/15/x264-rake-control/"/>
    <updated>2017-07-15T07:19:27-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/15/x264-rake-control</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">码率控制基本概念</a></li>
  <li><a href="#x264-" id="markdown-toc-x264-">X264 中码率控制</a>    <ul>
      <li><a href="#x264--qp" id="markdown-toc-x264--qp">X264 中关于 QP</a></li>
    </ul>
  </li>
  <li><a href="#section-1" id="markdown-toc-section-1">参考文档</a></li>
</ul>

<p>本文主要记录 X264 中使用到的码流控制。</p>

<!--more-->

<h2 id="section">码率控制基本概念</h2>

<p>码率控制是指视频编码中决定输出码率的过程。首先介绍一下 X264 中使用到的与码率控制相关的几个概念：</p>

<ul>
  <li>
    <p>CQP(Constant QP),恒定QP（Quantization Parameter）,追求量化失真的恒定，瞬时码率会随场景
复杂度而波动，该模式基本被淘汰(被 CRF 取代)，只有用”-pq 0”来进行无损编码还有价值。</p>
  </li>
  <li>
    <p>CRF(Constant Rate Factor),恒定质量因子，与恒定 QP 类似，但追求主观感知到的质量恒定，瞬时码率也
会随场景复杂度波动。对于快速运动或细节丰富的场景会适当增大量化失真（因为人眼不易注意到），反之
对于静止或平坦区域则减少量化失真。</p>
  </li>
  <li>
    <p>ABR(Average Bitrate),平均码率，追求整个文件的码率平均达到指定值（对于流媒体有何特殊之处？）。
瞬时码率也会随着场景复杂度波动，但最终要受平均值的约束。</p>
  </li>
  <li>
    <p>CBR(Constant Bitrate),恒定码率。前面几个模式都属于可变码率（瞬时码率在波动），即VBR（Variable Bitrate）；
恒定码率与之相对，即码率保持不变。</p>
  </li>
</ul>

<p>x264 并没有直接提供 CBR 这种模式，但可以通过在 VBR 模式的基础上做进一步限制来达到恒定码率的目标。
CRF 和 ABR 模式都能通过<code>--vbv-maxrate</code> <code>--vbv-bufsize</code>来限制码率波动。</p>

<p>关于这几个概念的参考如下：</p>

<p>1.<a href="https://codesequoia.wordpress.com/2010/04/19/what-are-cbr-vbv-and-cpb/">Waht are CBR,VBV and CPB?</a><br />
2.<a href="https://trac.ffmpeg.org/wiki/Encode/H.264">FFmpeg and H.264 Encoding Guide</a><br />
3.<a href="http://slhck.info/video/2017/02/24/crf-guide.html">CRF Guide(Constant Rate Factor in X264 and X265)</a><br />
4.<a href="https://en.wikibooks.org/wiki/MeGUI/x264_Settings">MeGUI/x264 setting</a></p>

<h2 id="x264-">X264 中码率控制</h2>

<p>X264 中对于码率控制方法有三种：X264_RC_CQP、X264_RC_CRF、X264_RC_ABR。默认情况是选择 CRF 方法，设置是在
<code>x264_param_default</code>函数里设置的</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">param-&gt;rc.i_rc_method = X264_RC_CRF;
</span><span class="line">param-&gt;rc.f_rf_constant = 23;</span></code></pre></td></tr></table></div></figure>
<p>关于这三种方法，网上有提到优先级是<code>ABR&gt;CQP&gt;CRF</code>的，但分析 X264 的源码，并没有看出有优先级顺序，关于码率控制方法的设置代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="n">OPT</span><span class="p">(</span><span class="s">&quot;bitrate&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_bitrate</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_rc_method</span> <span class="o">=</span> <span class="n">X264_RC_ABR</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">OPT2</span><span class="p">(</span><span class="s">&quot;qp&quot;</span><span class="p">,</span> <span class="s">&quot;qp_constant&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_rc_method</span> <span class="o">=</span> <span class="n">X264_RC_CQP</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">OPT</span><span class="p">(</span><span class="s">&quot;crf&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">f_rf_constant</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_rc_method</span> <span class="o">=</span> <span class="n">X264_RC_CRF</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="x264--qp">X264 中关于 QP</h3>

<p>首先看一段 X264 中关于 QP 值的代码，该段代码在<code>x264_ratecontrol_new</code>：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">rc</span><span class="o">-&gt;</span><span class="n">ip_offset</span> <span class="o">=</span> <span class="mf">6.0</span> <span class="o">*</span> <span class="n">log2f</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_ip_factor</span><span class="p">);</span>
</span><span class="line"><span class="n">rc</span><span class="o">-&gt;</span><span class="n">pb_offset</span> <span class="o">=</span> <span class="mf">6.0</span> <span class="o">*</span> <span class="n">log2f</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_pb_factor</span><span class="p">);</span>
</span><span class="line"><span class="n">rc</span><span class="o">-&gt;</span><span class="n">qp_constant</span><span class="p">[</span><span class="n">SLICE_TYPE_P</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span><span class="p">;</span>
</span><span class="line"><span class="n">rc</span><span class="o">-&gt;</span><span class="n">qp_constant</span><span class="p">[</span><span class="n">SLICE_TYPE_I</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_clip3</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span> <span class="o">-</span> <span class="n">rc</span><span class="o">-&gt;</span><span class="n">ip_offset</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">QP_MAX</span><span class="p">);</span>
</span><span class="line"><span class="n">rc</span><span class="o">-&gt;</span><span class="n">qp_constant</span><span class="p">[</span><span class="n">SLICE_TYPE_B</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_clip3</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span> <span class="o">+</span> <span class="n">rc</span><span class="o">-&gt;</span><span class="n">pb_offset</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">QP_MAX</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>从上面的代码可以看出，默认的<code>i_qp_constant</code>或者通过命令行传入的<code>qp</code> <code>qp_constant</code>实际设置的是 P 帧的 QP。
I 帧和 B 帧的 QP 设置是根据<code>f_ip_factor</code> <code>f_pb_factor</code>计算得到。</p>

<p>在研究编码算法的时候，一般会选用 CQP 方法，设定 QP 为 24、28、32、36、40等（一般选 4 个 QP 值），然后比较算法优劣。
在 X264 中，关于QPmin、QPmax、QPstep的默认设置如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">param</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_min</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="n">param</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_max</span> <span class="o">=</span> <span class="n">QP_MAX</span><span class="p">;</span>
</span><span class="line"><span class="n">param</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_step</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>
    <p>QPmin,默认值：0.定义 X264 可以使用的最小量化值，量化值越小，输出视频质量越好。当 QP 小于某一个值后，
编码输出的宏块质量与原始块极为相近，此时没必要继续降低 QP。如果开启了自适应量化器（默认开启），不建议
提高 QPmin 的值，因为这会降低平滑背景区域的视觉质量。</p>
  </li>
  <li>
    <p>QPmax，默认值：51.定义 X264 可以使用的最大量化值。默认值 51 是 H.264 规格中可供使用的最大量化值。如果
想要控制 X264 输出的最低品质，可以将此值设置的小一些。QPmin 和 QPmax 在CRF，ABR方法下是有效的，过低的设置
QPmax，可能造成 ABR 码率控制失败。不建议调整该参数。</p>
  </li>
  <li>
    <p>QPstep，默认值：4.设置两帧间量化值的最大变化幅度。</p>
  </li>
</ul>

<p>帧间 QP 变化，帧内宏块 QP 不变，输出码率未知，各帧输出视觉质量有变化（高 QP 底码率的情况下会更明显）。</p>

<p>比较三种码率控制方式如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">码率控制方法</th>
      <th style="text-align: center">视觉质量稳定性</th>
      <th style="text-align: center">即时输出码率</th>
      <th style="text-align: center">输出文件大小</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">CBR</td>
      <td style="text-align: center">不稳定</td>
      <td style="text-align: center">恒定</td>
      <td style="text-align: center">可控</td>
    </tr>
    <tr>
      <td style="text-align: center">VBR</td>
      <td style="text-align: center">稳定</td>
      <td style="text-align: center">变化</td>
      <td style="text-align: center">不可控</td>
    </tr>
    <tr>
      <td style="text-align: center">ABR</td>
      <td style="text-align: center">基本稳定</td>
      <td style="text-align: center">变化</td>
      <td style="text-align: center">可控</td>
    </tr>
  </tbody>
</table>

<h2 id="section-1">参考文档</h2>

<ol>
  <li><a href="https://mailman.videolan.org/pipermail/x264-devel/2010-February/006933.html">Making sense out of x264 rate control methods</a></li>
  <li><a href="http://slhck.info/video/2017/03/01/rate-control.html">Understanding Rate Control Modes (x264, x265)</a></li>
  <li><a href="http://slhck.info/video/2017/02/24/crf-guide.html">CRF Guide (Constant Rate Factor in x264 and x265)</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_dct_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/10/x264-dct-init/"/>
    <updated>2017-07-10T08:48:23-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/10/x264-dct-init</id>
    <content type="html"><![CDATA[
<p>本文主要记录 X264 中对于 DCT 变换的初始化过程。</p>

<!--more-->

<p>DCT 变化理论比较抽象，先从 X264 中代码入手，然后经过 DCT 变换后，比较变换前和变换后的数据，能够更好的理解 DCT 变换。</p>

<p>X264 中对 DCT 各类函数的定义都在<code>common/dct.c</code>里面。其中 sub4x4_dct 定义如下：</p>

<figure class="code"><figcaption><span>sub4x4_dct </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">pixel_sub_wxh</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="o">*</span><span class="n">diff</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i_size</span><span class="p">,</span>
</span><span class="line">                                  <span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i_pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i_pix2</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">i_size</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">i_size</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">            <span class="n">diff</span><span class="p">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">i_size</span><span class="p">]</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
</span><span class="line">        <span class="n">pix1</span> <span class="o">+=</span> <span class="n">i_pix1</span><span class="p">;</span>
</span><span class="line">        <span class="n">pix2</span> <span class="o">+=</span> <span class="n">i_pix2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">sub4x4_dct</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="n">dct</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">dctcoef</span> <span class="n">d</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class="line">    <span class="n">dctcoef</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">pixel_sub_wxh</span><span class="p">(</span> <span class="n">d</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">pix1</span><span class="p">,</span> <span class="n">FENC_STRIDE</span><span class="p">,</span> <span class="n">pix2</span><span class="p">,</span> <span class="n">FDEC_STRIDE</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">s03</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">s12</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">d03</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">d12</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">+</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">d03</span> <span class="o">+</span>   <span class="n">d12</span><span class="p">;</span>
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">-</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span>   <span class="n">d03</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">d12</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">s03</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">s12</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">d03</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">d12</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">        <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">+</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class="line">        <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">d03</span> <span class="o">+</span>   <span class="n">d12</span><span class="p">;</span>
</span><span class="line">        <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">-</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class="line">        <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span>   <span class="n">d03</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">d12</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中的<code>pixel_sub_wxh</code>是获取 pix1 和 pix2 两块数据的残差。这里对 pix1 和 pix2 随意举两个相似的4x4的矩阵作为例子，
之所以要<code>随意</code>是为了突出其普遍性，适用于大多数的 DCT 变换；而<code>相似</code>是因为 pix1 为编码块，pix2 为预测块，它们理论上就应该是相似的。为此举例如下：</p>

<p>$pix1[4x4]=[(23,24,27,29),(24,25,28,28),(26,28,29,29),(26,25,28,30)];$<br />
$pix2[4x4]=[(20,23,27,29),(23,24,26,27),(25,26,25,28),(26,24,28,30)];$</p>

<p>将 pix1 和 pix2 经过<code>pixel_sub_wxh</code>的计算后，得到矩阵d[4x4]为[(3,1,0,0),(1,1,2,1),(1,2,4,1),(0,1,0,0)]。<br />
经第一个for循环后得到tmp[4x4]=[]</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_pixel_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/08/x264-pixel-init-function/"/>
    <updated>2017-07-08T22:10:59-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/08/x264-pixel-init-function</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#sadsatdssd" id="markdown-toc-sadsatdssd">SAD、SATD、SSD等相关知识介绍</a></li>
  <li><a href="#x264" id="markdown-toc-x264">X264中的函数实现</a>    <ul>
      <li><a href="#sad-" id="markdown-toc-sad-">SAD 实现过程</a></li>
      <li><a href="#ssd-" id="markdown-toc-ssd-">SSD 实现过程</a></li>
      <li><a href="#satd-" id="markdown-toc-satd-">SATD 实现过程</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录<code>x264_pixel_init</code>函数的实现，该函数主要是与像素计算有关的函数，包括SAD、SATD、SSD、SSIM等，它会在打开编码器(x264_encoder_open)时被调用到。<br />
<!--more--></p>

<h2 id="sadsatdssd">SAD、SATD、SSD等相关知识介绍</h2>

<ul>
  <li>SAD(Sum of Absolute Difference)= SAE(Sum of Absolute Error)即绝对误差和</li>
  <li>SATD（Sum of Absolute Transformed Difference）即hadamard变换后再绝对值求和</li>
  <li>SSD（Sum of Squared Difference）=SSE（Sum of Squared Error)即差值的平方和</li>
  <li>MAD（Mean Absolute Difference）=MAE（Mean Absolute Error)即平均绝对差值</li>
  <li>MSD（Mean Squared Difference）=MSE（Mean Squared Error）即平均平方误差</li>
</ul>

<h2 id="x264">X264中的函数实现</h2>

<p><code>x264_pixel_init</code>函数的定义位于 X264 项目中的<code>common/pixel.c</code>文件中。定义如下：</p>

<figure class="code"><figcaption><span>x264_pixel_init </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_pixel_init</span><span class="p">(</span> <span class="kt">int</span> <span class="n">cpu</span><span class="p">,</span> <span class="kt">x264_pixel_function_t</span> <span class="o">*</span><span class="n">pixf</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">memset</span><span class="p">(</span> <span class="n">pixf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">pixf</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define INIT2_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_16x16] = x264_pixel_##name2##_16x16##cpu;\</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_16x8]  = x264_pixel_##name2##_16x8##cpu;</span>
</span><span class="line"><span class="cp">#define INIT4_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    INIT2_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_8x16]  = x264_pixel_##name2##_8x16##cpu;\</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_8x8]   = x264_pixel_##name2##_8x8##cpu;</span>
</span><span class="line"><span class="cp">#define INIT5_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    INIT4_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_8x4]   = x264_pixel_##name2##_8x4##cpu;</span>
</span><span class="line"><span class="cp">#define INIT6_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    INIT5_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_4x8]   = x264_pixel_##name2##_4x8##cpu;</span>
</span><span class="line"><span class="cp">#define INIT7_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    INIT6_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_4x4]   = x264_pixel_##name2##_4x4##cpu;</span>
</span><span class="line"><span class="cp">#define INIT8_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    INIT7_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_4x16]  = x264_pixel_##name2##_4x16##cpu;</span>
</span><span class="line"><span class="cp">#define INIT2( name, cpu ) INIT2_NAME( name, name, cpu )</span>
</span><span class="line"><span class="cp">#define INIT4( name, cpu ) INIT4_NAME( name, name, cpu )</span>
</span><span class="line"><span class="cp">#define INIT5( name, cpu ) INIT5_NAME( name, name, cpu )</span>
</span><span class="line"><span class="cp">#define INIT6( name, cpu ) INIT6_NAME( name, name, cpu )</span>
</span><span class="line"><span class="cp">#define INIT7( name, cpu ) INIT7_NAME( name, name, cpu )</span>
</span><span class="line"><span class="cp">#define INIT8( name, cpu ) INIT8_NAME( name, name, cpu )</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define INIT_ADS( cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;ads[PIXEL_16x16] = x264_pixel_ads4##cpu;\</span>
</span><span class="line"><span class="cp">    pixf-&gt;ads[PIXEL_16x8] = x264_pixel_ads2##cpu;\</span>
</span><span class="line"><span class="cp">    pixf-&gt;ads[PIXEL_8x8] = x264_pixel_ads1##cpu;</span>
</span><span class="line">
</span><span class="line">    <span class="n">INIT8</span><span class="p">(</span> <span class="n">sad</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT8_NAME</span><span class="p">(</span> <span class="n">sad_aligned</span><span class="p">,</span> <span class="n">sad</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT7</span><span class="p">(</span> <span class="n">sad_x3</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT7</span><span class="p">(</span> <span class="n">sad_x4</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT8</span><span class="p">(</span> <span class="n">ssd</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT8</span><span class="p">(</span> <span class="n">satd</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT7</span><span class="p">(</span> <span class="n">satd_x3</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT7</span><span class="p">(</span> <span class="n">satd_x4</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT4</span><span class="p">(</span> <span class="n">hadamard_ac</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT_ADS</span><span class="p">(</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sa8d</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_pixel_sa8d_16x16</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sa8d</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_sa8d_8x8</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">var</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_pixel_var_16x16</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">var</span><span class="p">[</span><span class="n">PIXEL_8x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_var_8x16</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">var</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_var_8x8</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">var2</span><span class="p">[</span><span class="n">PIXEL_8x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_var2_8x16</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">var2</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_var2_8x8</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd_nv12_core</span> <span class="o">=</span> <span class="n">pixel_ssd_nv12_core</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssim_4x4x2_core</span> <span class="o">=</span> <span class="n">ssim_4x4x2_core</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssim_end4</span> <span class="o">=</span> <span class="n">ssim_end4</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">vsad</span> <span class="o">=</span> <span class="n">pixel_vsad</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">asd8</span> <span class="o">=</span> <span class="n">pixel_asd8</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sad_x3_4x4</span>    <span class="o">=</span> <span class="n">x264_intra_sad_x3_4x4</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_satd_x3_4x4</span>   <span class="o">=</span> <span class="n">x264_intra_satd_x3_4x4</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sad_x3_8x8</span>    <span class="o">=</span> <span class="n">x264_intra_sad_x3_8x8</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sa8d_x3_8x8</span>   <span class="o">=</span> <span class="n">x264_intra_sa8d_x3_8x8</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sad_x3_8x8c</span>   <span class="o">=</span> <span class="n">x264_intra_sad_x3_8x8c</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_satd_x3_8x8c</span>  <span class="o">=</span> <span class="n">x264_intra_satd_x3_8x8c</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sad_x3_8x16c</span>  <span class="o">=</span> <span class="n">x264_intra_sad_x3_8x16c</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_satd_x3_8x16c</span> <span class="o">=</span> <span class="n">x264_intra_satd_x3_8x16c</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sad_x3_16x16</span>  <span class="o">=</span> <span class="n">x264_intra_sad_x3_16x16</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_satd_x3_16x16</span> <span class="o">=</span> <span class="n">x264_intra_satd_x3_16x16</span><span class="p">;</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="c1">//后面是与 CPU 有关的函数定义，此处略去</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>下面分别介绍 SAD、SSD、SATD 的实现过程。</p>

<h3 id="sad-">SAD 实现过程</h3>

<p>将上面代码中的<code>INIT8(sad,)</code>展开，可以得到如下代码：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_pixel_sad_16x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_16x8</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_sad_16x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_8x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_sad_8x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_sad_8x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_8x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_sad_8x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_4x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_sad_4x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_4x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_sad_4x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_4x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_sad_4x16</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>我们选取其中最简单的<code>x264_pixel_sad_4x4</code>继续展开，它是通过一个宏来定义的：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">PIXEL_SAD_C</span><span class="p">(</span> <span class="n">x264_pixel_sad_4x4</span><span class="p">,</span>    <span class="mi">4</span><span class="p">,</span>  <span class="mi">4</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PIXEL_SAD_C( name, lx, ly ) \</span>
</span><span class="line"><span class="cp">static int name( pixel *pix1, intptr_t i_stride_pix1,  \</span>
</span><span class="line"><span class="cp">                 pixel *pix2, intptr_t i_stride_pix2 ) \</span>
</span><span class="line"><span class="cp">{                                                   \</span>
</span><span class="line"><span class="cp">    int i_sum = 0;                                  \</span>
</span><span class="line"><span class="cp">    for( int y = 0; y &lt; ly; y++ )                   \</span>
</span><span class="line"><span class="cp">    {                                               \</span>
</span><span class="line"><span class="cp">        for( int x = 0; x &lt; lx; x++ )               \</span>
</span><span class="line"><span class="cp">        {                                           \</span>
</span><span class="line"><span class="cp">            i_sum += abs( pix1[x] - pix2[x] );      \</span>
</span><span class="line"><span class="cp">        }                                           \</span>
</span><span class="line"><span class="cp">        pix1 += i_stride_pix1;                      \</span>
</span><span class="line"><span class="cp">        pix2 += i_stride_pix2;                      \</span>
</span><span class="line"><span class="cp">    }                                               \</span>
</span><span class="line"><span class="cp">    return i_sum;                                   \</span>
</span><span class="line"><span class="cp">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>展开后，可以得到如下代码：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">x264_pixel_sad_4x4</span><span class="p">(</span><span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_stride_pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_stride_pix2</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">i_sum</span> <span class="o">+=</span> <span class="n">abs</span><span class="p">(</span><span class="n">pix1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">pix1</span> <span class="o">+=</span> <span class="n">i_stride_pix1</span><span class="p">;</span>
</span><span class="line">        <span class="n">pix2</span> <span class="o">+=</span> <span class="n">i_stride_pix2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i_sum</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="ssd-">SSD 实现过程</h3>

<p>将上面代码中的<code>INIT8(ssd,)</code>展开，可以得到如下代码：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_pixel_ssd_16x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_16x8</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_ssd_16x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_8x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_ssd_8x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_ssd_8x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_8x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_ssd_8x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_4x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_ssd_4x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_4x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_ssd_4x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_4x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_ssd_4x16</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">PIXEL_SSD_C</span><span class="p">(</span> <span class="n">x264_pixel_ssd_4x4</span><span class="p">,</span>    <span class="mi">4</span><span class="p">,</span>  <span class="mi">4</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PIXEL_SSD_C( name, lx, ly ) \</span>
</span><span class="line"><span class="cp">static int name( pixel *pix1, intptr_t i_stride_pix1,  \</span>
</span><span class="line"><span class="cp">                 pixel *pix2, intptr_t i_stride_pix2 ) \</span>
</span><span class="line"><span class="cp">{                                                   \</span>
</span><span class="line"><span class="cp">    int i_sum = 0;                                  \</span>
</span><span class="line"><span class="cp">    for( int y = 0; y &lt; ly; y++ )                   \</span>
</span><span class="line"><span class="cp">    {                                               \</span>
</span><span class="line"><span class="cp">        for( int x = 0; x &lt; lx; x++ )               \</span>
</span><span class="line"><span class="cp">        {                                           \</span>
</span><span class="line"><span class="cp">            int d = pix1[x] - pix2[x];              \</span>
</span><span class="line"><span class="cp">            i_sum += d*d;                           \</span>
</span><span class="line"><span class="cp">        }                                           \</span>
</span><span class="line"><span class="cp">        pix1 += i_stride_pix1;                      \</span>
</span><span class="line"><span class="cp">        pix2 += i_stride_pix2;                      \</span>
</span><span class="line"><span class="cp">    }                                               \</span>
</span><span class="line"><span class="cp">    return i_sum;                                   \</span>
</span><span class="line"><span class="cp">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>此时，可以得到<code>x264_pixel_ssd_4x4</code>的定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">x264_pixel_ssd_4x4</span><span class="p">(</span><span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_stride_pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_stride_pix2</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
</span><span class="line">            <span class="n">i_sum</span> <span class="o">+=</span> <span class="n">d</span><span class="o">*</span><span class="n">d</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">pix1</span> <span class="o">+=</span> <span class="n">i_stride_pix1</span><span class="p">;</span>
</span><span class="line">        <span class="n">pix2</span> <span class="o">+=</span> <span class="n">i_stride_pix2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i_sum</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="satd-">SATD 实现过程</h3>

<p>将代码中的<code>INIT8(satd,)</code>展开，可以得到如下代码：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_pixel_satd_16x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_16x8</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_satd_16x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_8x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_satd_8x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_satd_8x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_8x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_satd_8x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_4x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_satd_4x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_4x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_satd_4x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_4x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_satd_4x16</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>同样，选取最简单的<code>x264_pixel_satd_4x4</code>继续展开，它的定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="n">NOINLINE</span> <span class="kt">int</span> <span class="nf">x264_pixel_satd_4x4</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_pix2</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">sum2_t</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">    <span class="kt">sum2_t</span> <span class="n">a0</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">b0</span><span class="p">,</span> <span class="n">b1</span><span class="p">;</span>
</span><span class="line">    <span class="kt">sum2_t</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">pix1</span> <span class="o">+=</span> <span class="n">i_pix1</span><span class="p">,</span> <span class="n">pix2</span> <span class="o">+=</span> <span class="n">i_pix2</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">a0</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="n">a1</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">        <span class="n">b0</span> <span class="o">=</span> <span class="p">(</span><span class="n">a0</span><span class="o">+</span><span class="n">a1</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">a0</span><span class="o">-</span><span class="n">a1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">BITS_PER_SUM</span><span class="p">);</span>
</span><span class="line">        <span class="n">a2</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">        <span class="n">a3</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">        <span class="n">b1</span> <span class="o">=</span> <span class="p">(</span><span class="n">a2</span><span class="o">+</span><span class="n">a3</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">a2</span><span class="o">-</span><span class="n">a3</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">BITS_PER_SUM</span><span class="p">);</span>
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">b0</span> <span class="o">+</span> <span class="n">b1</span><span class="p">;</span>
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">b0</span> <span class="o">-</span> <span class="n">b1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">HADAMARD4</span><span class="p">(</span> <span class="n">a0</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">        <span class="n">a0</span> <span class="o">=</span> <span class="n">abs2</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs2</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs2</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs2</span><span class="p">(</span><span class="n">a3</span><span class="p">);</span>
</span><span class="line">        <span class="n">sum</span> <span class="o">+=</span> <span class="p">((</span><span class="kt">sum_t</span><span class="p">)</span><span class="n">a0</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">a0</span><span class="o">&gt;&gt;</span><span class="n">BITS_PER_SUM</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">sum</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之帧间预测]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/08/x264-inter-prediction/"/>
    <updated>2017-07-08T07:44:15-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/08/x264-inter-prediction</id>
    <content type="html"><![CDATA[<p>本文记录 H264 中关于帧间预测的部分，并详细解析它在 x264 中的源码实现。</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之帧内预测]]></title>
    <link href="http://lazybing.github.io/blog/2017/06/30/x264-intra-prediction/"/>
    <updated>2017-06-30T08:12:22-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/06/30/x264-intra-prediction</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#intra4x4-" id="markdown-toc-intra4x4-">Intra_4x4 预测模式</a>    <ul>
      <li><a href="#intra4x4vertical-" id="markdown-toc-intra4x4vertical-">Intra_4x4_Vertical 预测模式</a></li>
      <li><a href="#intra4x4horizontal-" id="markdown-toc-intra4x4horizontal-">Intra_4x4_Horizontal 预测模式</a></li>
      <li><a href="#intra4x4dc-" id="markdown-toc-intra4x4dc-">Intra_4x4_DC 预测模式</a></li>
      <li><a href="#intra4x4diagonaldownleft-" id="markdown-toc-intra4x4diagonaldownleft-">Intra_4x4_Diagonal_Down_Left 预测模式</a></li>
      <li><a href="#intra4x4diagonaldownright-" id="markdown-toc-intra4x4diagonaldownright-">Intra_4x4_Diagonal_Down_Right 预测模式</a></li>
      <li><a href="#intra4x4verticalright-" id="markdown-toc-intra4x4verticalright-">Intra_4x4_Vertical_Right 预测模式</a></li>
      <li><a href="#intra4x4horizontaldown-" id="markdown-toc-intra4x4horizontaldown-">Intra_4x4_Horizontal_Down 预测模式</a></li>
      <li><a href="#intra4x4verticalleft-" id="markdown-toc-intra4x4verticalleft-">Intra_4x4_Vertical_Left 预测模式</a></li>
      <li><a href="#intra4x4horizontalup-" id="markdown-toc-intra4x4horizontalup-">Intra_4x4_Horizontal_Up 预测模式</a></li>
    </ul>
  </li>
  <li><a href="#intra8x8-" id="markdown-toc-intra8x8-">Intra_8x8 预测模式</a>    <ul>
      <li><a href="#intra8x8vertical-" id="markdown-toc-intra8x8vertical-">Intra_8x8_Vertical 预测模式</a></li>
      <li><a href="#intra8x8horizontal-" id="markdown-toc-intra8x8horizontal-">Intra_8x8_Horizontal 预测模式</a></li>
      <li><a href="#intra8x8dc-" id="markdown-toc-intra8x8dc-">Intra_8x8_DC 预测模式</a></li>
      <li><a href="#intra8x8diagonaldownleft-" id="markdown-toc-intra8x8diagonaldownleft-">Intra_8x8_Diagonal_Down_Left 预测模式</a></li>
      <li><a href="#intra8x8diagonaldownright-" id="markdown-toc-intra8x8diagonaldownright-">Intra_8x8_Diagonal_Down_Right 预测模式</a></li>
      <li><a href="#intra8x8verticalright-" id="markdown-toc-intra8x8verticalright-">Intra_8x8_Vertical_Right 预测模式</a></li>
      <li><a href="#intra8x8horizontaldown-" id="markdown-toc-intra8x8horizontaldown-">Intra_8x8_Horizontal_Down 预测模式</a></li>
      <li><a href="#intra8x8verticalleft-" id="markdown-toc-intra8x8verticalleft-">Intra_8x8_Vertical_Left 预测模式</a></li>
      <li><a href="#intra8x8horizontalup-" id="markdown-toc-intra8x8horizontalup-">Intra_8x8_Horizontal_Up 预测模式</a></li>
    </ul>
  </li>
  <li><a href="#intra16x16-" id="markdown-toc-intra16x16-">Intra_16x16 预测模式</a>    <ul>
      <li><a href="#intra16x16vertical-" id="markdown-toc-intra16x16vertical-">Intra_16x16_Vertical 预测模式</a></li>
      <li><a href="#intra16x16horizontal-" id="markdown-toc-intra16x16horizontal-">Intra_16x16_Horizontal 预测模式</a></li>
      <li><a href="#intra16x16dc-" id="markdown-toc-intra16x16dc-">Intra_16x16_DC 预测模式</a></li>
      <li><a href="#intra16x16plane-" id="markdown-toc-intra16x16plane-">Intra_16x16_Plane 预测模式</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录 x264 中使用到的帧内预测技术。</p>

<!--more-->

<h2 id="intra4x4-">Intra_4x4 预测模式</h2>

<p>x264 中对 4x4 的预测模式如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Intra4x4PredMode[luma4x4BlkIdx]</th>
      <th style="text-align: center">Name of Intra4x4PredMode[luma4x4BlkIdx]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">Intra_4x4_Vertical(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">Intra_4x4_Horizontal(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">Intra_4x4_DC(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">Intra_4x4_Diagonal_Down_Left(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">Intra_4x4_Diagonal_Down_Right(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">Intra_4x4_Vertical_Right(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">Intra_4x4_Horizontal_Down(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">Intra_4x4_Vertical_Left(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">Intra_4x4_Horizontal_Up(prediction mode)</td>
    </tr>
  </tbody>
</table>

<p>下面依次分析这几种预测模式：</p>

<h3 id="intra4x4vertical-">Intra_4x4_Vertical 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 0.<br />This mode shall be used only when the samples p[ x, -1 ] with x = 0..3 are marked as "available for Intra_4x4 prediction".<br />The values of the prediction samples pred4x4L[ x, y ], with x, y = 0..3, are derived by  <br />$pred4x4_L[x,y]=p[x,-1], with x,y=0..3$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Vertical 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_4x4_v_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_4x4_DC</span><span class="p">(</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="cp">#define SRC(x,y) src[(x)+(y)*FDEC_STRIDE]</span>
</span><span class="line"><span class="cp">#define SRC_X4(x,y) MPIXEL_X4( &amp;SRC(x,y) )</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PREDICT_4x4_DC(v)\</span>
</span><span class="line"><span class="cp">    SRC_X4(0,0) = SRC_X4(0,1) = SRC_X4(0,2) = SRC_X4(0,3) = v;</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4horizontal-">Intra_4x4_Horizontal 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 1.  <br />This mode shall be used only when the samples p[ −1, y ], with y = 0..3, are marked as "available for Intra_4x4 prediction".<br />The values of the prediction samples pred4x4L[ x, y ], with x, y = 0..3, are derived by  <br />$pred4x4_L[x,y]=p[-1, y], with x,y=0..3$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Vertical 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_4x4_h_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4dc-">Intra_4x4_DC 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 2.<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:  </p><p>If all samples p[ x, −1 ], with x = 0..3, and p[ −1, y ], with y = 0..3, are marked as "available for Intra_4x4 prediction", the values of the prediction samples $pred4x4_L$[ x, y ], with x, y = 0..3, are derived by  <br />$pred4x4_L[x,y]$ = (p[0,-1]+p[1,-1]+p[2,-1]+p[3,-1]+p[-1,0]+p[-1,1]+p[-1,2]+p[-1,3]+4)&gt;&gt;3  </p><p>Otherwise, if any samples p[ x, .1 ], with x = 0..3, are marked as "not available for Intra_4x4 prediction" and all samples p[ .1, y ], with y = 0..3, are marked as "available for Intra_4x4 prediction", the values of the prediction samples $pred4x4_L$[ x, y ], with x, y = 0..3, are derived by  <br />$pred4x4_L[x,y] = (p[-1,0]+p[-1,1]+p[-1,2]+p[-1,3]+2)&gt;&gt;2$  </p><p>Otherwise, if any samples p[ .1, y ], with y = 0..3, are marked as "not available for Intra_4x4 prediction" and all samples p[ x, .1 ], with x = 0 .. 3, are marked as "available for Intra_4x4 prediction", the values of the prediction samples $pred4x4_L$[ x, y ], with x, y = 0 .. 3, are derived by    <br />$pred4x4_L[x,y] = (p[0,-1]+p[1,-1]+p[2,-1]+p[3,-1]+2)&gt;&gt;2$    </p><p>Otherwise (some samples p[ x, .1 ], with x = 0..3, and some samples p[ .1, y ], with y = 0..3, are marked as "not available for Intra_4x4 prediction"), the values of the prediction samples $pred4x4_L$[ x, y ], with x, y = 0..3, are derived by  <br />$pred4x4_L[x,y]=(1&lt;&lt;(BitDepth_Y-1))$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_DC 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_dc_128_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_4x4_DC</span><span class="p">(</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">BIT_DEPTH</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_dc_left_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_dc_top_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_4x4_dc_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span>
</span><span class="line">                                 <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4diagonaldownleft-">Intra_4x4_Diagonal_Down_Left 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 3.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..7 are marked as "available for Intra_4x4 prediction".<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:  </p><p>If x is equal to 3 and y is equal to 3,<br />$pred4x4_L[ x, y ] = ( p[ 6, .1 ] + 3 * p[ 7, .1 ] + 2 ) &gt;&gt; 2$</p><p>Otherwise (x is not equal to 3 or y is not equal to 3),<br />$pred4x4_L[ x, y ] = ( p[ x + y, −1 ] + 2 * p[ x + y + 1, −1 ] + p[ x + y + 2, −1 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_DC 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define PREDICT_4x4_LOAD_LEFT\</span>
</span><span class="line"><span class="cp">    int l0 = SRC(-1,0);\</span>
</span><span class="line"><span class="cp">    int l1 = SRC(-1,1);\</span>
</span><span class="line"><span class="cp">    int l2 = SRC(-1,2);\</span>
</span><span class="line"><span class="cp">    UNUSED int l3 = SRC(-1,3);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PREDICT_4x4_LOAD_TOP\</span>
</span><span class="line"><span class="cp">    int t0 = SRC(0,-1);\</span>
</span><span class="line"><span class="cp">    int t1 = SRC(1,-1);\</span>
</span><span class="line"><span class="cp">    int t2 = SRC(2,-1);\</span>
</span><span class="line"><span class="cp">    UNUSED int t3 = SRC(3,-1);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PREDICT_4x4_LOAD_TOP_RIGHT\</span>
</span><span class="line"><span class="cp">    int t4 = SRC(4,-1);\</span>
</span><span class="line"><span class="cp">    int t5 = SRC(5,-1);\</span>
</span><span class="line"><span class="cp">    int t6 = SRC(6,-1);\</span>
</span><span class="line"><span class="cp">    UNUSED int t7 = SRC(7,-1);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define F1(a,b)   (((a)+(b)+1)&gt;&gt;1)</span>
</span><span class="line"><span class="cp">#define F2(a,b,c) (((a)+2*(b)+(c)+2)&gt;&gt;2)</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_ddl_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP_RIGHT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4diagonaldownright-">Intra_4x4_Diagonal_Down_Right 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 4.<br />This mode shall be used only when the samples p[ x, .1 ] with x = 0..3 and p[ .1, y ] with y = .1..3 are marked as "available for Intra_4x4 prediction".<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:  <br />If x is greater than y,  <br />$pred4x4_L[ x, y ] = ( p[ x − y − 2, −1] + 2 * p[ x − y − 1, −1 ] + p[ x − y, −1 ] + 2 ) &gt;&gt; 2$<br />Otherwise if x is less than y,  <br />$pred4x4_L[ x, y ] = ( p[ −1, y − x − 2 ] + 2 * p[ −1, y − x − 1 ] + p[ −1, y − x ] + 2 ) &gt;&gt; 2$<br />Otherwise (x is equal to y),  <br />$pred4x4_L[ x, y ] = ( p[ 0, .1 ] + 2 * p[ .1, .1 ] + p[ .1, 0 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Diagonal_Down_Right 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_ddr_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">lt</span> <span class="o">=</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">lt</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4verticalright-">Intra_4x4_Vertical_Right 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 5.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..3 and p[ −1, y ] with y = −1..3 are marked as "available for Intra_4x4 prediction".<br />Let the variable zVR be set equal to 2 * x − y.<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:  </p><p>If zVR is equal to 0,2,4 or 6,  <br />$pred_L[x,y]=(p[x-(y&gt;&gt;1)-1,-1]+p[x-(y&gt;&gt;1),-1]+1)&gt;&gt;1$  <br />Otherwise, if zVR is equal to 1, 3, or 5,  <br />$pred4x4_L[x,y]=(p[x-(y&gt;&gt;1)-2,-1]+2*p[x-(y&gt;&gt;1)-1,-1]+p[x-(y&gt;&gt;1),-1]+2)&gt;&gt;2$<br />Otherwise, if zVR is equal to −1,  <br />$pred4x4_L[ x, y ] = (p[-1, 0 ] + 2 * p[ -1, -1 ] + p[ 0, -1 ] + 2 ) &gt;&gt; 2$<br />Otherwise (zVR is equal to -2 or -3),<br />$pred4x4_L[ x, y ] = ( p[ −1, y − 1 ] + 2 * p[ −1, y − 2 ] + p[ −1, y − 3 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Vertical_Right 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_vr_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">lt</span> <span class="o">=</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4horizontaldown-">Intra_4x4_Horizontal_Down 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 6.<br />This mode shall be used only when the samples p[ x, -1 ] with x = 0..3 and p[ -1, y ] with y = .1..3 are marked as "available for Intra_4x4 prediction".<br />Let the variable zHD be set equal to 2 * y - x.<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Horizontal_Down 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_hd_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">lt</span><span class="o">=</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">lt</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4verticalleft-">Intra_4x4_Vertical_Left 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 7.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..7 are marked as "available for Intra_4x4 prediction".<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Vertical_Left 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_vl_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP_RIGHT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4horizontalup-">Intra_4x4_Horizontal_Up 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 8.<br />This mode shall be used only when the samples p[ −1, y ] with y = 0..3 are marked as "available for Intra_4x4 prediction".<br />Let the variable zHU be set equal to x + 2 * y.<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Horizontal_Up 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_hu_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_LEFT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">l3</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="intra8x8-">Intra_8x8 预测模式</h2>

<p>x264 中对 8x8 的预测模式如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">intra8x8Predmodei[luma8x8BlkIdx]</th>
      <th style="text-align: center">Name of Intra8x8PredMode[luma8x8BlkIdx]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">Intra_8x8_Vertical(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">Intra_8x8_Horizontal(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">Intra_8x8_DC(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">Intra_8x8_Diagonal_Down_Left(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">Intra_8x8_Diagonal_Down_Right(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">Intra_8x8_Vertical_Right(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">Intra_8x8_Horizontal_Down(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">Intra_8x8_Vertical_Left(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">Intra_8x8_Horizontal_Up(prediction mode)</td>
    </tr>
  </tbody>
</table>

<p>下面依次分析这几种预测模式：</p>

<h3 id="intra8x8vertical-">Intra_8x8_Vertical 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 0.<br />This mode shall be used only when the samples p[ x, -1 ] with x = 0..7 are marked as "available for Intra_8x8 prediction".<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived by   <br />$pred8x8_L[x,y]=p'[x,-1],with x,y=0..7$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Vertical 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_8x8_v_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">top</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">edge</span><span class="o">+</span><span class="mi">16</span> <span class="p">),</span>
</span><span class="line">                      <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">edge</span><span class="o">+</span><span class="mi">20</span> <span class="p">)</span> <span class="p">};</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span><span class="n">y</span><span class="o">*</span><span class="n">FDEC_STRIDE</span><span class="o">+</span><span class="mi">0</span> <span class="p">)</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span><span class="n">y</span><span class="o">*</span><span class="n">FDEC_STRIDE</span><span class="o">+</span><span class="mi">4</span> <span class="p">)</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8horizontal-">Intra_8x8_Horizontal 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 1.<br />This mode shall be used only when the samples p[ −1, y ], with y = 0..7, are marked as "available for Intra_8x8 prediction".<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived by  <br />$pred8x8_L[x,y]=p'[-1,y], with x,y=0..7$</p></blockquote>

<p>x264 中对 Intra_8x8_Horizontal 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define PL(y) \</span>
</span><span class="line"><span class="cp">    UNUSED int l##y = edge[14-y];</span>
</span><span class="line"><span class="cp">#define PT(x) \</span>
</span><span class="line"><span class="cp">    UNUSED int t##x = edge[16+x];</span>
</span><span class="line"><span class="cp">#define PREDICT_8x8_LOAD_TOPLEFT \</span>
</span><span class="line"><span class="cp">    int lt = edge[15];</span>
</span><span class="line"><span class="cp">#define PREDICT_8x8_LOAD_LEFT \</span>
</span><span class="line"><span class="cp">    PL(0) PL(1) PL(2) PL(3) PL(4) PL(5) PL(6) PL(7)</span>
</span><span class="line"><span class="cp">#define PREDICT_8x8_LOAD_TOP \</span>
</span><span class="line"><span class="cp">    PT(0) PT(1) PT(2) PT(3) PT(4) PT(5) PT(6) PT(7)</span>
</span><span class="line"><span class="cp">#define PREDICT_8x8_LOAD_TOPRIGHT \</span>
</span><span class="line"><span class="cp">    PT(8) PT(9) PT(10) PT(11) PT(12) PT(13) PT(14) PT(15)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PREDICT_8x8_DC(v) \</span>
</span><span class="line"><span class="cp">    for( int y = 0; y &lt; 8; y++ ) { \</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+0 ) = v; \</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+4 ) = v; \</span>
</span><span class="line"><span class="cp">        src += FDEC_STRIDE; \</span>
</span><span class="line"><span class="cp">    }</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_8x8_h_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line"><span class="cp">#define ROW(y) MPIXEL_X4( src+y*FDEC_STRIDE+0 ) =\</span>
</span><span class="line"><span class="cp">               MPIXEL_X4( src+y*FDEC_STRIDE+4 ) = PIXEL_SPLAT_X4( l##y );</span>
</span><span class="line">    <span class="n">ROW</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</span><span class="line"><span class="cp">#undef ROW</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8dc-">Intra_8x8_DC 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 2.<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:</p></blockquote>

<p>x264 中对 Intra_8x8_DC 模式的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_dc_128_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_DC</span><span class="p">(</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">BIT_DEPTH</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_dc_left_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">l0</span><span class="o">+</span><span class="n">l1</span><span class="o">+</span><span class="n">l2</span><span class="o">+</span><span class="n">l3</span><span class="o">+</span><span class="n">l4</span><span class="o">+</span><span class="n">l5</span><span class="o">+</span><span class="n">l6</span><span class="o">+</span><span class="n">l7</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_8x8_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_dc_top_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">t0</span><span class="o">+</span><span class="n">t1</span><span class="o">+</span><span class="n">t2</span><span class="o">+</span><span class="n">t3</span><span class="o">+</span><span class="n">t4</span><span class="o">+</span><span class="n">t5</span><span class="o">+</span><span class="n">t6</span><span class="o">+</span><span class="n">t7</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_8x8_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_8x8_dc_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">l0</span><span class="o">+</span><span class="n">l1</span><span class="o">+</span><span class="n">l2</span><span class="o">+</span><span class="n">l3</span><span class="o">+</span><span class="n">l4</span><span class="o">+</span><span class="n">l5</span><span class="o">+</span><span class="n">l6</span><span class="o">+</span><span class="n">l7</span><span class="o">+</span><span class="n">t0</span><span class="o">+</span><span class="n">t1</span><span class="o">+</span><span class="n">t2</span><span class="o">+</span><span class="n">t3</span><span class="o">+</span><span class="n">t4</span><span class="o">+</span><span class="n">t5</span><span class="o">+</span><span class="n">t6</span><span class="o">+</span><span class="n">t7</span><span class="o">+</span><span class="mi">8</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_8x8_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8diagonaldownleft-">Intra_8x8_Diagonal_Down_Left 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 3.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..15 are marked as "available for Intra_8x8 prediction".<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If x is equal to 7 and y is equal to 7,  <br />$pred8xx_L[x,y]=( p′[ 14, −1 ] + 3 * p′[ 15, −1 ] + 2 ) &gt;&gt; 2$<br />Otherwise (x is not equal to 7 or y is not equal to 7)  <br />$pred8x8_L[ x, y ] = ( p′[ x + y, −1 ] + 2 * p′[ x + y + 1, −1 ] + p′[ x + y + 2, −1 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Diagonal_Down_Left 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_ddl_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOPRIGHT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">,</span><span class="n">t8</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t7</span><span class="p">,</span><span class="n">t8</span><span class="p">,</span><span class="n">t9</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t8</span><span class="p">,</span><span class="n">t9</span><span class="p">,</span><span class="n">t10</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t9</span><span class="p">,</span><span class="n">t10</span><span class="p">,</span><span class="n">t11</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t10</span><span class="p">,</span><span class="n">t11</span><span class="p">,</span><span class="n">t12</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t11</span><span class="p">,</span><span class="n">t12</span><span class="p">,</span><span class="n">t13</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t12</span><span class="p">,</span><span class="n">t13</span><span class="p">,</span><span class="n">t14</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t13</span><span class="p">,</span><span class="n">t14</span><span class="p">,</span><span class="n">t15</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t14</span><span class="p">,</span><span class="n">t15</span><span class="p">,</span><span class="n">t15</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8diagonaldownright-">Intra_8x8_Diagonal_Down_Right 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 4.<br />This mode shall be used only when the samples p[ x, .1 ] with x = 0..7 and p[ .1, y ] with y = .1..7 are marked as<br />"available for Intra_8x8 prediction".<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If x is greater than y,<br />$pred8x8_L[ x, y ] = ( p′[ x − y − 2, −1] + 2 * p′[ x − y − 1, −1 ] + p′[ x − y, −1 ] + 2 ) &gt;&gt; 2$<br />Otherwise if x is less than y,<br />$pred8x8_L[ x, y ] = ( p′[ .1, y . x . 2 ] + 2 * p′[ .1, y . x . 1 ] + p′[ .1, y . x ] + 2 ) &gt;&gt; 2$<br />Otherwise (x is equal to y),<br />$pred8x8_L[ x, y ] = ( p′[ 0, −1 ] + 2 * p′[ −1, −1 ] + p′[ −1, 0 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Diagonal_Down_Right 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_ddr_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOPLEFT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l7</span><span class="p">,</span><span class="n">l6</span><span class="p">,</span><span class="n">l5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l6</span><span class="p">,</span><span class="n">l5</span><span class="p">,</span><span class="n">l4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l4</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l3</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8verticalright-">Intra_8x8_Vertical_Right 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 5.<br />This mode shall be used only when the samples p[ x, -1 ] with x = 0..7 and p[ -1, y ] with y = -1..7 are marked as "available for Intra_8x8 prediction".<br />Let the variable zVR be set equal to 2 * x . y.<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If zVR is equal to 0, 2, 4, 6, 8, 10, 12, or 14  <br />$pred8x8_L[x,y] = (p'[x-y(y&gt;&gt;1)-1,-1] + p'[x-(y&gt;&gt;1),-1]+1)&gt;&gt;1$  <br />Otherwise, if zVR is equal to 1, 3, 5, 7, 9, 11, or 13  <br />$pred8x8_L[x,y]=(p'[x-(y&gt;&gt;1)-2,-1]+2*p'[x-(y&gt;&gt;1)-1,-1]+p'[x-(y&gt;&gt;1),-1]+2)&gt;&gt;2$  <br />Otherwise, if zVR is equal to −1,  <br />$pred8x8_L[ x, y ] = ( p′[ −1, 0 ] + 2 * p′[ −1, −1 ] + p′[ 0, −1 ] + 2 ) &gt;&gt; 2$  <br />Otherwise (zVR is equal to .2, .3, .4, .5, .6, or .7),  <br />$pred8x8_L[ x, y ] = ( p′[ -1, y . 2*x - 1 ] + 2 * p′[ -1, y - 2*x - 2 ] + p′[ -1, y - 2*x - 3 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Vertical_Right 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_vr_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOPLEFT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l4</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l6</span><span class="p">,</span><span class="n">l5</span><span class="p">,</span><span class="n">l4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l3</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8horizontaldown-">Intra_8x8_Horizontal_Down 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 6.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..7 and p[ −1, y ] with y = −1..7 are marked as "available for Intra_8x8 prediction".<br />Let the variable zHD be set equal to 2 * y − x.<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If zHD is equal to 0, 2, 4, 6, 8, 10, 12, or 14  <br />$pred8x8_L[ x, y ] = ( p′[ −1, y − ( x &gt;&gt; 1 ) − 1 ] + p′[ −1, y − ( x &gt;&gt; 1 ) ] + 1 ) &gt;&gt; 1$  <br />Otherwise, if zHD is equal to 1, 3, 5, 7, 9, 11, or 13  <br />$pred8x8_L[x,y]=(p′[-1, y -(x&gt;&gt;1)-2]+2*p′[-1,y-(x&gt;&gt;1)-1]+p′[-1,y-(x&gt;&gt;1)]+2)&gt;&gt;2$<br />Otherwise, if zHD is equal to −1,<br />$pred8x8L[ x, y ] = ( p′[ −1, 0 ] + 2 * p′[ −1, −1 ] + p′[ 0, −1 ] + 2 ) &gt;&gt; 2$<br />Otherwise (zHD is equal to −2, −3, −4, −5, −6, −7),<br />$pred8x8L[ x, y ] = ( p′[ x − 2*y − 1, −1 ] + 2 * p′[ x − 2*y − 2, −1 ] + p′[ x − 2*y − 3, −1 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Horizontal_Down 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_hd_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOPLEFT</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l6</span><span class="p">,</span><span class="n">l7</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">,</span><span class="n">l7</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p4</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p5</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p6</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p7</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p8</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p9</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">lt</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p10</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t2</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p11</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t3</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t4</span><span class="p">));</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p2</span><span class="p">,</span><span class="n">p3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p3</span><span class="p">,</span><span class="n">p4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p4</span><span class="p">,</span><span class="n">p5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p5</span><span class="p">,</span><span class="n">p6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p6</span><span class="p">,</span><span class="n">p7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p7</span><span class="p">,</span><span class="n">p8</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p8</span><span class="p">,</span><span class="n">p9</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p9</span><span class="p">,</span><span class="n">p10</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p10</span><span class="p">,</span><span class="n">p11</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8verticalleft-">Intra_8x8_Vertical_Left 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 7.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..15 are marked as "available for Intra_8x8 prediction".<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If y is equal to 0, 2, 4 or 6  <br />$pred8x8_L[ x, y ] = ( p′[ x + ( y &gt;&gt; 1 ), .1 ] + p′[ x + ( y &gt;&gt; 1 ) + 1, .1 ] + 1) &gt;&gt; 1$  <br />Otherwise (y is equal to 1, 3, 5, 7),  <br />$pred8x8_L[ x, y ] = ( p′[ x + ( y &gt;&gt; 1 ), −1 ] + 2 * p′[ x + ( y &gt;&gt; 1 ) + 1, −1 ] + p′[ x + ( y &gt;&gt; 1 ) + 2, −1 ] + 2 ) &gt;&gt;2$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Horizontal_Down 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_vl_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOPRIGHT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">,</span><span class="n">t8</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t7</span><span class="p">,</span><span class="n">t8</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t7</span><span class="p">,</span><span class="n">t8</span><span class="p">,</span><span class="n">t9</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t8</span><span class="p">,</span><span class="n">t9</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t8</span><span class="p">,</span><span class="n">t9</span><span class="p">,</span><span class="n">t10</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t9</span><span class="p">,</span><span class="n">t10</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t9</span><span class="p">,</span><span class="n">t10</span><span class="p">,</span><span class="n">t11</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t10</span><span class="p">,</span><span class="n">t11</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t10</span><span class="p">,</span><span class="n">t11</span><span class="p">,</span><span class="n">t12</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8horizontalup-">Intra_8x8_Horizontal_Up 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 8.<br />This mode shall be used only when the samples p[ -1, y ] with y = 0..7 are marked as "available for Intra_8x8 prediction".<br />Let the variable zHU be set equal to x + 2 * y.<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If zHU is equal to 0, 2, 4, 6, 8, 10, or 12  <br />$pred8x8_L[ x, y ] = ( p′[ −1, y + ( x &gt;&gt; 1 ) ] + p′[ −1, y + ( x &gt;&gt; 1 ) + 1 ] + 1 ) &gt;&gt; 1$<br />Otherwise, if zHU is equal to 1, 3, 5, 7, 9, or 11  <br />$pred8x8_L[ x, y ] = ( p′[ −1, y + ( x &gt;&gt; 1 ) ] + 2 * p′[ −1, y + ( x &gt;&gt; 1 ) + 1 ] + p′[ −1, y + ( x &gt;&gt; 1 ) + 2 ] + 2 ) &gt;&gt;2$<br />Otherwise, if zHU is equal to 13,  <br />$pred8x8_L[ x, y ] = ( p′[ −1, 6 ] + 3 * p′[ −1, 7 ] + 2 ) &gt;&gt; 2$  <br />Otherwise (zHU is greater than 13),  <br />$pred8x8_L[x,y]=p'[-1,7]$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Horizontal_Up 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_hu_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p4</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p5</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p6</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">,</span><span class="n">l7</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p7</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l6</span><span class="p">,</span><span class="n">l7</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l6</span><span class="p">,</span><span class="n">l7</span><span class="p">,</span><span class="n">l7</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p8</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">l7</span><span class="p">,</span><span class="n">l7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p2</span><span class="p">,</span><span class="n">p3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p3</span><span class="p">,</span><span class="n">p4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p4</span><span class="p">,</span><span class="n">p5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p5</span><span class="p">,</span><span class="n">p6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p6</span><span class="p">,</span><span class="n">p7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p7</span><span class="p">,</span><span class="n">p8</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span> <span class="o">=</span> <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span> <span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p8</span><span class="p">,</span><span class="n">p8</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="intra16x16-">Intra_16x16 预测模式</h2>

<p>x264 中对 16x16 的预测模式如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">intra16x16Predmode</th>
      <th style="text-align: center">Name of Intra16x16PredMode</th>
      <th style="text-align: center">Note</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">Intra_16x16_Vertical(prediction mode)</td>
      <td style="text-align: center">由上边像素推出相应像素值</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">Intra_16x16_Horicontal(prdiction mode)</td>
      <td style="text-align: center">由左边像素推出相应像素值</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">Intra_16x16_DC(prediction mode)</td>
      <td style="text-align: center">由上边和左边像素平均值推出相应像素值</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">Intra_16x16_Plane(prediction mode)</td>
      <td style="text-align: center">利用线性 plan 函数及左、上像素推出相应像素值，适用于亮度变化平缓区域</td>
    </tr>
  </tbody>
</table>

<p>下面依次分析这几种预测模式：</p>

<h3 id="intra16x16vertical-">Intra_16x16_Vertical 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_16x16 prediction mode shall be used only when the samples p[x, -1] with x=0...15 are marked as "available for Intra_16x16 prediction".The values of the prediction samples pred[x, y] with x,y=0...15, are derived by pred[x,y]=p[x,-1],with x,y=0...15</p></blockquote>

<p>x264 中关于模式 Vertical 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_16x16_v_c</span><span class="p">(</span><span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">v0</span> <span class="o">=</span> <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">src</span><span class="p">[</span> <span class="mi">0</span><span class="o">-</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">src</span><span class="p">[</span> <span class="mi">4</span><span class="o">-</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">src</span><span class="p">[</span> <span class="mi">8</span><span class="o">-</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">v3</span> <span class="o">=</span> <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">src</span><span class="p">[</span><span class="mi">12</span><span class="o">-</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">0</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v0</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">4</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v1</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">8</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v2</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span><span class="mi">12</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v3</span><span class="p">;</span>
</span><span class="line">        <span class="n">src</span> <span class="o">+=</span> <span class="n">FDEC_STRIDE</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>注意，上面代码中的 pixel 为 uint8_t，而 pixel4 为 uint32_t，而 MPIXEL_X4 定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#define MPIXEL_X4(src) M32(src)  
</span><span class="line">#deinfe M32(src) (((x264_union32_t *)(src))-&gt;i)  
</span><span class="line">typedef union { uint32_t i; uint16_t b[2]; uint8_t  c[4]; } MAY_ALIAS x264_union32_t;</span></code></pre></td></tr></table></div></figure>

<h3 id="intra16x16horizontal-">Intra_16x16_Horizontal 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_16x16 prediction mode shall be used only when the samples p[−1, y] with y = 0..15 are marked as "available<br />for Intra_16x16 prediction".<br />The values of the prediction samples predL[ x, y ], with x, y = 0..15, are derived by<br />predL[ x, y ] = p[ −1, y ], with x, y = 0..15</p></blockquote>

<p>x264 中关于模式 Horizontal 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_16x16_h_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="n">pixel4</span> <span class="n">v</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="n">src</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">0</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">4</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">8</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span><span class="mi">12</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class="line">        <span class="n">src</span> <span class="o">+=</span> <span class="n">FDEC_STRIDE</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中<code>PIXEL_SPLAT_X4</code>定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#   define PIXEL_SPLAT_X4(x) ((x)*0x01010101U)</span></code></pre></td></tr></table></div></figure>

<h3 id="intra16x16dc-">Intra_16x16_DC 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_16x16 prediction mode operates, depending on whether the neighbouring samples are marked as "available for<br />Intra_16x16 prediction", as follows:  </p><p>If all neighbouring samples p[x,-1] ], with x = 0..15, and p[ −1, y ], with y = 0..15, are marked as "available for<br />Intra_16x16 prediction", the prediction for all luma samples in the macroblock is given by:  <br />$pred_L[x,y]=(\sum_{x'=0}^{15}p[x',-1]+\sum_{y'=0}^{15}p[-1,y']+16)&gt;&gt;5, with x,y=0..15$  </p><p>Otherwise, if any of the neighbouring samples p[ x, .1 ], with x = 0..15, are marked as "not available for Intra_16x16<br />prediction" and all of the neighbouring samples p[ .1, y ], with y = 0..15, are marked as "available for Intra_16x16<br />prediction", the prediction for all luma samples in the macroblock is given by:  <br />$pred_L[x,y]=(\sum_{y'=0}^{15}p[-1,y']+8)&gt;&gt;4, with x,y=0..15$   </p><p>Otherwise, if any of the neighbouring samples p[ −1, y ], with y = 0..15, are marked as "not available for Intra_16x16<br />prediction" and all of the neighbouring samples p[ x, −1 ], with x = 0..15, are marked as "available for Intra_16x16<br />prediction", the prediction for all luma samples in the macroblock is given by:  <br />$pred_L[x,y]=(\sum_{x'=0}^{15}p[x',-1]+8)&gt;&gt;4, with x,y=0..15$   </p><p>Otherwise (some of the neighbouring samples p[ x, .1 ], with x = 0..15, and some of the neighbouring samples<br />p[ .1, y ], with y = 0..15, are marked as "not available for Intra_16x16 prediction"), the prediction for all luma samples<br />in the macroblock is given by:  <br />$pred_L[x,y]=(1&lt;&lt;(BitDepth_Y - 1)), with x,y=0..15$</p></blockquote>

<p>x264 中关于模式 DC 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define PREDICT_16x16_DC(v)\</span>
</span><span class="line"><span class="cp">    for( int i = 0; i &lt; 16; i++ )\</span>
</span><span class="line"><span class="cp">    {\</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+ 0 ) = v;\</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+ 4 ) = v;\</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+ 8 ) = v;\</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+12 ) = v;\</span>
</span><span class="line"><span class="cp">        src += FDEC_STRIDE;\</span>
</span><span class="line"><span class="cp">    }</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_16x16_dc_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">dc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">dc</span> <span class="o">+=</span> <span class="n">src</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">FDEC_STRIDE</span><span class="p">];</span>
</span><span class="line">        <span class="n">dc</span> <span class="o">+=</span> <span class="n">src</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">FDEC_STRIDE</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dcsplat</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span> <span class="n">dc</span> <span class="o">+</span> <span class="mi">16</span> <span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">PREDICT_16x16_DC</span><span class="p">(</span> <span class="n">dcsplat</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra16x16plane-">Intra_16x16_Plane 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_16x16 prediction mode shall be used only when the samples p[ x, .1 ] with x = .1..15 and p[ .1, y ] with y = 0..15 are marked as "available for Intra_16x16 prediction".  <br />The values of the prediction samples $pred_L[x,y]$,with x,y=0...15, are derived by  <br />$pred_L[x,y]=Clip1_Y((a+b*(x-7)+c*(y-7)+16)&gt;&gt;5)$,with x,y=0...15, where   <br />$a = 16 * ( p[ .1, 15 ] + p[ 15, .1 ] )$   <br />$b = ( 5 * H + 32 ) &gt;&gt; 6$   <br />$c = ( 5 * V + 32 ) &gt;&gt; 6$     <br />and H and V are specified as   <br />$H=\sum_{x'=0}^{7}(x'+1)*(p[8+x',-1]-p[6-x',-1])$    <br />$V=\sum_{y'=0}^{7}(y'+1)*(p[-1,8+y']-p[-1,6-y'])$</p></blockquote>

<p>x264 中关于模式 Plane 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_16x16_p_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">H</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">V</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* calculate H and V */</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">H</span> <span class="o">+=</span> <span class="p">(</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="n">src</span><span class="p">[</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">i</span> <span class="o">-</span> <span class="n">FDEC_STRIDE</span> <span class="p">]</span> <span class="o">-</span> <span class="n">src</span><span class="p">[</span><span class="mi">6</span> <span class="o">-</span><span class="n">i</span> <span class="o">-</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">        <span class="n">V</span> <span class="o">+=</span> <span class="p">(</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="n">src</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="mi">8</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="o">-</span> <span class="n">src</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="mi">6</span><span class="o">-</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">16</span> <span class="o">*</span> <span class="p">(</span> <span class="n">src</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">15</span><span class="o">*</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="o">+</span> <span class="n">src</span><span class="p">[</span><span class="mi">15</span> <span class="o">-</span> <span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="p">(</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">H</span> <span class="o">+</span> <span class="mi">32</span> <span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="p">(</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">V</span> <span class="o">+</span> <span class="mi">32</span> <span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">i00</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">-</span> <span class="n">c</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">+</span> <span class="mi">16</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">pix</span> <span class="o">=</span> <span class="n">i00</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">src</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_clip_pixel</span><span class="p">(</span> <span class="n">pix</span><span class="o">&gt;&gt;</span><span class="mi">5</span> <span class="p">);</span>
</span><span class="line">            <span class="n">pix</span> <span class="o">+=</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">src</span> <span class="o">+=</span> <span class="n">FDEC_STRIDE</span><span class="p">;</span>
</span><span class="line">        <span class="n">i00</span> <span class="o">+=</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="n">ALWAYS_INLINE</span> <span class="n">pixel</span> <span class="nf">x264_clip_pixel</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">PIXEL_MAX</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">31</span> <span class="o">&amp;</span> <span class="nl">PIXEL_MAX</span> <span class="p">:</span> <span class="n">x</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_encoder_open函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/06/24/x264-encoder-open/"/>
    <updated>2017-06-24T18:24:01-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/06/24/x264-encoder-open</id>
    <content type="html"><![CDATA[
<p>本文主要记录<code>x264_encoder_open</code>函数。</p>

<!--more-->

<p><code>x264_encoder_open</code>函数是<code>encode</code>函数的几大主要函数之一。从名字可以看出，该函数主要是打开编码器，
它的主要作用是对编码器用到的一些参数进行初始化、并对编码器用到的一些与编码算法相关的函数进行初始化。
可以首先看一下它的声明：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/* x264_encoder_open:
</span><span class="line"> *      create a new encoder handler, all parameters from x264_param_t are copied */
</span><span class="line">x264_t *x264_encoder_open( x264_param_t * );</span></code></pre></td></tr></table></div></figure>
<p><code>x264_encoder_open</code>中会调用到一些宏定义的函数，比如<code>x264_reduce_fraction</code>，这里先把该函数的定义给出来：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/****************************************************************************</span>
</span><span class="line"><span class="cm"> * x264_reduce_fraction:</span>
</span><span class="line"><span class="cm"> ****************************************************************************/</span>
</span><span class="line"><span class="cp">#define REDUCE_FRACTION( name, type )\</span>
</span><span class="line"><span class="cp">void name( type *n, type *d )\</span>
</span><span class="line"><span class="cp">{                   \</span>
</span><span class="line"><span class="cp">    type a = *n;    \</span>
</span><span class="line"><span class="cp">    type b = *d;    \</span>
</span><span class="line"><span class="cp">    type c;         \</span>
</span><span class="line"><span class="cp">    if( !a || !b )  \</span>
</span><span class="line"><span class="cp">        return;     \</span>
</span><span class="line"><span class="cp">    c = a % b;      \</span>
</span><span class="line"><span class="cp">    while( c )      \</span>
</span><span class="line"><span class="cp">    {               \</span>
</span><span class="line"><span class="cp">        a = b;      \</span>
</span><span class="line"><span class="cp">        b = c;      \</span>
</span><span class="line"><span class="cp">        c = a % b;  \</span>
</span><span class="line"><span class="cp">    }               \</span>
</span><span class="line"><span class="cp">    *n /= b;        \</span>
</span><span class="line"><span class="cp">    *d /= b;        \</span>
</span><span class="line"><span class="cp">}</span>
</span><span class="line">
</span><span class="line"><span class="n">REDUCE_FRACTION</span><span class="p">(</span> <span class="n">x264_reduce_fraction</span>  <span class="p">,</span> <span class="kt">uint32_t</span> <span class="p">)</span>
</span><span class="line"><span class="n">REDUCE_FRACTION</span><span class="p">(</span> <span class="n">x264_reduce_fraction64</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>将上面的<code>x264_reduce_fraction</code>展开，代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_reduce_fraction</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="o">*</span><span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="kt">uint32_t</span> <span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">n</span><span class="p">;</span>
</span><span class="line">	<span class="kt">uint32_t</span> <span class="n">b</span> <span class="o">=</span> <span class="o">*</span><span class="n">d</span><span class="p">;</span>
</span><span class="line">	<span class="kt">uint32_t</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line">	
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">a</span> <span class="o">||</span> <span class="o">!</span><span class="n">b</span><span class="p">)</span>
</span><span class="line">	    <span class="k">return</span><span class="p">;</span>
</span><span class="line">	<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">	<span class="k">while</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class="line">	<span class="p">{</span>
</span><span class="line">		<span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">		<span class="n">b</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line">		<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="o">*</span><span class="n">n</span> <span class="o">/=</span><span class="n">b</span><span class="p">;</span>
</span><span class="line">	<span class="o">*</span><span class="n">d</span> <span class="o">/=</span><span class="n">b</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>通过上面的展开可能一眼看不出所以然，其实这是一个非常简单的算法应用，求两个数 n 和 m 约分后再分别
赋值给相应的分子和分母，函数的前半部分就是经典的求最大公约数 b 的过程，可以参考<a href="http://blog.csdn.net/so_geili/article/details/50955291">细说算法–最大公约数</a>。</p>

<p>暂时先理解这段代码的含义，至于为什么要这么做，后面在分析。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 参数详解]]></title>
    <link href="http://lazybing.github.io/blog/2017/06/23/x264-paraments-illustra/"/>
    <updated>2017-06-23T20:07:55-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/06/23/x264-paraments-illustra</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">输入</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">预设值</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">帧类型</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">码率控制</a></li>
</ul>

<p>x264 中参数选项详解</p>

<!--more-->

<h2 id="section">输入</h2>
<p>用1个绝对路径定义输入文件（或者2个，rawYUV文件）。如下例：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x264.exe -o NUL C:\input.avs  
</span><span class="line">x264 -o /dev/null ~/input.y4m  </span></code></pre></td></tr></table></div></figure>

<p>如果输入文件是rawYUV格式的，还要把分辨率一并输入。如果开启了比特率控制，还需要输入帧率。如下例：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x264.exe -o NUL –fps 25 D:\input.yuv 1280×720  
</span><span class="line">x264 -o /dev/null –fps 30000/1001 ~/input.yuv 640×480  </span></code></pre></td></tr></table></div></figure>

<h2 id="section-1">预设值</h2>
<p>预设值是x264在r1177版本增加的一个方便的命令行选项。可以用x264.exe –fullhelp查看所有的命令行帮助。</p>

<ul>
  <li>
    <p>profile<br />
默认：无<br />
说明：限制输出文件的profile。这个参数将覆盖其它所有值，此选项能保证输出profile兼容的视频流。如果使用了这个选项，将不能进行无损压缩（qp 0 or crf 0）。<br />
可选：baseline，main，high<br />
建议：不设置。除非解码环境只支持main或者baseline profile的解码。</p>
  </li>
  <li>
    <p>preset<br />
默认：medium<br />
一些在压缩效率和运算时间中平衡的预设值。如果指定了一个预设值，它会在其它选项生效前生效。<br />
可选：ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow and placebo.<br />
建议：可接受的最慢的值</p>
  </li>
  <li>
    <p>tune<br />
默认：无<br />
说明：在上一个选项基础上进一步优化输入。如果定义了一个tune值，它将在preset之后，其它选项之前生效。<br />
可选：film, animation, grain, stillimage, psnr, ssim, fastdecode, zerolatency and touhou.<br />
建议：根据输入选择。如果没有合适的就不要指定。</p>
  </li>
  <li>
    <p>slow-firstpass<br />
默认：无<br />
说明：随着预设值机制在r1177版本的出现，使用–pass 1会在解析命令行时增加以下设置：<code>ref 1</code>
<code>no-8x8dct</code><code>partitions i4x4 (if originally enabled, else none)</code><code>me dia</code><code>subme MIN( 2, subme )</code><code>trellis 0</code><br />
如果设置preset=placebo则自动关闭此特性。如果想显式关闭此特性，使用slow-firstpass。</p>
  </li>
</ul>

<h2 id="section-2">帧类型</h2>

<ul>
  <li>
    <p>keyint<br />
默认：250<br />
说明：设置x264输出中最大的IDR帧（亦称关键帧）间距。<br />
IDR帧是视频流的“分隔符”，所有帧都不可以使用越过关键帧的帧作为参考帧。IDR帧是I帧的一种，所以它们也不参照其它帧。这意味着它们可以作为视频的搜索（seek）点。<br />
通过这个设置可以设置IDR帧的最大间隔帧数（亦称最大图像组长度）。较大的值将导致IDR帧减少（会用占用空间更少的P帧和B帧取代），也就同时减弱了参照帧选择的限制。较小的值导致减少搜索一个随机帧所需的平均时间。<br />
建议：默认值（fps的10倍）对大多数视频都很好。如果在为蓝光、广播、直播流或者其它什么专业流编码，也许会需要更小的图像组长度（一般等于fps）。<br />
参见：min-keyint, scenecut, intra-refresh</p>
  </li>
  <li>
    <p>min-keyint<br />
默认：auto（keyint/10）<br />
说明：参见keyint的说明。过小的keyint范围会导致产生“错误的”IDR帧（比如说，一个闪屏场景，参见上一篇blog）。此选项限制了IDR帧之间的最小距离。<br />
建议：默认，或者与fps相等<br />
参见：keyint, scenecut</p>
  </li>
  <li>
    <p>no-scenecut<br />
默认：无<br />
说明：完全关闭自适应I帧决策。<br />
参见：scenecut</p>
  </li>
  <li>
    <p>scenecut<br />
默认：40<br />
说明：设置决策使用I帧、IDR帧的阈值（场景变换检测）。<br />
x264会计算每一帧与前一帧的不同程度并得出一个值。如果这个值低于scenecut，那么就算检测到一个“场景变换”。如果此时距离上一帧的距离小于 min-keyint则插入一个I帧，反之则插入一个IDR帧。较高的值会增加侦测到“场景变换”纪律。参见更详细的<a href="http://forum.doom9.org/showthread.PHP?t=121116">工作原理</a><br />
设置scenecut=0与no-scenecut等效。<br />
建议：使用默认值<br />
参见：keyint, min-keyint, no-scenecut</p>
  </li>
  <li>
    <p>intra-refresh<br />
默认：off<br />
说明：让x264为每keyint数量的帧使用宏块内部编码取代IDR帧。块以水平移动列的方式更新，也叫刷新波。对于低延迟的流，这样可以让帧的尺寸比使用标准的IDR帧更加保持恒定。而且这样可以增强视频流对丢包的容错能力。这个选项会降低压缩率，所以在确实需要的时候才选择它。<br />
还有一些有意思的事情：1、第一帧依然是IDR帧。2、内部宏块只在P帧中存在，刷新波在一个或多个B帧后的P帧中广泛存在。3、主要的压缩率下降原因是在宏块中新（左边）的波并不能参考旧（右边）的波。<br />
建议：使用默认值</p>
  </li>
  <li>
    <p>bframes
默认：3<br />
说明：设置x264可使用的B帧的最大连续数量。<br />
没有B帧时，一个典型的x264流帧类型是这样的：IPPPPP…PI。如果设置了-bframes 2，那么两个连续的P帧就可以用B帧替换，然后就像这样：IBPBBPBPPPB…PI。<br />
B帧和P帧的区别在于它可以参照它之后的帧，这个特点让它可以显著地提升压缩率。他们的平均品质受 –pbratio选项的控制。<br />
还有一些有意思的事情：<br />
1、x264有2种B帧，一种可以作为参照帧，一种不能；<br />
2、关于x264如何决策B帧或P帧，可以看看这个ffmpeg-devel<a href="http://article.gmane.org /gmane.comp.video.ffmpeg.devel/29064">邮件列表</a>。这种情况下帧类型看起来就像这样IBBBPBBBPBPI（假设设置 –bframes 3）。<br />
参见：–no-b-adapt, –b-bias, –b-pyramid, –ref, –pbratio, –partitions, –weightb</p>
  </li>
  <li>
    <p>b-adapt
默认：1<br />
说明：设置B帧决策算法，这个选项会影响到x264使用P帧或者B帧。<br />
0 —— 关闭。总是使用B帧。和以前的 no-b-adapt选项效果相同；<br />
1 —— ‘快速’算法。快速，–b-frames越大速度越快。推荐配合使用–bframes 16；<br />
2 —— ‘最佳’算法，慢速，–b-frames越大速度越慢；<br />
注意：多趟编码时，只有第一趟编码的此选项起效，因为第一趟编码结束时，帧类型就已经被决定了。</p>
  </li>
  <li>
    <p>b-bias<br />
默认：0<br />
说明：调节使用B帧的力度。越大的值越偏向B帧，可以在-100和100之间选择。100或-100不能保证完全或是全是B帧（使用 –b-adapt 0）。请只在你认为你能做出比x264更好的码率控制时才使用这个选项。<br />
参见： –b-frames, –ipratio</p>
  </li>
  <li>
    <p>b-pyramid
默认：normal<br />
说明：允许B帧作为参照帧。如果关闭，那么只有I帧和P帧才能作为参照帧。可以作为参照帧的B帧的量化参数会介于P帧和普通B帧之间。只在–b-frames设置大于等于2时此选项才生效。如果是在为蓝光光盘编码，请使用none或者strict。<br />
none —— 不允许B帧作为参照帧；<br />
strict —— 一个图像组内只允许一个B帧参照帧，这是蓝光编码强制要求的标准；<br />
normal —— 任意使用B帧参照帧；<br />
参见：–bframes, –refs, –no-mixed-refs</p>
  </li>
  <li>
    <p>open-gop
默认：none<br />
说明：Open-GOP是一个提升压缩效率的编码技术。它有以下选项：<br />
none —— 关闭<br />
normal —— 开启<br />
bluray —— 开启。一个稍低效的open-GOP版本，因为normal模式不能用于蓝光编码<br />
有些解码器不能完全支持open-GOP流，因此这个选项默认关闭。如果要用，请测试你的解码器。
更多open-gop的资料参见该<a href="http://forum.doom9.org/showthread.php?p=1300124#post1300124">链接</a></p>
  </li>
  <li>
    <p>no-cabac<br />
默认：无<br />
说明：关闭CABAC (Context Adaptive Binary Arithmetic Coder)压缩，使用较为低效的CAVLC (Context Adaptive Variable Length Coder)。这两者在压缩效率和解码效率上有10%-20%的差别。</p>
  </li>
  <li>
    <p>ref<br />
默认：3<br />
说明：控制DPB (Decoded Picture Buffer)的大小。可以在0-16之间选择。简单地说，就是设置P帧可以选择它之前的多少帧作为参照帧（B帧的值要小1-2，取决于那个B帧能不能作为参照）。最小可以选择值1，只参照自己前面的那帧。注意H.264标准限制了每个level可以参照的帧的数量。如果选择level4.1，1080p最大选4，720p最大选9。<br />
参照： –b-pyramid, –no-mixed-refs, –level</p>
  </li>
  <li>
    <p>no-deblock<br />
默认：无<br />
说明：完全关闭内置去块滤镜。不推荐使用。<br />
参见： –deblock</p>
  </li>
  <li>
    <p>deblock<br />
默认：0:0<br />
说明：调节H.264标准中的内置去块滤镜。这是个性价比很高的选则。详解参见<a href="http://forum.doom9.org/showthread.php?t=109747">参数运作原理</a>。
参见: –no-deblock</p>
  </li>
  <li>
    <p>slices  　　
默认：0  　　
说明：设置每帧的分片数，强制使用矩形分片。（会被–slice-max-size 或 –slice-max-mbs选项覆盖)如果是在为蓝光光盘编码，设置为4。如果不是，不要使用这个选项，除非你确定你需要它。  　　
参见：–slice-max-size, –slice-max-mbs  　　　　</p>
  </li>
  <li>
    <p>slice-max-size  　　
默认：0  　　
说明：设置每个分块包括NAL头的最大大小（bytes）。 (目前与 –interlaced选项不兼容)  　　
参见：–slices  　　</p>
  </li>
  <li>slice-max-mbs  　　
默认：0  　　
说明：设置每个分块包含的最大宏块数量。 (目前与 –interlaced选项不兼容)  　　
参见：–slices 
 　　</li>
  <li>
    <p>tff<br />
说明：开启隔行编码并设置上半场在前。x264的隔行编码使用MBAFF，因此效率不如逐行扫描。所以，仅在需要在隔行显示的设备上显示时才开启这个选项（或是送给x264之前无法进行反隔行扫描）。这个选项会触发 –pic-struct开启。</p>
  </li>
  <li>
    <p>bff<br />
说明：开启隔行编码并设置下半场在前。更多信息同–tff。</p>
  </li>
  <li>
    <p>constrained-intra<br />
默认：无<br />
说明：开启SVC编码的底层要求的强制帧内预测。选择每个人都无视SVC了，你也可以忽略这个设置。</p>
  </li>
  <li>
    <p>pulldown<br />
默认：none<br />
说明：为你的输入流（逐行扫描的，固定帧率的）使用一组预设的“软性电视模式”。“软性电视模式”在HandBrake Wiki里面有很好的解释。<br />
可选的参数有：none、22、32、64、double、triple、euro。除了none之外的选项都会触发 –pic-struct开启。</p>
  </li>
  <li>fake-interlaced<br />
默认：无<br />
说明：把流标志为隔行的但不按隔行编码。用于编码25p和30p的蓝光兼容视频。</li>
</ul>

<h2 id="section-3">码率控制</h2>

<ul>
  <li>
    <p>qp<br />
默认：无<br />
说明：三种可选的码率控制方法之一。设置x264使用固定量化参数模式。给定的数量将被作为P帧的量化参数，I帧和B帧的量化参数由–ipratio and –pbratio参数进一步算出。QP模式适用固定的量化参数，这意味着最终的文件大小是不可知的（可以通过一些其他方法预测）。设置为0将产出无损的输出。相同视觉质量时，QP模式产出的文件比crf模式大。QP模式将关闭自适应量化器，因为它是固定QP的。
这个选项和 –bitrate和–crf是互斥的，三者只能选一个，参见<a href="http://blog.yikuyiku.com/index.php/archives/1901">原理</a>。一般而言crf都能代替QP模式，不过QP因为完全不需要预测所以它会运行地更快些。<br />
参见：–bitrate, –crf, –ipratio, –pbratio</p>
  </li>
  <li>
    <p>bitrate<br />
默认：无<br />
说明：三种可选的码率控制方法之二。设置x264使用固定目标比特率模式。固定目标比特率意味着最终文件的大小是可知的，但是目标的质量是不可知的。 x264会试图让最终文件的整体码率与给定的码率相等。参数的量纲为kilobits/sec（8bit = 1byte）。通常这个选项和–pass选项配合进行2趟编码。
这个选项和 –qp和–crf是互斥的，三者只能选一个，参见<a href="http://blog.yikuyiku.com/index.php/archives/1901">原理</a>。<br />
参见：–qp, –crf, –ratetol, –pass, –stats</p>
  </li>
  <li>
    <p>crf
默认：23.0<br />
说明：三种可选的码率控制方法之二。固定ratefactor。QP是固定量化器，bitrate是固定文件大小，crf则是固定“质量”。crf可以提供跟QP一样的视觉的质量，但是文件更小。crf的单位是ratefactor。
crf是通过降低那些“不那么重要”的帧的质量做到这一切的。“不那么重要”意思是过于耗费码率又难以用肉眼察觉的帧，比如复杂或者超高速运行的场景。省下来的码率会用在其它更有效的帧里。
crf编码比2趟编码快，因为它相当于省略了第1趟编码。所以crf的最终码率也是不可预测的。你应该根据应用场景来选择码率控制方式。这个选项和 –qp和–crf是互斥的，三者只能选一个，参见<a href="http://blog.yikuyiku.com/index.php/archives/1901">原理</a>。<br />
参见：–qp, –bitrate</p>
  </li>
  <li>
    <p>rc-lookahead<br />
默认：40<br />
说明：为mb-tree ratecontrol（Macroblock Tree Ratecontrol）和vbv-lookahead设置可用的帧的数量。最大可设置为250。对于mb-tree而言，调大这个值会得到更准确地结果，但也会更慢。mb-tree能使用的最大值是–rc-lookahead和–keyint中较小的那一个。对于vbv-lookahead而言，调大这个值会得更稳定和精确的码率控制。vbv-lookahead能使用的最大值是如下公式算出来的：<code>MIN(rc-lookahead, MAX(–keyint, MAX(–vbv-maxrate, –bitrate) / –vbv-bufsize * –fps))</code><br />
参见：–no-mbtree, –vbv-bufsize, –vbv-maxrate</p>
  </li>
  <li>
    <p>vbv-maxrate<br />
默认：0<br />
说明：设置VBV（Video Buffering Verifier）可用的最大码率。使用VBV会降低视频质量，只在真正需要的才设定它。<br />
参见：–vbv-bufsize, –vbv-init，<a href="http://mewiki.project357.com/wiki/X264_Encoding_Suggestions#VBV_Encoding">详解</a></p>
  </li>
  <li>
    <p>vbv-bufsize<br />
默认：0<br />
说明：设置VBV（Video Buffering Verifier）可用的最大缓冲区，单位是kilobits。使用VBV会降低视频质量，只在真正需要的才设定它。<br />
参见：–vbv-maxsize, –vbv-init，<a href="http://mewiki.project357.com/wiki/X264_Encoding_Suggestions#VBV_Encoding">详解</a></p>
  </li>
  <li>
    <p>vbv-init<br />
默认：0.9<br />
说明：设置重放之前必须先载入多大的VBV缓冲。如果值小于1，那么大小就为 vbv-init * vbv-bufsize。如果大于1，则是以kbits为单位的值。<br />
参见：–vbv-maxsize, –vbv-bufsize</p>
  </li>
  <li>
    <p>crf-max<br />
默认：无<br />
说明：类似 –qp-max，但是设置的是最大的ratefactor值而不是量化参数。这个选项仅用于crf和vbv同时启用的时候。它阻止x264使用小于给定值的ratefactor（也就是“质量”），哪怕会违反vbv。一般用于流服务器。<a href="http://Git.videolan.org /gitweb.cgi/x264.git/?a=commit; h=81eee062a4ce9aae1eceb3befcae855c25e5ec52">更多的信息</a>。<br />
参见：–crf, –vbv-maxrate, –vbv-bufsize</p>
  </li>
  <li>
    <p>qpmin<br />
默认：10<br />
说明：设置x264可以使用的最小量化器。量化参数越小，输出越接近输入。使用某些值时，x264的输出可以和输入看起来完全一样，虽然其实并不是精确相同的，通常就够了没有必要使用更多比特在宏块上了。
如果开启了自适应量化器（默认开启），则不鼓励提高qpmin的值，那样可能会降低帧的平坦部分的质量。<br />
参见：–qpmax, –ipratio</p>
  </li>
  <li>
    <p>qpmax<br />
默认：51<br />
说明：qpmin的反面，设置x264可以使用的最大量化器。默认值51是H.264标准中的最大值，质量非常低。默认值51其实相当于没有设置 qpmax。如果你想控制x264输出的最低品质，也许你想要把这个值调低一点（调到30-40最低了），但一般而言不推荐调节这个值。<br />
参见：–qpmin, –pbratio, –crf-max</p>
  </li>
  <li>
    <p>qpstep<br />
默认：4<br />
说明：设置2帧间量化器最大的可变值。</p>
  </li>
  <li>
    <p>ratetol<br />
默认：1.0<br />
说明：这个参数有2个可能的含义：<br />
1、在1趟bitrate编码时，这个参数控制x264可以偏离给定的平均目标比特率的百分比。可以设置为inf完全关闭码率溢出侦测。最低可以设置为 0.01。较高的值可以让x264更好地处理影片结束部分的复杂场景。对于这个目的而言单位是百分比（1.0意味着允许1%的bitrate偏差）。很多影片（比如说动作打斗片）在最后的片段里十分复杂。1趟编码并不知道哪里是最复杂的片断，往往到最后比特都已经用完了。把rateol设置为inf就能解决这个问题，它允许编码器用类似 –crf的方式工作，当然，文件大小会溢出。<br />
2、当开启了vbv时（只要使用了任何–vbv-开头的选项就会开启），这个选项意味着vbv的强度。更高的值意味着允许更高的在设定的vbv值上下波动。在这个含义时，可以使用任意的度量单位。</p>
  </li>
  <li>
    <p>ipratio<br />
默认：1.40<br />
说明：设置平均的I帧的量化器相比P帧量化器增值。更高的值意味着更高的I帧质量。<br />
参见：–pbratio</p>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
