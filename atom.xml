<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[懒人李冰]]></title>
  <link href="http://lazybing.github.io/atom.xml" rel="self"/>
  <link href="http://lazybing.github.io/"/>
  <updated>2017-08-31T08:32:10-07:00</updated>
  <id>http://lazybing.github.io/</id>
  <author>
    <name><![CDATA[李冰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux常用命令之Grep]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/25/linux-command-grep/"/>
    <updated>2017-08-25T22:46:22-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/25/linux-command-grep</id>
    <content type="html"><![CDATA[
<p>本文主要记录 Linux 中常用命令之一 Grep 的使用方法。</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令之Find]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/25/linux-command-find/"/>
    <updated>2017-08-25T08:39:05-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/25/linux-command-find</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#find-" id="markdown-toc-find-">Find 命令概述</a></li>
  <li><a href="#find--1" id="markdown-toc-find--1">Find 命令示例</a></li>
  <li><a href="#section" id="markdown-toc-section">参考资料</a></li>
</ul>

<p>本文主要记录 Linux 中常用命令之一Find 的使用方法。</p>

<!--more-->

<h2 id="find-">Find 命令概述</h2>

<p>Linux 中的 Find 命令是 Linux 系统中最重要最常用的命令之一。它是用来在指定目录下查找文件的，并对查找到的文件进行处理。它的使用格式如下：</p>

<blockquote>
  <p>$find <指定目录> <指定条件> <指定动作></指定动作></指定条件></指定目录></p>
</blockquote>

<ul>
  <li>指定目录:所要搜索的目录，比如默认为当前目录，或指定特定的目录。</li>
  <li>指定条件:所要搜索的文件特征比如文件名称、文件大小、文件属性等。</li>
  <li>指定动作:对搜索结果进行特定的处理，比如对搜索到的结果删除、将搜索结果放到特定文件中。</li>
</ul>

<p>任何位于参数之前的字符串都被视为搜索目录。
它可以根据不同的命令参数选择不同的搜索方式，常用的参数选项有：</p>

<ul>
  <li>-name <filename>:指定搜索文件名称。</filename></li>
  <li>-type <filetype>:指定搜索文件的类型。</filetype></li>
  <li>-size <filesize>:指定搜索文件的大小。</filesize></li>
  <li>-user <username>:指定特定用户。</username></li>
  <li>-group <groupname>:指定特定组。</groupname></li>
  <li>-maxdepth/mindepth <num>:指定搜索目录级别。</num></li>
  <li>-exec <command />:假设 find 指令的回传值为 TRUE，就执行 command 指令。</li>
</ul>

<h2 id="find--1">Find 命令示例</h2>

<p>查看当前目录及其子目录下的所有文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">find</span></code></pre></td></tr></table></div></figure>

<p>根据名字查找文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//find [dir-path] -name [filename]
</span><span class="line">$ find . -name testfile1.txt
</span><span class="line">$ find /home -name testfile1.txt</span></code></pre></td></tr></table></div></figure>

<p>查找某种特定类型的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>忽视大小写来查找文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//find -iname [filename]
</span><span class="line">$ find -iname testfile1.txt</span></code></pre></td></tr></table></div></figure>

<p>查找与搜索模式不匹配的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -not -name "*.txt"
</span><span class="line">$find . ! -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>限定搜索目录级别。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -maxdepth 3 -name "*.txt"
</span><span class="line">$find . -mindepth 3 -name "*.txt"
</span><span class="line">$find . -mindepth 2 -maxdepth 4 -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>显示所有的空文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -empty</span></code></pre></td></tr></table></div></figure>

<p>查找某个特定组的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -group bing -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>查找某个特定用户的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -user bing -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>查找最近修改过的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . -mmin 1 -name "*.txt"</span></code></pre></td></tr></table></div></figure>

<p>查找特定类型的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// find -type &lt;filetype&gt;
</span><span class="line">$find -type d //查找目录文件</span></code></pre></td></tr></table></div></figure>

<p>查找两种类型的文件。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find . \( -name a.out -o -name '*.o' -o name 'core' \) -exec rm {} \;</span></code></pre></td></tr></table></div></figure>

<p>对查找到的文件执行某些命令。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$find $HOME/. -name *.txt -exec head -n 1 -v {} \; &gt; report.txt</span></code></pre></td></tr></table></div></figure>

<h2 id="section">参考资料</h2>

<ol>
  <li><a href="https://en.wikipedia.org/wiki/Find">Find Command Wiki</a></li>
  <li><a href="http://man7.org/linux/man-pages/man1/find.1.html">Find Command Man Page</a></li>
  <li><a href="https://www.howtoforge.com/tutorial/linux-find-command/">14 Practical Examples of Linux Find Command for Beginners</a></li>
  <li><a href="https://www.ibm.com/developerworks/cn/aix/library/es-unix-find.html">使用 UNIX find 命令的高级技术</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_quant_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/23/x264-quant-init/"/>
    <updated>2017-08-23T08:43:19-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/23/x264-quant-init</id>
    <content type="html"><![CDATA[
<p>本文主要记录 X264 中使用到的量化。该函数主要对<code>x264_quant_functions_t</code>结构体中的函数指针进行赋值，</p>

<!--more-->

<p>首先看其中的一个例子<code>quant_8x8</code>函数，它的定义位于<code>common/quant.c</code>中，定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">quant_8x8</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="n">dct</span><span class="p">[</span><span class="mi">64</span><span class="p">],</span> <span class="n">udctcoef</span> <span class="n">mf</span><span class="p">[</span><span class="mi">64</span><span class="p">],</span> <span class="n">udctcoef</span> <span class="n">bias</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">nz</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">64</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">        <span class="n">QUANT_ONE</span><span class="p">(</span> <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">mf</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">bias</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="o">!!</span><span class="n">nz</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中<code>QUANT_ONE</code>定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define QUANT_ONE( coef, mf, f ) \</span>
</span><span class="line"><span class="cp">{ \</span>
</span><span class="line"><span class="cp">    if( (coef) &gt; 0 ) \</span>
</span><span class="line"><span class="cp">        (coef) = (f + (coef)) * (mf) &gt;&gt; 16; \</span>
</span><span class="line"><span class="cp">    else \</span>
</span><span class="line"><span class="cp">        (coef) = - ((f - (coef)) * (mf) &gt;&gt; 16); \</span>
</span><span class="line"><span class="cp">    nz |= (coef); \</span>
</span><span class="line"><span class="cp">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_mc_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/08/22/x264-mc-init/"/>
    <updated>2017-08-22T07:48:31-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/08/22/x264-mc-init</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">运动补偿原理</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">运动估计</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">参考资料</a></li>
</ul>

<p>本文主要记录 X264 中使用到的运动补偿。该函数主要对<code>x264_mc_functions_t</code>结构体中的函数指针进行赋值，
完成了像素内插、拷贝、求平均的函数等等。</p>

<!--more-->

<h3 id="section">运动补偿原理</h3>

<p><a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF">运动补偿</a>是一种描述相邻帧（相邻指编码关系上的相邻，播放顺序未必相邻）差别的方法，具体来说是描述前一帧的每个小块怎样移动到当前帧中的某个位置去。该方法常被视频压缩/视频编解码器用来减少视频序列中的时域冗余，还可用来进行去交织以及运动插值的操作。</p>

<p>一个视频序列包含一定数量的图片–通常称为帧（frame）。相邻的图片通常很相似，也就是说，包含了很多冗余。使用运动补偿的目的是通过消除这种冗余，来提高压缩比。
最早的运动补偿的设计只是简单的从当前帧中减去参考帧，从而得到通常含有较少能量（或者称为信息）的”残差”，从而可以用较低的码率进行编码。解码器可以通过简单的加法完全恢复编码帧。<br />
一个稍微复杂一点的设计是估计一下整帧场景的移动和场景中物体的移动，并将这些运动通过一定的参数编码到码流中去。这样预测帧上的像素值就是由参考帧上具有一定位移的相应像素值而生成的。这样的方法比简单的相减可以获得能量更小的残差，从而获得更好的压缩比–当然，用来描述运动的参数不能在码流中占据太大的部分，否则就会抵消复杂的运动估计带来的好处。<br />
通常，图像帧是一组一组进行处理的。每组的第一帧（通常是第一帧）在编码的时候不使用运动估计的办法，这种帧称为帧内编码帧（Intra frame）或者I帧。该组中的其它帧使用帧间编码帧（Inter frame），通常是P帧。这种编码方式通常被称为IPPPP，表示编码的时候第一帧是I帧，其它帧是P帧。<br />
在进行预测的时候，不仅仅可以从过去的帧来预测当前帧，还可以使用未来的帧来预测当前帧。当然在编码的时候，未来的帧必须比当前帧更早的编码，也就是说，编码的顺序和播放的顺序是不同的。通常这样的当前帧是使用过去和未来的I帧或者P帧同时进行预测，被称为双向预测帧，即B帧。这种编码方式的编码顺序的一个例子为IBBPBBPBBPBB。</p>

<p>运动补偿的方法包含：<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E5.85.A8.E5.B1.80.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">全局运动补偿</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E5.88.86.E5.9D.97.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">分块运动补偿</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E5.8F.AF.E5.8F.98.E5.88.86.E5.9D.97.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">可变分块运动补偿</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF#.E9.87.8D.E5.8F.A0.E5.88.86.E5.9D.97.E8.BF.90.E5.8A.A8.E8.A1.A5.E5.81.BF">重叠分块运动个补偿</a>。</p>

<p>运动估计就是寻找最优或次优的运动向量的过程。某个块的预测误差量常常是指在运动补偿区域所有像素中，预测像素和实际像素数值的均方差或者绝对差别总和。</p>

<h3 id="section-1">运动估计</h3>

<p>运动估计的基本思想是将图像序列的每一帧分成许多互不重叠的宏块，并认为宏块内所有象素的位移量都相同，然后对每个宏块到参考帧某一给定特定搜索范围内根据一定的匹配准则找出与当前块最相似的块，即匹配块，匹配块与当前块的相对位移即为运动矢量。视频压缩的时候，只需保存运动矢量和残差数据就可以完全恢复出当前块。得到运动矢量的过程被称为运动估计。</p>

<p>运动矢量和经过运动匹配后得到的预测误差共同发送到解码端，在解码端按照运动矢量指明的位置，从已经解码的邻近参考帧图像中找到相应的块或宏块，和预测误差相加后就得到了块或宏块在当前帧中的位置。</p>

<p>实际应用时，只将运动矢量及最佳匹配块与当前块之间的差值块一起编码传输。在接收端，通过运动矢量在已经恢复的相邻帧中找到当前块的最佳匹配块，并与接收到的差值块相加恢复出当前块，这就是运动补偿基本过程。</p>

<p>运动估计算法是视频压缩编码的核心算法之一。高质量的运动估计算法是高效视频编码的前提和基础。其中块匹配法（BMA, Block Match Algorithm）由于算法简单和易于硬件实现，被广泛应用于各视频编码标准中。块匹配法的基本思想是先将图像划分为许多子块，然后对当前帧中的每一块根据一定的匹配准则在相邻帧中找出当前块的匹配块，由此得到两者的相对位移，即当前块的运动矢量。在H.264标准的搜索算法中，图像序列的当前帧被划分成互不重叠16×16大小的子块，而每个子块又可划分成更小的子块，当前子块按一定的块匹配准则在参考帧中对应位置的一定搜索范围内寻找最佳匹配块，由此得到运动矢量和匹配误差。运动估计的估计精度和运算复杂度取决于搜索策略和块匹配准则。</p>

<h3 id="section-2">参考资料</h3>

<ol>
  <li><a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF">运动补偿——维基百科</a></li>
  <li><a href="http://www.cnblogs.com/AndyJee/p/3724917.html">运动估计</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之块滤波]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/22/deblock-filter/"/>
    <updated>2017-07-22T06:16:09-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/22/deblock-filter</id>
    <content type="html"><![CDATA[
<p>本文主要介绍 X264 中滤波的部分。<br />
<!--more--></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_zigzag_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/21/x264-zigzag-init/"/>
    <updated>2017-07-21T17:22:55-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/21/x264-zigzag-init</id>
    <content type="html"><![CDATA[
<p>本文主要记录 X264 中使用到的 zigzag 技术。
<!--more--></p>

<p>X264 中关于 zigzag 的函数定义在<code>dct.c</code>的<code>x264_zigzag_init</code>中。</p>

<p>首先看一下源码中关于 zigzag 的定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_zigzag_init</span><span class="p">(</span> <span class="kt">int</span> <span class="n">cpu</span><span class="p">,</span> <span class="kt">x264_zigzag_function_t</span> <span class="o">*</span><span class="n">pf_progressive</span><span class="p">,</span> <span class="kt">x264_zigzag_function_t</span> <span class="o">*</span><span class="n">pf_interlaced</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pf_interlaced</span><span class="o">-&gt;</span><span class="n">scan_8x8</span>   <span class="o">=</span> <span class="n">zigzag_scan_8x8_field</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_progressive</span><span class="o">-&gt;</span><span class="n">scan_8x8</span>  <span class="o">=</span> <span class="n">zigzag_scan_8x8_frame</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_interlaced</span><span class="o">-&gt;</span><span class="n">scan_4x4</span>   <span class="o">=</span> <span class="n">zigzag_scan_4x4_field</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_progressive</span><span class="o">-&gt;</span><span class="n">scan_4x4</span>  <span class="o">=</span> <span class="n">zigzag_scan_4x4_frame</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_interlaced</span><span class="o">-&gt;</span><span class="n">sub_8x8</span>    <span class="o">=</span> <span class="n">zigzag_sub_8x8_field</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_progressive</span><span class="o">-&gt;</span><span class="n">sub_8x8</span>   <span class="o">=</span> <span class="n">zigzag_sub_8x8_frame</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_interlaced</span><span class="o">-&gt;</span><span class="n">sub_4x4</span>    <span class="o">=</span> <span class="n">zigzag_sub_4x4_field</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_progressive</span><span class="o">-&gt;</span><span class="n">sub_4x4</span>   <span class="o">=</span> <span class="n">zigzag_sub_4x4_frame</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_interlaced</span><span class="o">-&gt;</span><span class="n">sub_4x4ac</span>  <span class="o">=</span> <span class="n">zigzag_sub_4x4ac_field</span><span class="p">;</span>
</span><span class="line">    <span class="n">pf_progressive</span><span class="o">-&gt;</span><span class="n">sub_4x4ac</span> <span class="o">=</span> <span class="n">zigzag_sub_4x4ac_frame</span><span class="p">;</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>从源码中可以看出 zigzag 扫描有两种分类方法：按照宏块大小可分为8x8扫描和4x4扫描、按照图像类型可分为<code>frame</code>扫描和<code>field</code>扫描。<br />
首先看一下最简单的4x4宏块帧扫描的代码描述：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define ZIGZAG4_FRAME\</span>
</span><span class="line"><span class="cp">    ZIGDC( 0,0,0) ZIG( 1,0,1) ZIG( 2,1,0) ZIG( 3,2,0)\</span>
</span><span class="line"><span class="cp">    ZIG( 4,1,1) ZIG( 5,0,2) ZIG( 6,0,3) ZIG( 7,1,2)\</span>
</span><span class="line"><span class="cp">    ZIG( 8,2,1) ZIG( 9,3,0) ZIG(10,3,1) ZIG(11,2,2)\</span>
</span><span class="line"><span class="cp">    ZIG(12,1,3) ZIG(13,2,3) ZIG(14,3,2) ZIG(15,3,3)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define ZIG(i,y,x) level[i] = dct[x*4+y];</span>
</span><span class="line"><span class="cp">#define ZIGDC(i,y,x) ZIG(i,y,x)</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">zigzag_scan_4x4_frame</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="n">level</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="n">dctcoef</span> <span class="n">dct</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">ZIGZAG4_FRAME</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>将上面的定义展开如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">level</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="n">dct</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

<p>上面的代码只是简单的把一个4x4 宏块的二维数组扫描成了一个一维线性数组，但具体的扫描行为不够形象。</p>

<p>在<a href="http://files.cnblogs.com/files/irish/The_H.264_advanced_video_compression_standard.pdf">The H.264 advanced video compression standard</a>里有如下描述：</p>

<blockquote><p>Blocks of transform coefficients are scanned, i.e. converted to linear array, prior to entropy coding. The scan order is intended to group together significant coefficients, i.e. non-zero quantized coefficients. In a typical block in a progressive frame, non-zero coefficients tend to be clustered around the top left'DC' coefficient. In this case, a zigzag scan order may be the most efficient, shown in 4x4 and 8x8 blocks. After scanning the block in a zigzag order, the coefficients are placed in a linear array in which most of the non-zero coefficients tend to occur near the start of the array.</p><p>However, in an interlaced field or a field of a progressive frame converted from interlaced content, vertical frequencies in each block tend to dominate because the field is vertically sub-sampled from the original scene. This means that non-zero coefficients ten to occur at the top and towards the left side of the block. A block in a field macroblock is therefore scanned in a modified field scan order.</p><footer><strong>Block scan orders</strong></footer></blockquote>

<p>通过描述可以看出，通过扫描后，非零系统会集中在一维线性数组最开始的几个位置。示例图如下：</p>

<p><img src="http://lazybing.github.io/images/zigzag/progressive_scan_orders.png" /></p>

<p><img src="http://lazybing.github.io/images/zigzag/field_scan_orders.png" /></p>

<p>上面的图片给出了扫描的顺序，X264 中的源码，与 4x4 frame 类似，此处不在重复。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之码流控制]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/15/x264-rake-control/"/>
    <updated>2017-07-15T07:19:27-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/15/x264-rake-control</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">码率控制基本概念</a></li>
  <li><a href="#x264-" id="markdown-toc-x264-">X264 中码率控制</a>    <ul>
      <li><a href="#x264--qp" id="markdown-toc-x264--qp">X264 中关于 QP</a></li>
    </ul>
  </li>
  <li><a href="#section-1" id="markdown-toc-section-1">参考文档</a></li>
</ul>

<p>本文主要记录 X264 中使用到的码流控制。</p>

<!--more-->

<h2 id="section">码率控制基本概念</h2>

<p>码率控制是指视频编码中决定输出码率的过程。首先介绍一下 X264 中使用到的与码率控制相关的几个概念：</p>

<ul>
  <li>
    <p>CQP(Constant QP),恒定QP（Quantization Parameter）,追求量化失真的恒定，瞬时码率会随场景
复杂度而波动，该模式基本被淘汰(被 CRF 取代)，只有用”-pq 0”来进行无损编码还有价值。</p>
  </li>
  <li>
    <p>CRF(Constant Rate Factor),恒定质量因子，与恒定 QP 类似，但追求主观感知到的质量恒定，瞬时码率也
会随场景复杂度波动。对于快速运动或细节丰富的场景会适当增大量化失真（因为人眼不易注意到），反之
对于静止或平坦区域则减少量化失真。</p>
  </li>
  <li>
    <p>ABR(Average Bitrate),平均码率，追求整个文件的码率平均达到指定值（对于流媒体有何特殊之处？）。
瞬时码率也会随着场景复杂度波动，但最终要受平均值的约束。</p>
  </li>
  <li>
    <p>CBR(Constant Bitrate),恒定码率。前面几个模式都属于可变码率（瞬时码率在波动），即VBR（Variable Bitrate）；
恒定码率与之相对，即码率保持不变。</p>
  </li>
</ul>

<p>x264 并没有直接提供 CBR 这种模式，但可以通过在 VBR 模式的基础上做进一步限制来达到恒定码率的目标。
CRF 和 ABR 模式都能通过<code>--vbv-maxrate</code> <code>--vbv-bufsize</code>来限制码率波动。</p>

<p>关于这几个概念的参考如下：</p>

<p>1.<a href="https://codesequoia.wordpress.com/2010/04/19/what-are-cbr-vbv-and-cpb/">Waht are CBR,VBV and CPB?</a><br />
2.<a href="https://trac.ffmpeg.org/wiki/Encode/H.264">FFmpeg and H.264 Encoding Guide</a><br />
3.<a href="http://slhck.info/video/2017/02/24/crf-guide.html">CRF Guide(Constant Rate Factor in X264 and X265)</a><br />
4.<a href="https://en.wikibooks.org/wiki/MeGUI/x264_Settings">MeGUI/x264 setting</a></p>

<h2 id="x264-">X264 中码率控制</h2>

<p>X264 中对于码率控制方法有三种：X264_RC_CQP、X264_RC_CRF、X264_RC_ABR。默认情况是选择 CRF 方法，设置是在
<code>x264_param_default</code>函数里设置的</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">param-&gt;rc.i_rc_method = X264_RC_CRF;
</span><span class="line">param-&gt;rc.f_rf_constant = 23;</span></code></pre></td></tr></table></div></figure>
<p>关于这三种方法，网上有提到优先级是<code>ABR&gt;CQP&gt;CRF</code>的，但分析 X264 的源码，并没有看出有优先级顺序，关于码率控制方法的设置代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="n">OPT</span><span class="p">(</span><span class="s">&quot;bitrate&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_bitrate</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_rc_method</span> <span class="o">=</span> <span class="n">X264_RC_ABR</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">OPT2</span><span class="p">(</span><span class="s">&quot;qp&quot;</span><span class="p">,</span> <span class="s">&quot;qp_constant&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_rc_method</span> <span class="o">=</span> <span class="n">X264_RC_CQP</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">OPT</span><span class="p">(</span><span class="s">&quot;crf&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">f_rf_constant</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_rc_method</span> <span class="o">=</span> <span class="n">X264_RC_CRF</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="x264--qp">X264 中关于 QP</h3>

<p>首先看一段 X264 中关于 QP 值的代码，该段代码在<code>x264_ratecontrol_new</code>：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">rc</span><span class="o">-&gt;</span><span class="n">ip_offset</span> <span class="o">=</span> <span class="mf">6.0</span> <span class="o">*</span> <span class="n">log2f</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_ip_factor</span><span class="p">);</span>
</span><span class="line"><span class="n">rc</span><span class="o">-&gt;</span><span class="n">pb_offset</span> <span class="o">=</span> <span class="mf">6.0</span> <span class="o">*</span> <span class="n">log2f</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">f_pb_factor</span><span class="p">);</span>
</span><span class="line"><span class="n">rc</span><span class="o">-&gt;</span><span class="n">qp_constant</span><span class="p">[</span><span class="n">SLICE_TYPE_P</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span><span class="p">;</span>
</span><span class="line"><span class="n">rc</span><span class="o">-&gt;</span><span class="n">qp_constant</span><span class="p">[</span><span class="n">SLICE_TYPE_I</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_clip3</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span> <span class="o">-</span> <span class="n">rc</span><span class="o">-&gt;</span><span class="n">ip_offset</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">QP_MAX</span><span class="p">);</span>
</span><span class="line"><span class="n">rc</span><span class="o">-&gt;</span><span class="n">qp_constant</span><span class="p">[</span><span class="n">SLICE_TYPE_B</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_clip3</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">.</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_constant</span> <span class="o">+</span> <span class="n">rc</span><span class="o">-&gt;</span><span class="n">pb_offset</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">QP_MAX</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>从上面的代码可以看出，默认的<code>i_qp_constant</code>或者通过命令行传入的<code>qp</code> <code>qp_constant</code>实际设置的是 P 帧的 QP。
I 帧和 B 帧的 QP 设置是根据<code>f_ip_factor</code> <code>f_pb_factor</code>计算得到。</p>

<p>在研究编码算法的时候，一般会选用 CQP 方法，设定 QP 为 24、28、32、36、40等（一般选 4 个 QP 值），然后比较算法优劣。
在 X264 中，关于QPmin、QPmax、QPstep的默认设置如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">param</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_min</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="n">param</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_max</span> <span class="o">=</span> <span class="n">QP_MAX</span><span class="p">;</span>
</span><span class="line"><span class="n">param</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">.</span><span class="n">i_qp_step</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>
    <p>QPmin,默认值：0.定义 X264 可以使用的最小量化值，量化值越小，输出视频质量越好。当 QP 小于某一个值后，
编码输出的宏块质量与原始块极为相近，此时没必要继续降低 QP。如果开启了自适应量化器（默认开启），不建议
提高 QPmin 的值，因为这会降低平滑背景区域的视觉质量。</p>
  </li>
  <li>
    <p>QPmax，默认值：51.定义 X264 可以使用的最大量化值。默认值 51 是 H.264 规格中可供使用的最大量化值。如果
想要控制 X264 输出的最低品质，可以将此值设置的小一些。QPmin 和 QPmax 在CRF，ABR方法下是有效的，过低的设置
QPmax，可能造成 ABR 码率控制失败。不建议调整该参数。</p>
  </li>
  <li>
    <p>QPstep，默认值：4.设置两帧间量化值的最大变化幅度。</p>
  </li>
</ul>

<p>帧间 QP 变化，帧内宏块 QP 不变，输出码率未知，各帧输出视觉质量有变化（高 QP 底码率的情况下会更明显）。</p>

<p>比较三种码率控制方式如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">码率控制方法</th>
      <th style="text-align: center">视觉质量稳定性</th>
      <th style="text-align: center">即时输出码率</th>
      <th style="text-align: center">输出文件大小</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">CBR</td>
      <td style="text-align: center">不稳定</td>
      <td style="text-align: center">恒定</td>
      <td style="text-align: center">可控</td>
    </tr>
    <tr>
      <td style="text-align: center">VBR</td>
      <td style="text-align: center">稳定</td>
      <td style="text-align: center">变化</td>
      <td style="text-align: center">不可控</td>
    </tr>
    <tr>
      <td style="text-align: center">ABR</td>
      <td style="text-align: center">基本稳定</td>
      <td style="text-align: center">变化</td>
      <td style="text-align: center">可控</td>
    </tr>
  </tbody>
</table>

<h2 id="section-1">参考文档</h2>

<ol>
  <li><a href="https://mailman.videolan.org/pipermail/x264-devel/2010-February/006933.html">Making sense out of x264 rate control methods</a></li>
  <li><a href="http://slhck.info/video/2017/03/01/rate-control.html">Understanding Rate Control Modes (x264, x265)</a></li>
  <li><a href="http://slhck.info/video/2017/02/24/crf-guide.html">CRF Guide (Constant Rate Factor in x264 and x265)</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_dct_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/10/x264-dct-init/"/>
    <updated>2017-07-10T08:48:23-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/10/x264-dct-init</id>
    <content type="html"><![CDATA[
<p>本文主要记录 X264 中对于 DCT 变换的初始化过程。</p>

<!--more-->

<p>DCT 变化理论比较抽象，先从 X264 中代码入手，然后经过 DCT 变换后，比较变换前和变换后的数据，能够更好的理解 DCT 变换。</p>

<p>X264 中对 DCT 各类函数的定义都在<code>common/dct.c</code>里面。其中 sub4x4_dct 定义如下：</p>

<figure class="code"><figcaption><span>sub4x4_dct </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">pixel_sub_wxh</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="o">*</span><span class="n">diff</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i_size</span><span class="p">,</span>
</span><span class="line">                                  <span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i_pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i_pix2</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">i_size</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">i_size</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">            <span class="n">diff</span><span class="p">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">i_size</span><span class="p">]</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
</span><span class="line">        <span class="n">pix1</span> <span class="o">+=</span> <span class="n">i_pix1</span><span class="p">;</span>
</span><span class="line">        <span class="n">pix2</span> <span class="o">+=</span> <span class="n">i_pix2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">sub4x4_dct</span><span class="p">(</span> <span class="n">dctcoef</span> <span class="n">dct</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">dctcoef</span> <span class="n">d</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class="line">    <span class="n">dctcoef</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">pixel_sub_wxh</span><span class="p">(</span> <span class="n">d</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">pix1</span><span class="p">,</span> <span class="n">FENC_STRIDE</span><span class="p">,</span> <span class="n">pix2</span><span class="p">,</span> <span class="n">FDEC_STRIDE</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">s03</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">s12</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">d03</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">d12</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">+</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">d03</span> <span class="o">+</span>   <span class="n">d12</span><span class="p">;</span>
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">-</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span>   <span class="n">d03</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">d12</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">s03</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">s12</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">d03</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">d12</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">        <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">+</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class="line">        <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">d03</span> <span class="o">+</span>   <span class="n">d12</span><span class="p">;</span>
</span><span class="line">        <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span>   <span class="n">s03</span> <span class="o">-</span>   <span class="n">s12</span><span class="p">;</span>
</span><span class="line">        <span class="n">dct</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span>   <span class="n">d03</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">d12</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中的<code>pixel_sub_wxh</code>是获取 pix1 和 pix2 两块数据的残差。这里对 pix1 和 pix2 随意举两个相似的4x4的矩阵作为例子，
之所以要<code>随意</code>是为了突出其普遍性，适用于大多数的 DCT 变换；而<code>相似</code>是因为 pix1 为编码块，pix2 为预测块，它们理论上就应该是相似的。为此举例如下：</p>

<p>$pix1[4x4]=[(23,24,27,29),(24,25,28,28),(26,28,29,29),(26,25,28,30)];$<br />
$pix2[4x4]=[(20,23,27,29),(23,24,26,27),(25,26,25,28),(26,24,28,30)];$</p>

<p>将 pix1 和 pix2 经过<code>pixel_sub_wxh</code>的计算后，得到矩阵d[4x4]为[(3,1,0,0),(1,1,2,1),(1,2,4,1),(0,1,0,0)]。<br />
经第一个for循环后得到tmp[4x4]=[]</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_pixel_init函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/08/x264-pixel-init-function/"/>
    <updated>2017-07-08T22:10:59-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/08/x264-pixel-init-function</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#sadsatdssd" id="markdown-toc-sadsatdssd">SAD、SATD、SSD等相关知识介绍</a></li>
  <li><a href="#x264" id="markdown-toc-x264">X264中的函数实现</a>    <ul>
      <li><a href="#sad-" id="markdown-toc-sad-">SAD 实现过程</a></li>
      <li><a href="#ssd-" id="markdown-toc-ssd-">SSD 实现过程</a></li>
      <li><a href="#satd-" id="markdown-toc-satd-">SATD 实现过程</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录<code>x264_pixel_init</code>函数的实现，该函数主要是与像素计算有关的函数，包括SAD、SATD、SSD、SSIM等，它会在打开编码器(x264_encoder_open)时被调用到。<br />
<!--more--></p>

<h2 id="sadsatdssd">SAD、SATD、SSD等相关知识介绍</h2>

<ul>
  <li>SAD(Sum of Absolute Difference)= SAE(Sum of Absolute Error)即绝对误差和</li>
  <li>SATD（Sum of Absolute Transformed Difference）即hadamard变换后再绝对值求和</li>
  <li>SSD（Sum of Squared Difference）=SSE（Sum of Squared Error)即差值的平方和</li>
  <li>MAD（Mean Absolute Difference）=MAE（Mean Absolute Error)即平均绝对差值</li>
  <li>MSD（Mean Squared Difference）=MSE（Mean Squared Error）即平均平方误差</li>
</ul>

<h2 id="x264">X264中的函数实现</h2>

<p><code>x264_pixel_init</code>函数的定义位于 X264 项目中的<code>common/pixel.c</code>文件中。定义如下：</p>

<figure class="code"><figcaption><span>x264_pixel_init </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_pixel_init</span><span class="p">(</span> <span class="kt">int</span> <span class="n">cpu</span><span class="p">,</span> <span class="kt">x264_pixel_function_t</span> <span class="o">*</span><span class="n">pixf</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">memset</span><span class="p">(</span> <span class="n">pixf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">pixf</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define INIT2_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_16x16] = x264_pixel_##name2##_16x16##cpu;\</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_16x8]  = x264_pixel_##name2##_16x8##cpu;</span>
</span><span class="line"><span class="cp">#define INIT4_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    INIT2_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_8x16]  = x264_pixel_##name2##_8x16##cpu;\</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_8x8]   = x264_pixel_##name2##_8x8##cpu;</span>
</span><span class="line"><span class="cp">#define INIT5_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    INIT4_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_8x4]   = x264_pixel_##name2##_8x4##cpu;</span>
</span><span class="line"><span class="cp">#define INIT6_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    INIT5_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_4x8]   = x264_pixel_##name2##_4x8##cpu;</span>
</span><span class="line"><span class="cp">#define INIT7_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    INIT6_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_4x4]   = x264_pixel_##name2##_4x4##cpu;</span>
</span><span class="line"><span class="cp">#define INIT8_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    INIT7_NAME( name1, name2, cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;name1[PIXEL_4x16]  = x264_pixel_##name2##_4x16##cpu;</span>
</span><span class="line"><span class="cp">#define INIT2( name, cpu ) INIT2_NAME( name, name, cpu )</span>
</span><span class="line"><span class="cp">#define INIT4( name, cpu ) INIT4_NAME( name, name, cpu )</span>
</span><span class="line"><span class="cp">#define INIT5( name, cpu ) INIT5_NAME( name, name, cpu )</span>
</span><span class="line"><span class="cp">#define INIT6( name, cpu ) INIT6_NAME( name, name, cpu )</span>
</span><span class="line"><span class="cp">#define INIT7( name, cpu ) INIT7_NAME( name, name, cpu )</span>
</span><span class="line"><span class="cp">#define INIT8( name, cpu ) INIT8_NAME( name, name, cpu )</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define INIT_ADS( cpu ) \</span>
</span><span class="line"><span class="cp">    pixf-&gt;ads[PIXEL_16x16] = x264_pixel_ads4##cpu;\</span>
</span><span class="line"><span class="cp">    pixf-&gt;ads[PIXEL_16x8] = x264_pixel_ads2##cpu;\</span>
</span><span class="line"><span class="cp">    pixf-&gt;ads[PIXEL_8x8] = x264_pixel_ads1##cpu;</span>
</span><span class="line">
</span><span class="line">    <span class="n">INIT8</span><span class="p">(</span> <span class="n">sad</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT8_NAME</span><span class="p">(</span> <span class="n">sad_aligned</span><span class="p">,</span> <span class="n">sad</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT7</span><span class="p">(</span> <span class="n">sad_x3</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT7</span><span class="p">(</span> <span class="n">sad_x4</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT8</span><span class="p">(</span> <span class="n">ssd</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT8</span><span class="p">(</span> <span class="n">satd</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT7</span><span class="p">(</span> <span class="n">satd_x3</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT7</span><span class="p">(</span> <span class="n">satd_x4</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT4</span><span class="p">(</span> <span class="n">hadamard_ac</span><span class="p">,</span> <span class="p">);</span>
</span><span class="line">    <span class="n">INIT_ADS</span><span class="p">(</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sa8d</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_pixel_sa8d_16x16</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sa8d</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_sa8d_8x8</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">var</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_pixel_var_16x16</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">var</span><span class="p">[</span><span class="n">PIXEL_8x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_var_8x16</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">var</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_var_8x8</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">var2</span><span class="p">[</span><span class="n">PIXEL_8x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_var2_8x16</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">var2</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_var2_8x8</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd_nv12_core</span> <span class="o">=</span> <span class="n">pixel_ssd_nv12_core</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssim_4x4x2_core</span> <span class="o">=</span> <span class="n">ssim_4x4x2_core</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssim_end4</span> <span class="o">=</span> <span class="n">ssim_end4</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">vsad</span> <span class="o">=</span> <span class="n">pixel_vsad</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">asd8</span> <span class="o">=</span> <span class="n">pixel_asd8</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sad_x3_4x4</span>    <span class="o">=</span> <span class="n">x264_intra_sad_x3_4x4</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_satd_x3_4x4</span>   <span class="o">=</span> <span class="n">x264_intra_satd_x3_4x4</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sad_x3_8x8</span>    <span class="o">=</span> <span class="n">x264_intra_sad_x3_8x8</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sa8d_x3_8x8</span>   <span class="o">=</span> <span class="n">x264_intra_sa8d_x3_8x8</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sad_x3_8x8c</span>   <span class="o">=</span> <span class="n">x264_intra_sad_x3_8x8c</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_satd_x3_8x8c</span>  <span class="o">=</span> <span class="n">x264_intra_satd_x3_8x8c</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sad_x3_8x16c</span>  <span class="o">=</span> <span class="n">x264_intra_sad_x3_8x16c</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_satd_x3_8x16c</span> <span class="o">=</span> <span class="n">x264_intra_satd_x3_8x16c</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_sad_x3_16x16</span>  <span class="o">=</span> <span class="n">x264_intra_sad_x3_16x16</span><span class="p">;</span>
</span><span class="line">    <span class="n">pixf</span><span class="o">-&gt;</span><span class="n">intra_satd_x3_16x16</span> <span class="o">=</span> <span class="n">x264_intra_satd_x3_16x16</span><span class="p">;</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="c1">//后面是与 CPU 有关的函数定义，此处略去</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>下面分别介绍 SAD、SSD、SATD 的实现过程。</p>

<h3 id="sad-">SAD 实现过程</h3>

<p>将上面代码中的<code>INIT8(sad,)</code>展开，可以得到如下代码：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_pixel_sad_16x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_16x8</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_sad_16x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_8x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_sad_8x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_sad_8x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_8x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_sad_8x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_4x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_sad_4x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_4x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_sad_4x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">sad</span><span class="p">[</span><span class="n">PIXEL_4x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_sad_4x16</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>我们选取其中最简单的<code>x264_pixel_sad_4x4</code>继续展开，它是通过一个宏来定义的：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">PIXEL_SAD_C</span><span class="p">(</span> <span class="n">x264_pixel_sad_4x4</span><span class="p">,</span>    <span class="mi">4</span><span class="p">,</span>  <span class="mi">4</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PIXEL_SAD_C( name, lx, ly ) \</span>
</span><span class="line"><span class="cp">static int name( pixel *pix1, intptr_t i_stride_pix1,  \</span>
</span><span class="line"><span class="cp">                 pixel *pix2, intptr_t i_stride_pix2 ) \</span>
</span><span class="line"><span class="cp">{                                                   \</span>
</span><span class="line"><span class="cp">    int i_sum = 0;                                  \</span>
</span><span class="line"><span class="cp">    for( int y = 0; y &lt; ly; y++ )                   \</span>
</span><span class="line"><span class="cp">    {                                               \</span>
</span><span class="line"><span class="cp">        for( int x = 0; x &lt; lx; x++ )               \</span>
</span><span class="line"><span class="cp">        {                                           \</span>
</span><span class="line"><span class="cp">            i_sum += abs( pix1[x] - pix2[x] );      \</span>
</span><span class="line"><span class="cp">        }                                           \</span>
</span><span class="line"><span class="cp">        pix1 += i_stride_pix1;                      \</span>
</span><span class="line"><span class="cp">        pix2 += i_stride_pix2;                      \</span>
</span><span class="line"><span class="cp">    }                                               \</span>
</span><span class="line"><span class="cp">    return i_sum;                                   \</span>
</span><span class="line"><span class="cp">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>展开后，可以得到如下代码：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">x264_pixel_sad_4x4</span><span class="p">(</span><span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_stride_pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_stride_pix2</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">i_sum</span> <span class="o">+=</span> <span class="n">abs</span><span class="p">(</span><span class="n">pix1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">pix1</span> <span class="o">+=</span> <span class="n">i_stride_pix1</span><span class="p">;</span>
</span><span class="line">        <span class="n">pix2</span> <span class="o">+=</span> <span class="n">i_stride_pix2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i_sum</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="ssd-">SSD 实现过程</h3>

<p>将上面代码中的<code>INIT8(ssd,)</code>展开，可以得到如下代码：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_pixel_ssd_16x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_16x8</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_ssd_16x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_8x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_ssd_8x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_ssd_8x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_8x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_ssd_8x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_4x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_ssd_4x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_4x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_ssd_4x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">ssd</span><span class="p">[</span><span class="n">PIXEL_4x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_ssd_4x16</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">PIXEL_SSD_C</span><span class="p">(</span> <span class="n">x264_pixel_ssd_4x4</span><span class="p">,</span>    <span class="mi">4</span><span class="p">,</span>  <span class="mi">4</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PIXEL_SSD_C( name, lx, ly ) \</span>
</span><span class="line"><span class="cp">static int name( pixel *pix1, intptr_t i_stride_pix1,  \</span>
</span><span class="line"><span class="cp">                 pixel *pix2, intptr_t i_stride_pix2 ) \</span>
</span><span class="line"><span class="cp">{                                                   \</span>
</span><span class="line"><span class="cp">    int i_sum = 0;                                  \</span>
</span><span class="line"><span class="cp">    for( int y = 0; y &lt; ly; y++ )                   \</span>
</span><span class="line"><span class="cp">    {                                               \</span>
</span><span class="line"><span class="cp">        for( int x = 0; x &lt; lx; x++ )               \</span>
</span><span class="line"><span class="cp">        {                                           \</span>
</span><span class="line"><span class="cp">            int d = pix1[x] - pix2[x];              \</span>
</span><span class="line"><span class="cp">            i_sum += d*d;                           \</span>
</span><span class="line"><span class="cp">        }                                           \</span>
</span><span class="line"><span class="cp">        pix1 += i_stride_pix1;                      \</span>
</span><span class="line"><span class="cp">        pix2 += i_stride_pix2;                      \</span>
</span><span class="line"><span class="cp">    }                                               \</span>
</span><span class="line"><span class="cp">    return i_sum;                                   \</span>
</span><span class="line"><span class="cp">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>此时，可以得到<code>x264_pixel_ssd_4x4</code>的定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">x264_pixel_ssd_4x4</span><span class="p">(</span><span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_stride_pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_stride_pix2</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
</span><span class="line">            <span class="n">i_sum</span> <span class="o">+=</span> <span class="n">d</span><span class="o">*</span><span class="n">d</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">pix1</span> <span class="o">+=</span> <span class="n">i_stride_pix1</span><span class="p">;</span>
</span><span class="line">        <span class="n">pix2</span> <span class="o">+=</span> <span class="n">i_stride_pix2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i_sum</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="satd-">SATD 实现过程</h3>

<p>将代码中的<code>INIT8(satd,)</code>展开，可以得到如下代码：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_16x16</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_pixel_satd_16x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_16x8</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_satd_16x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_8x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_satd_8x16</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_8x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_satd_8x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_8x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_satd_8x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_4x8</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_satd_4x8</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_4x4</span><span class="p">]</span>   <span class="o">=</span> <span class="n">x264_pixel_satd_4x4</span><span class="p">;</span>
</span><span class="line"><span class="n">pixf</span><span class="o">-&gt;</span><span class="n">satd</span><span class="p">[</span><span class="n">PIXEL_4x16</span><span class="p">]</span>  <span class="o">=</span> <span class="n">x264_pixel_satd_4x16</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>同样，选取最简单的<code>x264_pixel_satd_4x4</code>继续展开，它的定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="n">NOINLINE</span> <span class="kt">int</span> <span class="nf">x264_pixel_satd_4x4</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix1</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_pix1</span><span class="p">,</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">pix2</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">i_pix2</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">sum2_t</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">    <span class="kt">sum2_t</span> <span class="n">a0</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">b0</span><span class="p">,</span> <span class="n">b1</span><span class="p">;</span>
</span><span class="line">    <span class="kt">sum2_t</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">pix1</span> <span class="o">+=</span> <span class="n">i_pix1</span><span class="p">,</span> <span class="n">pix2</span> <span class="o">+=</span> <span class="n">i_pix2</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">a0</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="n">a1</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">        <span class="n">b0</span> <span class="o">=</span> <span class="p">(</span><span class="n">a0</span><span class="o">+</span><span class="n">a1</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">a0</span><span class="o">-</span><span class="n">a1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">BITS_PER_SUM</span><span class="p">);</span>
</span><span class="line">        <span class="n">a2</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">        <span class="n">a3</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="n">pix2</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">        <span class="n">b1</span> <span class="o">=</span> <span class="p">(</span><span class="n">a2</span><span class="o">+</span><span class="n">a3</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">a2</span><span class="o">-</span><span class="n">a3</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">BITS_PER_SUM</span><span class="p">);</span>
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">b0</span> <span class="o">+</span> <span class="n">b1</span><span class="p">;</span>
</span><span class="line">        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">b0</span> <span class="o">-</span> <span class="n">b1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">HADAMARD4</span><span class="p">(</span> <span class="n">a0</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">        <span class="n">a0</span> <span class="o">=</span> <span class="n">abs2</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs2</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs2</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs2</span><span class="p">(</span><span class="n">a3</span><span class="p">);</span>
</span><span class="line">        <span class="n">sum</span> <span class="o">+=</span> <span class="p">((</span><span class="kt">sum_t</span><span class="p">)</span><span class="n">a0</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">a0</span><span class="o">&gt;&gt;</span><span class="n">BITS_PER_SUM</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">sum</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之帧间预测]]></title>
    <link href="http://lazybing.github.io/blog/2017/07/08/x264-inter-prediction/"/>
    <updated>2017-07-08T07:44:15-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/07/08/x264-inter-prediction</id>
    <content type="html"><![CDATA[<p>本文记录 H264 中关于帧间预测的部分，并详细解析它在 x264 中的源码实现。</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 源码解析之帧内预测]]></title>
    <link href="http://lazybing.github.io/blog/2017/06/30/x264-intra-prediction/"/>
    <updated>2017-06-30T08:12:22-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/06/30/x264-intra-prediction</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#intra4x4-" id="markdown-toc-intra4x4-">Intra_4x4 预测模式</a>    <ul>
      <li><a href="#intra4x4vertical-" id="markdown-toc-intra4x4vertical-">Intra_4x4_Vertical 预测模式</a></li>
      <li><a href="#intra4x4horizontal-" id="markdown-toc-intra4x4horizontal-">Intra_4x4_Horizontal 预测模式</a></li>
      <li><a href="#intra4x4dc-" id="markdown-toc-intra4x4dc-">Intra_4x4_DC 预测模式</a></li>
      <li><a href="#intra4x4diagonaldownleft-" id="markdown-toc-intra4x4diagonaldownleft-">Intra_4x4_Diagonal_Down_Left 预测模式</a></li>
      <li><a href="#intra4x4diagonaldownright-" id="markdown-toc-intra4x4diagonaldownright-">Intra_4x4_Diagonal_Down_Right 预测模式</a></li>
      <li><a href="#intra4x4verticalright-" id="markdown-toc-intra4x4verticalright-">Intra_4x4_Vertical_Right 预测模式</a></li>
      <li><a href="#intra4x4horizontaldown-" id="markdown-toc-intra4x4horizontaldown-">Intra_4x4_Horizontal_Down 预测模式</a></li>
      <li><a href="#intra4x4verticalleft-" id="markdown-toc-intra4x4verticalleft-">Intra_4x4_Vertical_Left 预测模式</a></li>
      <li><a href="#intra4x4horizontalup-" id="markdown-toc-intra4x4horizontalup-">Intra_4x4_Horizontal_Up 预测模式</a></li>
    </ul>
  </li>
  <li><a href="#intra8x8-" id="markdown-toc-intra8x8-">Intra_8x8 预测模式</a>    <ul>
      <li><a href="#intra8x8vertical-" id="markdown-toc-intra8x8vertical-">Intra_8x8_Vertical 预测模式</a></li>
      <li><a href="#intra8x8horizontal-" id="markdown-toc-intra8x8horizontal-">Intra_8x8_Horizontal 预测模式</a></li>
      <li><a href="#intra8x8dc-" id="markdown-toc-intra8x8dc-">Intra_8x8_DC 预测模式</a></li>
      <li><a href="#intra8x8diagonaldownleft-" id="markdown-toc-intra8x8diagonaldownleft-">Intra_8x8_Diagonal_Down_Left 预测模式</a></li>
      <li><a href="#intra8x8diagonaldownright-" id="markdown-toc-intra8x8diagonaldownright-">Intra_8x8_Diagonal_Down_Right 预测模式</a></li>
      <li><a href="#intra8x8verticalright-" id="markdown-toc-intra8x8verticalright-">Intra_8x8_Vertical_Right 预测模式</a></li>
      <li><a href="#intra8x8horizontaldown-" id="markdown-toc-intra8x8horizontaldown-">Intra_8x8_Horizontal_Down 预测模式</a></li>
      <li><a href="#intra8x8verticalleft-" id="markdown-toc-intra8x8verticalleft-">Intra_8x8_Vertical_Left 预测模式</a></li>
      <li><a href="#intra8x8horizontalup-" id="markdown-toc-intra8x8horizontalup-">Intra_8x8_Horizontal_Up 预测模式</a></li>
    </ul>
  </li>
  <li><a href="#intra16x16-" id="markdown-toc-intra16x16-">Intra_16x16 预测模式</a>    <ul>
      <li><a href="#intra16x16vertical-" id="markdown-toc-intra16x16vertical-">Intra_16x16_Vertical 预测模式</a></li>
      <li><a href="#intra16x16horizontal-" id="markdown-toc-intra16x16horizontal-">Intra_16x16_Horizontal 预测模式</a></li>
      <li><a href="#intra16x16dc-" id="markdown-toc-intra16x16dc-">Intra_16x16_DC 预测模式</a></li>
      <li><a href="#intra16x16plane-" id="markdown-toc-intra16x16plane-">Intra_16x16_Plane 预测模式</a></li>
    </ul>
  </li>
</ul>

<p>本文主要记录 x264 中使用到的帧内预测技术。</p>

<!--more-->

<h2 id="intra4x4-">Intra_4x4 预测模式</h2>

<p>x264 中对 4x4 的预测模式如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Intra4x4PredMode[luma4x4BlkIdx]</th>
      <th style="text-align: center">Name of Intra4x4PredMode[luma4x4BlkIdx]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">Intra_4x4_Vertical(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">Intra_4x4_Horizontal(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">Intra_4x4_DC(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">Intra_4x4_Diagonal_Down_Left(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">Intra_4x4_Diagonal_Down_Right(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">Intra_4x4_Vertical_Right(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">Intra_4x4_Horizontal_Down(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">Intra_4x4_Vertical_Left(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">Intra_4x4_Horizontal_Up(prediction mode)</td>
    </tr>
  </tbody>
</table>

<p>下面依次分析这几种预测模式：</p>

<h3 id="intra4x4vertical-">Intra_4x4_Vertical 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 0.<br />This mode shall be used only when the samples p[ x, -1 ] with x = 0..3 are marked as "available for Intra_4x4 prediction".<br />The values of the prediction samples pred4x4L[ x, y ], with x, y = 0..3, are derived by  <br />$pred4x4_L[x,y]=p[x,-1], with x,y=0..3$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Vertical 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_4x4_v_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_4x4_DC</span><span class="p">(</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="cp">#define SRC(x,y) src[(x)+(y)*FDEC_STRIDE]</span>
</span><span class="line"><span class="cp">#define SRC_X4(x,y) MPIXEL_X4( &amp;SRC(x,y) )</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PREDICT_4x4_DC(v)\</span>
</span><span class="line"><span class="cp">    SRC_X4(0,0) = SRC_X4(0,1) = SRC_X4(0,2) = SRC_X4(0,3) = v;</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4horizontal-">Intra_4x4_Horizontal 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 1.  <br />This mode shall be used only when the samples p[ −1, y ], with y = 0..3, are marked as "available for Intra_4x4 prediction".<br />The values of the prediction samples pred4x4L[ x, y ], with x, y = 0..3, are derived by  <br />$pred4x4_L[x,y]=p[-1, y], with x,y=0..3$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Vertical 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_4x4_h_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4dc-">Intra_4x4_DC 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 2.<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:  </p><p>If all samples p[ x, −1 ], with x = 0..3, and p[ −1, y ], with y = 0..3, are marked as "available for Intra_4x4 prediction", the values of the prediction samples $pred4x4_L$[ x, y ], with x, y = 0..3, are derived by  <br />$pred4x4_L[x,y]$ = (p[0,-1]+p[1,-1]+p[2,-1]+p[3,-1]+p[-1,0]+p[-1,1]+p[-1,2]+p[-1,3]+4)&gt;&gt;3  </p><p>Otherwise, if any samples p[ x, .1 ], with x = 0..3, are marked as "not available for Intra_4x4 prediction" and all samples p[ .1, y ], with y = 0..3, are marked as "available for Intra_4x4 prediction", the values of the prediction samples $pred4x4_L$[ x, y ], with x, y = 0..3, are derived by  <br />$pred4x4_L[x,y] = (p[-1,0]+p[-1,1]+p[-1,2]+p[-1,3]+2)&gt;&gt;2$  </p><p>Otherwise, if any samples p[ .1, y ], with y = 0..3, are marked as "not available for Intra_4x4 prediction" and all samples p[ x, .1 ], with x = 0 .. 3, are marked as "available for Intra_4x4 prediction", the values of the prediction samples $pred4x4_L$[ x, y ], with x, y = 0 .. 3, are derived by    <br />$pred4x4_L[x,y] = (p[0,-1]+p[1,-1]+p[2,-1]+p[3,-1]+2)&gt;&gt;2$    </p><p>Otherwise (some samples p[ x, .1 ], with x = 0..3, and some samples p[ .1, y ], with y = 0..3, are marked as "not available for Intra_4x4 prediction"), the values of the prediction samples $pred4x4_L$[ x, y ], with x, y = 0..3, are derived by  <br />$pred4x4_L[x,y]=(1&lt;&lt;(BitDepth_Y-1))$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_DC 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_dc_128_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_4x4_DC</span><span class="p">(</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">BIT_DEPTH</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_dc_left_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_dc_top_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_4x4_dc_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span>
</span><span class="line">                                 <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4diagonaldownleft-">Intra_4x4_Diagonal_Down_Left 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 3.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..7 are marked as "available for Intra_4x4 prediction".<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:  </p><p>If x is equal to 3 and y is equal to 3,<br />$pred4x4_L[ x, y ] = ( p[ 6, .1 ] + 3 * p[ 7, .1 ] + 2 ) &gt;&gt; 2$</p><p>Otherwise (x is not equal to 3 or y is not equal to 3),<br />$pred4x4_L[ x, y ] = ( p[ x + y, −1 ] + 2 * p[ x + y + 1, −1 ] + p[ x + y + 2, −1 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_DC 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define PREDICT_4x4_LOAD_LEFT\</span>
</span><span class="line"><span class="cp">    int l0 = SRC(-1,0);\</span>
</span><span class="line"><span class="cp">    int l1 = SRC(-1,1);\</span>
</span><span class="line"><span class="cp">    int l2 = SRC(-1,2);\</span>
</span><span class="line"><span class="cp">    UNUSED int l3 = SRC(-1,3);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PREDICT_4x4_LOAD_TOP\</span>
</span><span class="line"><span class="cp">    int t0 = SRC(0,-1);\</span>
</span><span class="line"><span class="cp">    int t1 = SRC(1,-1);\</span>
</span><span class="line"><span class="cp">    int t2 = SRC(2,-1);\</span>
</span><span class="line"><span class="cp">    UNUSED int t3 = SRC(3,-1);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PREDICT_4x4_LOAD_TOP_RIGHT\</span>
</span><span class="line"><span class="cp">    int t4 = SRC(4,-1);\</span>
</span><span class="line"><span class="cp">    int t5 = SRC(5,-1);\</span>
</span><span class="line"><span class="cp">    int t6 = SRC(6,-1);\</span>
</span><span class="line"><span class="cp">    UNUSED int t7 = SRC(7,-1);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define F1(a,b)   (((a)+(b)+1)&gt;&gt;1)</span>
</span><span class="line"><span class="cp">#define F2(a,b,c) (((a)+2*(b)+(c)+2)&gt;&gt;2)</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_ddl_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP_RIGHT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4diagonaldownright-">Intra_4x4_Diagonal_Down_Right 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 4.<br />This mode shall be used only when the samples p[ x, .1 ] with x = 0..3 and p[ .1, y ] with y = .1..3 are marked as "available for Intra_4x4 prediction".<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:  <br />If x is greater than y,  <br />$pred4x4_L[ x, y ] = ( p[ x − y − 2, −1] + 2 * p[ x − y − 1, −1 ] + p[ x − y, −1 ] + 2 ) &gt;&gt; 2$<br />Otherwise if x is less than y,  <br />$pred4x4_L[ x, y ] = ( p[ −1, y − x − 2 ] + 2 * p[ −1, y − x − 1 ] + p[ −1, y − x ] + 2 ) &gt;&gt; 2$<br />Otherwise (x is equal to y),  <br />$pred4x4_L[ x, y ] = ( p[ 0, .1 ] + 2 * p[ .1, .1 ] + p[ .1, 0 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Diagonal_Down_Right 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_ddr_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">lt</span> <span class="o">=</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">lt</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4verticalright-">Intra_4x4_Vertical_Right 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 5.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..3 and p[ −1, y ] with y = −1..3 are marked as "available for Intra_4x4 prediction".<br />Let the variable zVR be set equal to 2 * x − y.<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:  </p><p>If zVR is equal to 0,2,4 or 6,  <br />$pred_L[x,y]=(p[x-(y&gt;&gt;1)-1,-1]+p[x-(y&gt;&gt;1),-1]+1)&gt;&gt;1$  <br />Otherwise, if zVR is equal to 1, 3, or 5,  <br />$pred4x4_L[x,y]=(p[x-(y&gt;&gt;1)-2,-1]+2*p[x-(y&gt;&gt;1)-1,-1]+p[x-(y&gt;&gt;1),-1]+2)&gt;&gt;2$<br />Otherwise, if zVR is equal to −1,  <br />$pred4x4_L[ x, y ] = (p[-1, 0 ] + 2 * p[ -1, -1 ] + p[ 0, -1 ] + 2 ) &gt;&gt; 2$<br />Otherwise (zVR is equal to -2 or -3),<br />$pred4x4_L[ x, y ] = ( p[ −1, y − 1 ] + 2 * p[ −1, y − 2 ] + p[ −1, y − 3 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Vertical_Right 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_vr_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">lt</span> <span class="o">=</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4horizontaldown-">Intra_4x4_Horizontal_Down 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 6.<br />This mode shall be used only when the samples p[ x, -1 ] with x = 0..3 and p[ -1, y ] with y = .1..3 are marked as "available for Intra_4x4 prediction".<br />Let the variable zHD be set equal to 2 * y - x.<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Horizontal_Down 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_hd_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">lt</span><span class="o">=</span> <span class="n">SRC</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">lt</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4verticalleft-">Intra_4x4_Vertical_Left 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 7.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..7 are marked as "available for Intra_4x4 prediction".<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Vertical_Left 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_vl_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_TOP_RIGHT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra4x4horizontalup-">Intra_4x4_Horizontal_Up 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_4x4 prediction mode is invoked when Intra4x4PredMode[ luma4x4BlkIdx ] is equal to 8.<br />This mode shall be used only when the samples p[ −1, y ] with y = 0..3 are marked as "available for Intra_4x4 prediction".<br />Let the variable zHU be set equal to x + 2 * y.<br />The values of the prediction samples $pred4x4_L[ x, y ]$, with x, y = 0..3, are derived as follows:</p></blockquote>

<p>x264 中关于模式 Intra_4x4_Horizontal_Up 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_4x4_hu_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_4x4_LOAD_LEFT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">l3</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="intra8x8-">Intra_8x8 预测模式</h2>

<p>x264 中对 8x8 的预测模式如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">intra8x8Predmodei[luma8x8BlkIdx]</th>
      <th style="text-align: center">Name of Intra8x8PredMode[luma8x8BlkIdx]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">Intra_8x8_Vertical(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">Intra_8x8_Horizontal(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">Intra_8x8_DC(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">Intra_8x8_Diagonal_Down_Left(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">Intra_8x8_Diagonal_Down_Right(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">Intra_8x8_Vertical_Right(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">Intra_8x8_Horizontal_Down(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">Intra_8x8_Vertical_Left(prediction mode)</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">Intra_8x8_Horizontal_Up(prediction mode)</td>
    </tr>
  </tbody>
</table>

<p>下面依次分析这几种预测模式：</p>

<h3 id="intra8x8vertical-">Intra_8x8_Vertical 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 0.<br />This mode shall be used only when the samples p[ x, -1 ] with x = 0..7 are marked as "available for Intra_8x8 prediction".<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived by   <br />$pred8x8_L[x,y]=p'[x,-1],with x,y=0..7$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Vertical 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_8x8_v_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">top</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">edge</span><span class="o">+</span><span class="mi">16</span> <span class="p">),</span>
</span><span class="line">                      <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">edge</span><span class="o">+</span><span class="mi">20</span> <span class="p">)</span> <span class="p">};</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span><span class="n">y</span><span class="o">*</span><span class="n">FDEC_STRIDE</span><span class="o">+</span><span class="mi">0</span> <span class="p">)</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span><span class="n">y</span><span class="o">*</span><span class="n">FDEC_STRIDE</span><span class="o">+</span><span class="mi">4</span> <span class="p">)</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8horizontal-">Intra_8x8_Horizontal 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 1.<br />This mode shall be used only when the samples p[ −1, y ], with y = 0..7, are marked as "available for Intra_8x8 prediction".<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived by  <br />$pred8x8_L[x,y]=p'[-1,y], with x,y=0..7$</p></blockquote>

<p>x264 中对 Intra_8x8_Horizontal 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define PL(y) \</span>
</span><span class="line"><span class="cp">    UNUSED int l##y = edge[14-y];</span>
</span><span class="line"><span class="cp">#define PT(x) \</span>
</span><span class="line"><span class="cp">    UNUSED int t##x = edge[16+x];</span>
</span><span class="line"><span class="cp">#define PREDICT_8x8_LOAD_TOPLEFT \</span>
</span><span class="line"><span class="cp">    int lt = edge[15];</span>
</span><span class="line"><span class="cp">#define PREDICT_8x8_LOAD_LEFT \</span>
</span><span class="line"><span class="cp">    PL(0) PL(1) PL(2) PL(3) PL(4) PL(5) PL(6) PL(7)</span>
</span><span class="line"><span class="cp">#define PREDICT_8x8_LOAD_TOP \</span>
</span><span class="line"><span class="cp">    PT(0) PT(1) PT(2) PT(3) PT(4) PT(5) PT(6) PT(7)</span>
</span><span class="line"><span class="cp">#define PREDICT_8x8_LOAD_TOPRIGHT \</span>
</span><span class="line"><span class="cp">    PT(8) PT(9) PT(10) PT(11) PT(12) PT(13) PT(14) PT(15)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PREDICT_8x8_DC(v) \</span>
</span><span class="line"><span class="cp">    for( int y = 0; y &lt; 8; y++ ) { \</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+0 ) = v; \</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+4 ) = v; \</span>
</span><span class="line"><span class="cp">        src += FDEC_STRIDE; \</span>
</span><span class="line"><span class="cp">    }</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_8x8_h_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line"><span class="cp">#define ROW(y) MPIXEL_X4( src+y*FDEC_STRIDE+0 ) =\</span>
</span><span class="line"><span class="cp">               MPIXEL_X4( src+y*FDEC_STRIDE+4 ) = PIXEL_SPLAT_X4( l##y );</span>
</span><span class="line">    <span class="n">ROW</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span> <span class="n">ROW</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</span><span class="line"><span class="cp">#undef ROW</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8dc-">Intra_8x8_DC 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 2.<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:</p></blockquote>

<p>x264 中对 Intra_8x8_DC 模式的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_dc_128_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_DC</span><span class="p">(</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">BIT_DEPTH</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_dc_left_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">l0</span><span class="o">+</span><span class="n">l1</span><span class="o">+</span><span class="n">l2</span><span class="o">+</span><span class="n">l3</span><span class="o">+</span><span class="n">l4</span><span class="o">+</span><span class="n">l5</span><span class="o">+</span><span class="n">l6</span><span class="o">+</span><span class="n">l7</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_8x8_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_dc_top_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">t0</span><span class="o">+</span><span class="n">t1</span><span class="o">+</span><span class="n">t2</span><span class="o">+</span><span class="n">t3</span><span class="o">+</span><span class="n">t4</span><span class="o">+</span><span class="n">t5</span><span class="o">+</span><span class="n">t6</span><span class="o">+</span><span class="n">t7</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_8x8_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_8x8_dc_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dc</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span><span class="n">l0</span><span class="o">+</span><span class="n">l1</span><span class="o">+</span><span class="n">l2</span><span class="o">+</span><span class="n">l3</span><span class="o">+</span><span class="n">l4</span><span class="o">+</span><span class="n">l5</span><span class="o">+</span><span class="n">l6</span><span class="o">+</span><span class="n">l7</span><span class="o">+</span><span class="n">t0</span><span class="o">+</span><span class="n">t1</span><span class="o">+</span><span class="n">t2</span><span class="o">+</span><span class="n">t3</span><span class="o">+</span><span class="n">t4</span><span class="o">+</span><span class="n">t5</span><span class="o">+</span><span class="n">t6</span><span class="o">+</span><span class="n">t7</span><span class="o">+</span><span class="mi">8</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span> <span class="p">);</span>
</span><span class="line">    <span class="n">PREDICT_8x8_DC</span><span class="p">(</span> <span class="n">dc</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8diagonaldownleft-">Intra_8x8_Diagonal_Down_Left 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 3.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..15 are marked as "available for Intra_8x8 prediction".<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If x is equal to 7 and y is equal to 7,  <br />$pred8xx_L[x,y]=( p′[ 14, −1 ] + 3 * p′[ 15, −1 ] + 2 ) &gt;&gt; 2$<br />Otherwise (x is not equal to 7 or y is not equal to 7)  <br />$pred8x8_L[ x, y ] = ( p′[ x + y, −1 ] + 2 * p′[ x + y + 1, −1 ] + p′[ x + y + 2, −1 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Diagonal_Down_Left 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_ddl_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOPRIGHT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">,</span><span class="n">t8</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t7</span><span class="p">,</span><span class="n">t8</span><span class="p">,</span><span class="n">t9</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t8</span><span class="p">,</span><span class="n">t9</span><span class="p">,</span><span class="n">t10</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t9</span><span class="p">,</span><span class="n">t10</span><span class="p">,</span><span class="n">t11</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t10</span><span class="p">,</span><span class="n">t11</span><span class="p">,</span><span class="n">t12</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t11</span><span class="p">,</span><span class="n">t12</span><span class="p">,</span><span class="n">t13</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t12</span><span class="p">,</span><span class="n">t13</span><span class="p">,</span><span class="n">t14</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t13</span><span class="p">,</span><span class="n">t14</span><span class="p">,</span><span class="n">t15</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t14</span><span class="p">,</span><span class="n">t15</span><span class="p">,</span><span class="n">t15</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8diagonaldownright-">Intra_8x8_Diagonal_Down_Right 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 4.<br />This mode shall be used only when the samples p[ x, .1 ] with x = 0..7 and p[ .1, y ] with y = .1..7 are marked as<br />"available for Intra_8x8 prediction".<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If x is greater than y,<br />$pred8x8_L[ x, y ] = ( p′[ x − y − 2, −1] + 2 * p′[ x − y − 1, −1 ] + p′[ x − y, −1 ] + 2 ) &gt;&gt; 2$<br />Otherwise if x is less than y,<br />$pred8x8_L[ x, y ] = ( p′[ .1, y . x . 2 ] + 2 * p′[ .1, y . x . 1 ] + p′[ .1, y . x ] + 2 ) &gt;&gt; 2$<br />Otherwise (x is equal to y),<br />$pred8x8_L[ x, y ] = ( p′[ 0, −1 ] + 2 * p′[ −1, −1 ] + p′[ −1, 0 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Diagonal_Down_Right 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_ddr_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOPLEFT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l7</span><span class="p">,</span><span class="n">l6</span><span class="p">,</span><span class="n">l5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l6</span><span class="p">,</span><span class="n">l5</span><span class="p">,</span><span class="n">l4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l4</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l3</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8verticalright-">Intra_8x8_Vertical_Right 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 5.<br />This mode shall be used only when the samples p[ x, -1 ] with x = 0..7 and p[ -1, y ] with y = -1..7 are marked as "available for Intra_8x8 prediction".<br />Let the variable zVR be set equal to 2 * x . y.<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If zVR is equal to 0, 2, 4, 6, 8, 10, 12, or 14  <br />$pred8x8_L[x,y] = (p'[x-y(y&gt;&gt;1)-1,-1] + p'[x-(y&gt;&gt;1),-1]+1)&gt;&gt;1$  <br />Otherwise, if zVR is equal to 1, 3, 5, 7, 9, 11, or 13  <br />$pred8x8_L[x,y]=(p'[x-(y&gt;&gt;1)-2,-1]+2*p'[x-(y&gt;&gt;1)-1,-1]+p'[x-(y&gt;&gt;1),-1]+2)&gt;&gt;2$  <br />Otherwise, if zVR is equal to −1,  <br />$pred8x8_L[ x, y ] = ( p′[ −1, 0 ] + 2 * p′[ −1, −1 ] + p′[ 0, −1 ] + 2 ) &gt;&gt; 2$  <br />Otherwise (zVR is equal to .2, .3, .4, .5, .6, or .7),  <br />$pred8x8_L[ x, y ] = ( p′[ -1, y . 2*x - 1 ] + 2 * p′[ -1, y - 2*x - 2 ] + p′[ -1, y - 2*x - 3 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Vertical_Right 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_vr_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOPLEFT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l4</span><span class="p">,</span><span class="n">l3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l6</span><span class="p">,</span><span class="n">l5</span><span class="p">,</span><span class="n">l4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l3</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8horizontaldown-">Intra_8x8_Horizontal_Down 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 6.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..7 and p[ −1, y ] with y = −1..7 are marked as "available for Intra_8x8 prediction".<br />Let the variable zHD be set equal to 2 * y − x.<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If zHD is equal to 0, 2, 4, 6, 8, 10, 12, or 14  <br />$pred8x8_L[ x, y ] = ( p′[ −1, y − ( x &gt;&gt; 1 ) − 1 ] + p′[ −1, y − ( x &gt;&gt; 1 ) ] + 1 ) &gt;&gt; 1$  <br />Otherwise, if zHD is equal to 1, 3, 5, 7, 9, 11, or 13  <br />$pred8x8_L[x,y]=(p′[-1, y -(x&gt;&gt;1)-2]+2*p′[-1,y-(x&gt;&gt;1)-1]+p′[-1,y-(x&gt;&gt;1)]+2)&gt;&gt;2$<br />Otherwise, if zHD is equal to −1,<br />$pred8x8L[ x, y ] = ( p′[ −1, 0 ] + 2 * p′[ −1, −1 ] + p′[ 0, −1 ] + 2 ) &gt;&gt; 2$<br />Otherwise (zHD is equal to −2, −3, −4, −5, −6, −7),<br />$pred8x8L[ x, y ] = ( p′[ x − 2*y − 1, −1 ] + 2 * p′[ x − 2*y − 2, −1 ] + p′[ x − 2*y − 3, −1 ] + 2 ) &gt;&gt; 2$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Horizontal_Down 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_hd_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOPLEFT</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l6</span><span class="p">,</span><span class="n">l7</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">,</span><span class="n">l7</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p4</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p5</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p6</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p7</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p8</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">lt</span><span class="p">,</span><span class="n">l0</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">lt</span><span class="p">,</span><span class="n">t0</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p9</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">lt</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p10</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t2</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p11</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t3</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t4</span><span class="p">));</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p2</span><span class="p">,</span><span class="n">p3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p3</span><span class="p">,</span><span class="n">p4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p4</span><span class="p">,</span><span class="n">p5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p5</span><span class="p">,</span><span class="n">p6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p6</span><span class="p">,</span><span class="n">p7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p7</span><span class="p">,</span><span class="n">p8</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p8</span><span class="p">,</span><span class="n">p9</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p9</span><span class="p">,</span><span class="n">p10</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p10</span><span class="p">,</span><span class="n">p11</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8verticalleft-">Intra_8x8_Vertical_Left 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 7.<br />This mode shall be used only when the samples p[ x, −1 ] with x = 0..15 are marked as "available for Intra_8x8 prediction".<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If y is equal to 0, 2, 4 or 6  <br />$pred8x8_L[ x, y ] = ( p′[ x + ( y &gt;&gt; 1 ), .1 ] + p′[ x + ( y &gt;&gt; 1 ) + 1, .1 ] + 1) &gt;&gt; 1$  <br />Otherwise (y is equal to 1, 3, 5, 7),  <br />$pred8x8_L[ x, y ] = ( p′[ x + ( y &gt;&gt; 1 ), −1 ] + 2 * p′[ x + ( y &gt;&gt; 1 ) + 1, −1 ] + p′[ x + ( y &gt;&gt; 1 ) + 2, −1 ] + 2 ) &gt;&gt;2$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Horizontal_Down 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_vl_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOP</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_TOPRIGHT</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t5</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span><span class="p">,</span><span class="n">t8</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t7</span><span class="p">,</span><span class="n">t8</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t7</span><span class="p">,</span><span class="n">t8</span><span class="p">,</span><span class="n">t9</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t8</span><span class="p">,</span><span class="n">t9</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t8</span><span class="p">,</span><span class="n">t9</span><span class="p">,</span><span class="n">t10</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t9</span><span class="p">,</span><span class="n">t10</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span><span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t9</span><span class="p">,</span><span class="n">t10</span><span class="p">,</span><span class="n">t11</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">F1</span><span class="p">(</span><span class="n">t10</span><span class="p">,</span><span class="n">t11</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span><span class="o">=</span> <span class="n">F2</span><span class="p">(</span><span class="n">t10</span><span class="p">,</span><span class="n">t11</span><span class="p">,</span><span class="n">t12</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra8x8horizontalup-">Intra_8x8_Horizontal_Up 预测模式</h3>

<p>在SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_8x8 prediction mode is invoked when Intra8x8PredMode[ luma8x8BlkIdx ] is equal to 8.<br />This mode shall be used only when the samples p[ -1, y ] with y = 0..7 are marked as "available for Intra_8x8 prediction".<br />Let the variable zHU be set equal to x + 2 * y.<br />The values of the prediction samples $pred8x8_L[ x, y ]$, with x, y = 0..7, are derived as follows:  <br />If zHU is equal to 0, 2, 4, 6, 8, 10, or 12  <br />$pred8x8_L[ x, y ] = ( p′[ −1, y + ( x &gt;&gt; 1 ) ] + p′[ −1, y + ( x &gt;&gt; 1 ) + 1 ] + 1 ) &gt;&gt; 1$<br />Otherwise, if zHU is equal to 1, 3, 5, 7, 9, or 11  <br />$pred8x8_L[ x, y ] = ( p′[ −1, y + ( x &gt;&gt; 1 ) ] + 2 * p′[ −1, y + ( x &gt;&gt; 1 ) + 1 ] + p′[ −1, y + ( x &gt;&gt; 1 ) + 2 ] + 2 ) &gt;&gt;2$<br />Otherwise, if zHU is equal to 13,  <br />$pred8x8_L[ x, y ] = ( p′[ −1, 6 ] + 3 * p′[ −1, 7 ] + 2 ) &gt;&gt; 2$  <br />Otherwise (zHU is greater than 13),  <br />$pred8x8_L[x,y]=p'[-1,7]$</p></blockquote>

<p>X264 中关于模式 Intra_8x8_Horizontal_Up 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">x264_predict_8x8_hu_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">pixel</span> <span class="n">edge</span><span class="p">[</span><span class="mi">36</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PREDICT_8x8_LOAD_LEFT</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l0</span><span class="p">,</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l2</span><span class="p">,</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p4</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l3</span><span class="p">,</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p5</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l4</span><span class="p">,</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p6</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l5</span><span class="p">,</span><span class="n">l6</span><span class="p">,</span><span class="n">l7</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p7</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">F1</span><span class="p">(</span><span class="n">l6</span><span class="p">,</span><span class="n">l7</span><span class="p">),</span> <span class="n">F2</span><span class="p">(</span><span class="n">l6</span><span class="p">,</span><span class="n">l7</span><span class="p">,</span><span class="n">l7</span><span class="p">));</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">p8</span> <span class="o">=</span> <span class="n">pack_pixel_1to2</span><span class="p">(</span><span class="n">l7</span><span class="p">,</span><span class="n">l7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p2</span><span class="p">,</span><span class="n">p3</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p3</span><span class="p">,</span><span class="n">p4</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p4</span><span class="p">,</span><span class="n">p5</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p5</span><span class="p">,</span><span class="n">p6</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p6</span><span class="p">,</span><span class="n">p7</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p7</span><span class="p">,</span><span class="n">p8</span><span class="p">);</span>
</span><span class="line">    <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">=</span><span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">=</span> <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span> <span class="o">=</span> <span class="n">SRC_X4</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span> <span class="o">=</span> <span class="n">pack_pixel_2to4</span><span class="p">(</span><span class="n">p8</span><span class="p">,</span><span class="n">p8</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="intra16x16-">Intra_16x16 预测模式</h2>

<p>x264 中对 16x16 的预测模式如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">intra16x16Predmode</th>
      <th style="text-align: center">Name of Intra16x16PredMode</th>
      <th style="text-align: center">Note</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">Intra_16x16_Vertical(prediction mode)</td>
      <td style="text-align: center">由上边像素推出相应像素值</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">Intra_16x16_Horicontal(prdiction mode)</td>
      <td style="text-align: center">由左边像素推出相应像素值</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">Intra_16x16_DC(prediction mode)</td>
      <td style="text-align: center">由上边和左边像素平均值推出相应像素值</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">Intra_16x16_Plane(prediction mode)</td>
      <td style="text-align: center">利用线性 plan 函数及左、上像素推出相应像素值，适用于亮度变化平缓区域</td>
    </tr>
  </tbody>
</table>

<p>下面依次分析这几种预测模式：</p>

<h3 id="intra16x16vertical-">Intra_16x16_Vertical 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_16x16 prediction mode shall be used only when the samples p[x, -1] with x=0...15 are marked as "available for Intra_16x16 prediction".The values of the prediction samples pred[x, y] with x,y=0...15, are derived by pred[x,y]=p[x,-1],with x,y=0...15</p></blockquote>

<p>x264 中关于模式 Vertical 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_16x16_v_c</span><span class="p">(</span><span class="n">pixel</span> <span class="o">*</span><span class="n">src</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">v0</span> <span class="o">=</span> <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">src</span><span class="p">[</span> <span class="mi">0</span><span class="o">-</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">src</span><span class="p">[</span> <span class="mi">4</span><span class="o">-</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">src</span><span class="p">[</span> <span class="mi">8</span><span class="o">-</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">v3</span> <span class="o">=</span> <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">src</span><span class="p">[</span><span class="mi">12</span><span class="o">-</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">0</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v0</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">4</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v1</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">8</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v2</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span><span class="mi">12</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v3</span><span class="p">;</span>
</span><span class="line">        <span class="n">src</span> <span class="o">+=</span> <span class="n">FDEC_STRIDE</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>注意，上面代码中的 pixel 为 uint8_t，而 pixel4 为 uint32_t，而 MPIXEL_X4 定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#define MPIXEL_X4(src) M32(src)  
</span><span class="line">#deinfe M32(src) (((x264_union32_t *)(src))-&gt;i)  
</span><span class="line">typedef union { uint32_t i; uint16_t b[2]; uint8_t  c[4]; } MAY_ALIAS x264_union32_t;</span></code></pre></td></tr></table></div></figure>

<h3 id="intra16x16horizontal-">Intra_16x16_Horizontal 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_16x16 prediction mode shall be used only when the samples p[−1, y] with y = 0..15 are marked as "available<br />for Intra_16x16 prediction".<br />The values of the prediction samples predL[ x, y ], with x, y = 0..15, are derived by<br />predL[ x, y ] = p[ −1, y ], with x, y = 0..15</p></blockquote>

<p>x264 中关于模式 Horizontal 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_16x16_h_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="n">pixel4</span> <span class="n">v</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="n">src</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">0</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">4</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span> <span class="mi">8</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class="line">        <span class="n">MPIXEL_X4</span><span class="p">(</span> <span class="n">src</span><span class="o">+</span><span class="mi">12</span> <span class="p">)</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class="line">        <span class="n">src</span> <span class="o">+=</span> <span class="n">FDEC_STRIDE</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中<code>PIXEL_SPLAT_X4</code>定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#   define PIXEL_SPLAT_X4(x) ((x)*0x01010101U)</span></code></pre></td></tr></table></div></figure>

<h3 id="intra16x16dc-">Intra_16x16_DC 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_16x16 prediction mode operates, depending on whether the neighbouring samples are marked as "available for<br />Intra_16x16 prediction", as follows:  </p><p>If all neighbouring samples p[x,-1] ], with x = 0..15, and p[ −1, y ], with y = 0..15, are marked as "available for<br />Intra_16x16 prediction", the prediction for all luma samples in the macroblock is given by:  <br />$pred_L[x,y]=(\sum_{x'=0}^{15}p[x',-1]+\sum_{y'=0}^{15}p[-1,y']+16)&gt;&gt;5, with x,y=0..15$  </p><p>Otherwise, if any of the neighbouring samples p[ x, .1 ], with x = 0..15, are marked as "not available for Intra_16x16<br />prediction" and all of the neighbouring samples p[ .1, y ], with y = 0..15, are marked as "available for Intra_16x16<br />prediction", the prediction for all luma samples in the macroblock is given by:  <br />$pred_L[x,y]=(\sum_{y'=0}^{15}p[-1,y']+8)&gt;&gt;4, with x,y=0..15$   </p><p>Otherwise, if any of the neighbouring samples p[ −1, y ], with y = 0..15, are marked as "not available for Intra_16x16<br />prediction" and all of the neighbouring samples p[ x, −1 ], with x = 0..15, are marked as "available for Intra_16x16<br />prediction", the prediction for all luma samples in the macroblock is given by:  <br />$pred_L[x,y]=(\sum_{x'=0}^{15}p[x',-1]+8)&gt;&gt;4, with x,y=0..15$   </p><p>Otherwise (some of the neighbouring samples p[ x, .1 ], with x = 0..15, and some of the neighbouring samples<br />p[ .1, y ], with y = 0..15, are marked as "not available for Intra_16x16 prediction"), the prediction for all luma samples<br />in the macroblock is given by:  <br />$pred_L[x,y]=(1&lt;&lt;(BitDepth_Y - 1)), with x,y=0..15$</p></blockquote>

<p>x264 中关于模式 DC 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define PREDICT_16x16_DC(v)\</span>
</span><span class="line"><span class="cp">    for( int i = 0; i &lt; 16; i++ )\</span>
</span><span class="line"><span class="cp">    {\</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+ 0 ) = v;\</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+ 4 ) = v;\</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+ 8 ) = v;\</span>
</span><span class="line"><span class="cp">        MPIXEL_X4( src+12 ) = v;\</span>
</span><span class="line"><span class="cp">        src += FDEC_STRIDE;\</span>
</span><span class="line"><span class="cp">    }</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_16x16_dc_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">dc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">dc</span> <span class="o">+=</span> <span class="n">src</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">FDEC_STRIDE</span><span class="p">];</span>
</span><span class="line">        <span class="n">dc</span> <span class="o">+=</span> <span class="n">src</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">FDEC_STRIDE</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">pixel4</span> <span class="n">dcsplat</span> <span class="o">=</span> <span class="n">PIXEL_SPLAT_X4</span><span class="p">(</span> <span class="p">(</span> <span class="n">dc</span> <span class="o">+</span> <span class="mi">16</span> <span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">PREDICT_16x16_DC</span><span class="p">(</span> <span class="n">dcsplat</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="intra16x16plane-">Intra_16x16_Plane 预测模式</h3>

<p>在 SPEC 中，关于该预测模式的定义如下：</p>

<blockquote><p>This Intra_16x16 prediction mode shall be used only when the samples p[ x, .1 ] with x = .1..15 and p[ .1, y ] with y = 0..15 are marked as "available for Intra_16x16 prediction".  <br />The values of the prediction samples $pred_L[x,y]$,with x,y=0...15, are derived by  <br />$pred_L[x,y]=Clip1_Y((a+b*(x-7)+c*(y-7)+16)&gt;&gt;5)$,with x,y=0...15, where   <br />$a = 16 * ( p[ .1, 15 ] + p[ 15, .1 ] )$   <br />$b = ( 5 * H + 32 ) &gt;&gt; 6$   <br />$c = ( 5 * V + 32 ) &gt;&gt; 6$     <br />and H and V are specified as   <br />$H=\sum_{x'=0}^{7}(x'+1)*(p[8+x',-1]-p[6-x',-1])$    <br />$V=\sum_{y'=0}^{7}(y'+1)*(p[-1,8+y']-p[-1,6-y'])$</p></blockquote>

<p>x264 中关于模式 Plane 的代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_predict_16x16_p_c</span><span class="p">(</span> <span class="n">pixel</span> <span class="o">*</span><span class="n">src</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">H</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">V</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* calculate H and V */</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">H</span> <span class="o">+=</span> <span class="p">(</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="n">src</span><span class="p">[</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">i</span> <span class="o">-</span> <span class="n">FDEC_STRIDE</span> <span class="p">]</span> <span class="o">-</span> <span class="n">src</span><span class="p">[</span><span class="mi">6</span> <span class="o">-</span><span class="n">i</span> <span class="o">-</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">        <span class="n">V</span> <span class="o">+=</span> <span class="p">(</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="n">src</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="mi">8</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="o">-</span> <span class="n">src</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="mi">6</span><span class="o">-</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">16</span> <span class="o">*</span> <span class="p">(</span> <span class="n">src</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">15</span><span class="o">*</span><span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="o">+</span> <span class="n">src</span><span class="p">[</span><span class="mi">15</span> <span class="o">-</span> <span class="n">FDEC_STRIDE</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="p">(</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">H</span> <span class="o">+</span> <span class="mi">32</span> <span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="p">(</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">V</span> <span class="o">+</span> <span class="mi">32</span> <span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">i00</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">-</span> <span class="n">c</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">+</span> <span class="mi">16</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">pix</span> <span class="o">=</span> <span class="n">i00</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span> <span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">src</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">x264_clip_pixel</span><span class="p">(</span> <span class="n">pix</span><span class="o">&gt;&gt;</span><span class="mi">5</span> <span class="p">);</span>
</span><span class="line">            <span class="n">pix</span> <span class="o">+=</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">src</span> <span class="o">+=</span> <span class="n">FDEC_STRIDE</span><span class="p">;</span>
</span><span class="line">        <span class="n">i00</span> <span class="o">+=</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="n">ALWAYS_INLINE</span> <span class="n">pixel</span> <span class="nf">x264_clip_pixel</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">PIXEL_MAX</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">31</span> <span class="o">&amp;</span> <span class="nl">PIXEL_MAX</span> <span class="p">:</span> <span class="n">x</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264源码解析之x264_encoder_open函数]]></title>
    <link href="http://lazybing.github.io/blog/2017/06/24/x264-encoder-open/"/>
    <updated>2017-06-24T18:24:01-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/06/24/x264-encoder-open</id>
    <content type="html"><![CDATA[
<p>本文主要记录<code>x264_encoder_open</code>函数。</p>

<!--more-->

<p><code>x264_encoder_open</code>函数是<code>encode</code>函数的几大主要函数之一。从名字可以看出，该函数主要是打开编码器，
它的主要作用是对编码器用到的一些参数进行初始化、并对编码器用到的一些与编码算法相关的函数进行初始化。
可以首先看一下它的声明：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/* x264_encoder_open:
</span><span class="line"> *      create a new encoder handler, all parameters from x264_param_t are copied */
</span><span class="line">x264_t *x264_encoder_open( x264_param_t * );</span></code></pre></td></tr></table></div></figure>
<p><code>x264_encoder_open</code>中会调用到一些宏定义的函数，比如<code>x264_reduce_fraction</code>，这里先把该函数的定义给出来：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/****************************************************************************</span>
</span><span class="line"><span class="cm"> * x264_reduce_fraction:</span>
</span><span class="line"><span class="cm"> ****************************************************************************/</span>
</span><span class="line"><span class="cp">#define REDUCE_FRACTION( name, type )\</span>
</span><span class="line"><span class="cp">void name( type *n, type *d )\</span>
</span><span class="line"><span class="cp">{                   \</span>
</span><span class="line"><span class="cp">    type a = *n;    \</span>
</span><span class="line"><span class="cp">    type b = *d;    \</span>
</span><span class="line"><span class="cp">    type c;         \</span>
</span><span class="line"><span class="cp">    if( !a || !b )  \</span>
</span><span class="line"><span class="cp">        return;     \</span>
</span><span class="line"><span class="cp">    c = a % b;      \</span>
</span><span class="line"><span class="cp">    while( c )      \</span>
</span><span class="line"><span class="cp">    {               \</span>
</span><span class="line"><span class="cp">        a = b;      \</span>
</span><span class="line"><span class="cp">        b = c;      \</span>
</span><span class="line"><span class="cp">        c = a % b;  \</span>
</span><span class="line"><span class="cp">    }               \</span>
</span><span class="line"><span class="cp">    *n /= b;        \</span>
</span><span class="line"><span class="cp">    *d /= b;        \</span>
</span><span class="line"><span class="cp">}</span>
</span><span class="line">
</span><span class="line"><span class="n">REDUCE_FRACTION</span><span class="p">(</span> <span class="n">x264_reduce_fraction</span>  <span class="p">,</span> <span class="kt">uint32_t</span> <span class="p">)</span>
</span><span class="line"><span class="n">REDUCE_FRACTION</span><span class="p">(</span> <span class="n">x264_reduce_fraction64</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>将上面的<code>x264_reduce_fraction</code>展开，代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">x264_reduce_fraction</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="o">*</span><span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="kt">uint32_t</span> <span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">n</span><span class="p">;</span>
</span><span class="line">	<span class="kt">uint32_t</span> <span class="n">b</span> <span class="o">=</span> <span class="o">*</span><span class="n">d</span><span class="p">;</span>
</span><span class="line">	<span class="kt">uint32_t</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line">	
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">a</span> <span class="o">||</span> <span class="o">!</span><span class="n">b</span><span class="p">)</span>
</span><span class="line">	    <span class="k">return</span><span class="p">;</span>
</span><span class="line">	<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">	<span class="k">while</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class="line">	<span class="p">{</span>
</span><span class="line">		<span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">		<span class="n">b</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line">		<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="o">*</span><span class="n">n</span> <span class="o">/=</span><span class="n">b</span><span class="p">;</span>
</span><span class="line">	<span class="o">*</span><span class="n">d</span> <span class="o">/=</span><span class="n">b</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>通过上面的展开可能一眼看不出所以然，其实这是一个非常简单的算法应用，求两个数 n 和 m 约分后再分别
赋值给相应的分子和分母，函数的前半部分就是经典的求最大公约数 b 的过程，可以参考<a href="http://blog.csdn.net/so_geili/article/details/50955291">细说算法–最大公约数</a>。</p>

<p>暂时先理解这段代码的含义，至于为什么要这么做，后面在分析。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 参数详解]]></title>
    <link href="http://lazybing.github.io/blog/2017/06/23/x264-paraments-illustra/"/>
    <updated>2017-06-23T20:07:55-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/06/23/x264-paraments-illustra</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">输入</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">预设值</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">帧类型</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">码率控制</a></li>
</ul>

<p>x264 中参数选项详解</p>

<!--more-->

<h2 id="section">输入</h2>
<p>用1个绝对路径定义输入文件（或者2个，rawYUV文件）。如下例：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x264.exe -o NUL C:\input.avs  
</span><span class="line">x264 -o /dev/null ~/input.y4m  </span></code></pre></td></tr></table></div></figure>

<p>如果输入文件是rawYUV格式的，还要把分辨率一并输入。如果开启了比特率控制，还需要输入帧率。如下例：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x264.exe -o NUL –fps 25 D:\input.yuv 1280×720  
</span><span class="line">x264 -o /dev/null –fps 30000/1001 ~/input.yuv 640×480  </span></code></pre></td></tr></table></div></figure>

<h2 id="section-1">预设值</h2>
<p>预设值是x264在r1177版本增加的一个方便的命令行选项。可以用x264.exe –fullhelp查看所有的命令行帮助。</p>

<ul>
  <li>
    <p>profile<br />
默认：无<br />
说明：限制输出文件的profile。这个参数将覆盖其它所有值，此选项能保证输出profile兼容的视频流。如果使用了这个选项，将不能进行无损压缩（qp 0 or crf 0）。<br />
可选：baseline，main，high<br />
建议：不设置。除非解码环境只支持main或者baseline profile的解码。</p>
  </li>
  <li>
    <p>preset<br />
默认：medium<br />
一些在压缩效率和运算时间中平衡的预设值。如果指定了一个预设值，它会在其它选项生效前生效。<br />
可选：ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow and placebo.<br />
建议：可接受的最慢的值</p>
  </li>
  <li>
    <p>tune<br />
默认：无<br />
说明：在上一个选项基础上进一步优化输入。如果定义了一个tune值，它将在preset之后，其它选项之前生效。<br />
可选：film, animation, grain, stillimage, psnr, ssim, fastdecode, zerolatency and touhou.<br />
建议：根据输入选择。如果没有合适的就不要指定。</p>
  </li>
  <li>
    <p>slow-firstpass<br />
默认：无<br />
说明：随着预设值机制在r1177版本的出现，使用–pass 1会在解析命令行时增加以下设置：<code>ref 1</code>
<code>no-8x8dct</code><code>partitions i4x4 (if originally enabled, else none)</code><code>me dia</code><code>subme MIN( 2, subme )</code><code>trellis 0</code><br />
如果设置preset=placebo则自动关闭此特性。如果想显式关闭此特性，使用slow-firstpass。</p>
  </li>
</ul>

<h2 id="section-2">帧类型</h2>

<ul>
  <li>
    <p>keyint<br />
默认：250<br />
说明：设置x264输出中最大的IDR帧（亦称关键帧）间距。<br />
IDR帧是视频流的“分隔符”，所有帧都不可以使用越过关键帧的帧作为参考帧。IDR帧是I帧的一种，所以它们也不参照其它帧。这意味着它们可以作为视频的搜索（seek）点。<br />
通过这个设置可以设置IDR帧的最大间隔帧数（亦称最大图像组长度）。较大的值将导致IDR帧减少（会用占用空间更少的P帧和B帧取代），也就同时减弱了参照帧选择的限制。较小的值导致减少搜索一个随机帧所需的平均时间。<br />
建议：默认值（fps的10倍）对大多数视频都很好。如果在为蓝光、广播、直播流或者其它什么专业流编码，也许会需要更小的图像组长度（一般等于fps）。<br />
参见：min-keyint, scenecut, intra-refresh</p>
  </li>
  <li>
    <p>min-keyint<br />
默认：auto（keyint/10）<br />
说明：参见keyint的说明。过小的keyint范围会导致产生“错误的”IDR帧（比如说，一个闪屏场景，参见上一篇blog）。此选项限制了IDR帧之间的最小距离。<br />
建议：默认，或者与fps相等<br />
参见：keyint, scenecut</p>
  </li>
  <li>
    <p>no-scenecut<br />
默认：无<br />
说明：完全关闭自适应I帧决策。<br />
参见：scenecut</p>
  </li>
  <li>
    <p>scenecut<br />
默认：40<br />
说明：设置决策使用I帧、IDR帧的阈值（场景变换检测）。<br />
x264会计算每一帧与前一帧的不同程度并得出一个值。如果这个值低于scenecut，那么就算检测到一个“场景变换”。如果此时距离上一帧的距离小于 min-keyint则插入一个I帧，反之则插入一个IDR帧。较高的值会增加侦测到“场景变换”纪律。参见更详细的<a href="http://forum.doom9.org/showthread.PHP?t=121116">工作原理</a><br />
设置scenecut=0与no-scenecut等效。<br />
建议：使用默认值<br />
参见：keyint, min-keyint, no-scenecut</p>
  </li>
  <li>
    <p>intra-refresh<br />
默认：off<br />
说明：让x264为每keyint数量的帧使用宏块内部编码取代IDR帧。块以水平移动列的方式更新，也叫刷新波。对于低延迟的流，这样可以让帧的尺寸比使用标准的IDR帧更加保持恒定。而且这样可以增强视频流对丢包的容错能力。这个选项会降低压缩率，所以在确实需要的时候才选择它。<br />
还有一些有意思的事情：1、第一帧依然是IDR帧。2、内部宏块只在P帧中存在，刷新波在一个或多个B帧后的P帧中广泛存在。3、主要的压缩率下降原因是在宏块中新（左边）的波并不能参考旧（右边）的波。<br />
建议：使用默认值</p>
  </li>
  <li>
    <p>bframes
默认：3<br />
说明：设置x264可使用的B帧的最大连续数量。<br />
没有B帧时，一个典型的x264流帧类型是这样的：IPPPPP…PI。如果设置了-bframes 2，那么两个连续的P帧就可以用B帧替换，然后就像这样：IBPBBPBPPPB…PI。<br />
B帧和P帧的区别在于它可以参照它之后的帧，这个特点让它可以显著地提升压缩率。他们的平均品质受 –pbratio选项的控制。<br />
还有一些有意思的事情：<br />
1、x264有2种B帧，一种可以作为参照帧，一种不能；<br />
2、关于x264如何决策B帧或P帧，可以看看这个ffmpeg-devel<a href="http://article.gmane.org /gmane.comp.video.ffmpeg.devel/29064">邮件列表</a>。这种情况下帧类型看起来就像这样IBBBPBBBPBPI（假设设置 –bframes 3）。<br />
参见：–no-b-adapt, –b-bias, –b-pyramid, –ref, –pbratio, –partitions, –weightb</p>
  </li>
  <li>
    <p>b-adapt
默认：1<br />
说明：设置B帧决策算法，这个选项会影响到x264使用P帧或者B帧。<br />
0 —— 关闭。总是使用B帧。和以前的 no-b-adapt选项效果相同；<br />
1 —— ‘快速’算法。快速，–b-frames越大速度越快。推荐配合使用–bframes 16；<br />
2 —— ‘最佳’算法，慢速，–b-frames越大速度越慢；<br />
注意：多趟编码时，只有第一趟编码的此选项起效，因为第一趟编码结束时，帧类型就已经被决定了。</p>
  </li>
  <li>
    <p>b-bias<br />
默认：0<br />
说明：调节使用B帧的力度。越大的值越偏向B帧，可以在-100和100之间选择。100或-100不能保证完全或是全是B帧（使用 –b-adapt 0）。请只在你认为你能做出比x264更好的码率控制时才使用这个选项。<br />
参见： –b-frames, –ipratio</p>
  </li>
  <li>
    <p>b-pyramid
默认：normal<br />
说明：允许B帧作为参照帧。如果关闭，那么只有I帧和P帧才能作为参照帧。可以作为参照帧的B帧的量化参数会介于P帧和普通B帧之间。只在–b-frames设置大于等于2时此选项才生效。如果是在为蓝光光盘编码，请使用none或者strict。<br />
none —— 不允许B帧作为参照帧；<br />
strict —— 一个图像组内只允许一个B帧参照帧，这是蓝光编码强制要求的标准；<br />
normal —— 任意使用B帧参照帧；<br />
参见：–bframes, –refs, –no-mixed-refs</p>
  </li>
  <li>
    <p>open-gop
默认：none<br />
说明：Open-GOP是一个提升压缩效率的编码技术。它有以下选项：<br />
none —— 关闭<br />
normal —— 开启<br />
bluray —— 开启。一个稍低效的open-GOP版本，因为normal模式不能用于蓝光编码<br />
有些解码器不能完全支持open-GOP流，因此这个选项默认关闭。如果要用，请测试你的解码器。
更多open-gop的资料参见该<a href="http://forum.doom9.org/showthread.php?p=1300124#post1300124">链接</a></p>
  </li>
  <li>
    <p>no-cabac<br />
默认：无<br />
说明：关闭CABAC (Context Adaptive Binary Arithmetic Coder)压缩，使用较为低效的CAVLC (Context Adaptive Variable Length Coder)。这两者在压缩效率和解码效率上有10%-20%的差别。</p>
  </li>
  <li>
    <p>ref<br />
默认：3<br />
说明：控制DPB (Decoded Picture Buffer)的大小。可以在0-16之间选择。简单地说，就是设置P帧可以选择它之前的多少帧作为参照帧（B帧的值要小1-2，取决于那个B帧能不能作为参照）。最小可以选择值1，只参照自己前面的那帧。注意H.264标准限制了每个level可以参照的帧的数量。如果选择level4.1，1080p最大选4，720p最大选9。<br />
参照： –b-pyramid, –no-mixed-refs, –level</p>
  </li>
  <li>
    <p>no-deblock<br />
默认：无<br />
说明：完全关闭内置去块滤镜。不推荐使用。<br />
参见： –deblock</p>
  </li>
  <li>
    <p>deblock<br />
默认：0:0<br />
说明：调节H.264标准中的内置去块滤镜。这是个性价比很高的选则。详解参见<a href="http://forum.doom9.org/showthread.php?t=109747">参数运作原理</a>。
参见: –no-deblock</p>
  </li>
  <li>
    <p>slices  　　
默认：0  　　
说明：设置每帧的分片数，强制使用矩形分片。（会被–slice-max-size 或 –slice-max-mbs选项覆盖)如果是在为蓝光光盘编码，设置为4。如果不是，不要使用这个选项，除非你确定你需要它。  　　
参见：–slice-max-size, –slice-max-mbs  　　　　</p>
  </li>
  <li>
    <p>slice-max-size  　　
默认：0  　　
说明：设置每个分块包括NAL头的最大大小（bytes）。 (目前与 –interlaced选项不兼容)  　　
参见：–slices  　　</p>
  </li>
  <li>slice-max-mbs  　　
默认：0  　　
说明：设置每个分块包含的最大宏块数量。 (目前与 –interlaced选项不兼容)  　　
参见：–slices 
 　　</li>
  <li>
    <p>tff<br />
说明：开启隔行编码并设置上半场在前。x264的隔行编码使用MBAFF，因此效率不如逐行扫描。所以，仅在需要在隔行显示的设备上显示时才开启这个选项（或是送给x264之前无法进行反隔行扫描）。这个选项会触发 –pic-struct开启。</p>
  </li>
  <li>
    <p>bff<br />
说明：开启隔行编码并设置下半场在前。更多信息同–tff。</p>
  </li>
  <li>
    <p>constrained-intra<br />
默认：无<br />
说明：开启SVC编码的底层要求的强制帧内预测。选择每个人都无视SVC了，你也可以忽略这个设置。</p>
  </li>
  <li>
    <p>pulldown<br />
默认：none<br />
说明：为你的输入流（逐行扫描的，固定帧率的）使用一组预设的“软性电视模式”。“软性电视模式”在HandBrake Wiki里面有很好的解释。<br />
可选的参数有：none、22、32、64、double、triple、euro。除了none之外的选项都会触发 –pic-struct开启。</p>
  </li>
  <li>fake-interlaced<br />
默认：无<br />
说明：把流标志为隔行的但不按隔行编码。用于编码25p和30p的蓝光兼容视频。</li>
</ul>

<h2 id="section-3">码率控制</h2>

<ul>
  <li>
    <p>qp<br />
默认：无<br />
说明：三种可选的码率控制方法之一。设置x264使用固定量化参数模式。给定的数量将被作为P帧的量化参数，I帧和B帧的量化参数由–ipratio and –pbratio参数进一步算出。QP模式适用固定的量化参数，这意味着最终的文件大小是不可知的（可以通过一些其他方法预测）。设置为0将产出无损的输出。相同视觉质量时，QP模式产出的文件比crf模式大。QP模式将关闭自适应量化器，因为它是固定QP的。
这个选项和 –bitrate和–crf是互斥的，三者只能选一个，参见<a href="http://blog.yikuyiku.com/index.php/archives/1901">原理</a>。一般而言crf都能代替QP模式，不过QP因为完全不需要预测所以它会运行地更快些。<br />
参见：–bitrate, –crf, –ipratio, –pbratio</p>
  </li>
  <li>
    <p>bitrate<br />
默认：无<br />
说明：三种可选的码率控制方法之二。设置x264使用固定目标比特率模式。固定目标比特率意味着最终文件的大小是可知的，但是目标的质量是不可知的。 x264会试图让最终文件的整体码率与给定的码率相等。参数的量纲为kilobits/sec（8bit = 1byte）。通常这个选项和–pass选项配合进行2趟编码。
这个选项和 –qp和–crf是互斥的，三者只能选一个，参见<a href="http://blog.yikuyiku.com/index.php/archives/1901">原理</a>。<br />
参见：–qp, –crf, –ratetol, –pass, –stats</p>
  </li>
  <li>
    <p>crf
默认：23.0<br />
说明：三种可选的码率控制方法之二。固定ratefactor。QP是固定量化器，bitrate是固定文件大小，crf则是固定“质量”。crf可以提供跟QP一样的视觉的质量，但是文件更小。crf的单位是ratefactor。
crf是通过降低那些“不那么重要”的帧的质量做到这一切的。“不那么重要”意思是过于耗费码率又难以用肉眼察觉的帧，比如复杂或者超高速运行的场景。省下来的码率会用在其它更有效的帧里。
crf编码比2趟编码快，因为它相当于省略了第1趟编码。所以crf的最终码率也是不可预测的。你应该根据应用场景来选择码率控制方式。这个选项和 –qp和–crf是互斥的，三者只能选一个，参见<a href="http://blog.yikuyiku.com/index.php/archives/1901">原理</a>。<br />
参见：–qp, –bitrate</p>
  </li>
  <li>
    <p>rc-lookahead<br />
默认：40<br />
说明：为mb-tree ratecontrol（Macroblock Tree Ratecontrol）和vbv-lookahead设置可用的帧的数量。最大可设置为250。对于mb-tree而言，调大这个值会得到更准确地结果，但也会更慢。mb-tree能使用的最大值是–rc-lookahead和–keyint中较小的那一个。对于vbv-lookahead而言，调大这个值会得更稳定和精确的码率控制。vbv-lookahead能使用的最大值是如下公式算出来的：<code>MIN(rc-lookahead, MAX(–keyint, MAX(–vbv-maxrate, –bitrate) / –vbv-bufsize * –fps))</code><br />
参见：–no-mbtree, –vbv-bufsize, –vbv-maxrate</p>
  </li>
  <li>
    <p>vbv-maxrate<br />
默认：0<br />
说明：设置VBV（Video Buffering Verifier）可用的最大码率。使用VBV会降低视频质量，只在真正需要的才设定它。<br />
参见：–vbv-bufsize, –vbv-init，<a href="http://mewiki.project357.com/wiki/X264_Encoding_Suggestions#VBV_Encoding">详解</a></p>
  </li>
  <li>
    <p>vbv-bufsize<br />
默认：0<br />
说明：设置VBV（Video Buffering Verifier）可用的最大缓冲区，单位是kilobits。使用VBV会降低视频质量，只在真正需要的才设定它。<br />
参见：–vbv-maxsize, –vbv-init，<a href="http://mewiki.project357.com/wiki/X264_Encoding_Suggestions#VBV_Encoding">详解</a></p>
  </li>
  <li>
    <p>vbv-init<br />
默认：0.9<br />
说明：设置重放之前必须先载入多大的VBV缓冲。如果值小于1，那么大小就为 vbv-init * vbv-bufsize。如果大于1，则是以kbits为单位的值。<br />
参见：–vbv-maxsize, –vbv-bufsize</p>
  </li>
  <li>
    <p>crf-max<br />
默认：无<br />
说明：类似 –qp-max，但是设置的是最大的ratefactor值而不是量化参数。这个选项仅用于crf和vbv同时启用的时候。它阻止x264使用小于给定值的ratefactor（也就是“质量”），哪怕会违反vbv。一般用于流服务器。<a href="http://Git.videolan.org /gitweb.cgi/x264.git/?a=commit; h=81eee062a4ce9aae1eceb3befcae855c25e5ec52">更多的信息</a>。<br />
参见：–crf, –vbv-maxrate, –vbv-bufsize</p>
  </li>
  <li>
    <p>qpmin<br />
默认：10<br />
说明：设置x264可以使用的最小量化器。量化参数越小，输出越接近输入。使用某些值时，x264的输出可以和输入看起来完全一样，虽然其实并不是精确相同的，通常就够了没有必要使用更多比特在宏块上了。
如果开启了自适应量化器（默认开启），则不鼓励提高qpmin的值，那样可能会降低帧的平坦部分的质量。<br />
参见：–qpmax, –ipratio</p>
  </li>
  <li>
    <p>qpmax<br />
默认：51<br />
说明：qpmin的反面，设置x264可以使用的最大量化器。默认值51是H.264标准中的最大值，质量非常低。默认值51其实相当于没有设置 qpmax。如果你想控制x264输出的最低品质，也许你想要把这个值调低一点（调到30-40最低了），但一般而言不推荐调节这个值。<br />
参见：–qpmin, –pbratio, –crf-max</p>
  </li>
  <li>
    <p>qpstep<br />
默认：4<br />
说明：设置2帧间量化器最大的可变值。</p>
  </li>
  <li>
    <p>ratetol<br />
默认：1.0<br />
说明：这个参数有2个可能的含义：<br />
1、在1趟bitrate编码时，这个参数控制x264可以偏离给定的平均目标比特率的百分比。可以设置为inf完全关闭码率溢出侦测。最低可以设置为 0.01。较高的值可以让x264更好地处理影片结束部分的复杂场景。对于这个目的而言单位是百分比（1.0意味着允许1%的bitrate偏差）。很多影片（比如说动作打斗片）在最后的片段里十分复杂。1趟编码并不知道哪里是最复杂的片断，往往到最后比特都已经用完了。把rateol设置为inf就能解决这个问题，它允许编码器用类似 –crf的方式工作，当然，文件大小会溢出。<br />
2、当开启了vbv时（只要使用了任何–vbv-开头的选项就会开启），这个选项意味着vbv的强度。更高的值意味着允许更高的在设定的vbv值上下波动。在这个含义时，可以使用任意的度量单位。</p>
  </li>
  <li>
    <p>ipratio<br />
默认：1.40<br />
说明：设置平均的I帧的量化器相比P帧量化器增值。更高的值意味着更高的I帧质量。<br />
参见：–pbratio</p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SODB RBSP EBSP 的区别与联系]]></title>
    <link href="http://lazybing.github.io/blog/2017/06/22/sodb-rbsp-ebsp/"/>
    <updated>2017-06-22T08:48:25-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/06/22/sodb-rbsp-ebsp</id>
    <content type="html"><![CDATA[
<p>简单总结 SODB、RBSP、EBSP、NALU 和 H.264 字节流的联系。</p>

<!--more-->

<ul>
  <li>SODB：String of Data Bits，数据比特串，它是最原始的编码数据。</li>
  <li>RBSP：Raw Byte Sequence Payload, 原始字节序列载荷，它是在 SODB 的后面添加了结尾比特和若干比特<code>0</code>，以便字节对齐。</li>
  <li>EBSP：Encapsulate Byte Sequence Payload，扩展字节序列载荷，它是在 RBSP 基础上添加了防校验字节<code>0x03</code>后得到的。</li>
</ul>

<p>关系大致如下：</p>

<p><code>SODB</code>+<code>RBSP Stop bit</code>+<code>0 bits</code>= <code>RBSP</code></p>

<p><code>RBSP part1</code>+<code>0x03</code>+<code>RBSP part2</code>+<code>0x03</code>+…+<code>RBSP partn</code> = <code>EBSP</code></p>

<p><code>NALU Header</code>+<code>EBSP</code>=<code>NALU</code></p>

<p><code>start code</code>+<code>NALU</code>+…+<code>start code</code>+<code>NALU</code>=<code>H.264 Byte Stream</code></p>

<p>在 H264 SPEC 中，SODB 定义如下：</p>

<blockquote>
  <p>3.149 string of data bits(SODB) : A sequence of some number of bits representing syntax elements present within a raw byte sequence payload prior to the raw byte sequnece payload stop bit.Within an SODB,the left-most bit is considered to be the first and most significant bit,and the right-most bit is considered to be the last and least significant bit。</p>
</blockquote>

<p>要组成一个 NALU 单元，首先要有原始数据，称之为 SODB 数据。它是原始的 H264 数据编码得到的，不包含 3 字节/4 字节的起始码，即不包含<code>0x000001</code>/<code>0x00000001</code>,同样的也不包括 1 字节的 NALU 头，NALU 头部信息包含了一些基础信息，比如 NALU 类型。</p>

<blockquote>
  <p>注意：起始码包括两种：3 字节(0x000001) 和 4 字节(0x00000001)，在 SPS、PPS 和 Access Unit 的第一个 NALU 使用 4 字节起始码，其余情况均使用 3 字节起始码。</p>
</blockquote>

<p>在 H264 SPEC 中，RBSP 定义如下：</p>

<blockquote>
  <p>3.118 raw byte sequence payload(RBSP): A syntax structure containing an integer number of bytes that is encapsulated in a NAL unit.An RBSP is either empty or has the form of a string of data bits containing syntax elements followed by an RBSp stop bit and followed by zero or more subsequent bits equal to 0.
3.119 raw byte sequence payload(RBSP) stop bit: A bit equal to 1 present within a raw byte sequence payload(RBSP) after a string of data bits.The location of the end of the string of data bits within an RBSP can be identified by searching from the end of the RBSP for the RBSP stop bit, which is the last non-zero bit in the RBSP.</p>
</blockquote>

<p>在 SODB 结束处添加表示结束的 bit 1 来表示 SODB 已经结束，因此添加的 bit 1 称为<code>rbsp_stop_one_bit</code>, <code>RBSP</code>也需要字节对齐，为此需要在<code>rbsp_stop_one_bit</code>后添加若干 0 补齐。<br />
简单说，要在 SODB 后面追加两样东西形成 RBSP ：</p>

<ol>
  <li>rbsp_stop_one_bit = 1</li>
  <li>rbsp_alignment_zero_bit(s) = 0(s)</li>
</ol>

<p>RBSP 的生成过程：首先，如果 SODB 的内容是空的，则 RBSP 的内容也是空的；其次，如果 SODB 的内容非空，RBSP 的第一个字节取自 SODB 的第 1 到第 8 个比特，RBSP 字节内部按照从左到右从高到低的顺序排列。
以此类推，RBSP 中的每个字节都直接取自 SODB 的相应比特。RBSP的最后一个字节包含 SODB 的最后几个比特，以及 trailing bits。其中，trailing bits 的第一个比特为 1，其余的比特为 0,保证字节对齐。最后，
在结尾添加 0x0000,即 CABAC_ZERO_WORD，从而形成 RBSP。</p>

<p><img src="http://lazybing.github.io/images/sodb_rbsp/sodb_rbsp.PNG" /></p>

<p>EBSP 的生成过程：NALU 数据 + 起始码就形成了Annex B 格式，起始码包括两种，0x00000001 或 0x000001。为了不让NALU的主体与起始码之间产生竞争，在对 RBSP 进行扫描时，如果遇到连续的两个<code>0x00</code>字节，则在该两个字节后面添加一个<code>0x03</code>字节。在解码的时候将该<code>0x03</code>字节去掉，也成为脱壳操作。
通过该种方式形成 EBSP，这需要将近两倍的整帧图像码流大小。为了减少存储器需求，在每个 macroblock 结束后，即检查该 macroblock 的 SODB 的起始码竞争问题，并保留 SODB 的最后两个字节的零字节个数，以便与下一个 macroblock 的 SODB 的开始字节形成连续的起始码竞争检测。对一帧图像的最后一个 macroblock，先添加结尾停止 bit，在检查起始码竞争。</p>

<p>替换规则如下：</p>

<ul>
  <li>0x000000 =&gt; 0x00000300</li>
  <li>0x000001 =&gt; 0x00000301</li>
  <li>0x000002 =&gt; 0x00000302</li>
  <li>0x000003 =&gt; 0x00000303</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 实现yuv转264文件]]></title>
    <link href="http://lazybing.github.io/blog/2017/06/16/x264-to-convert-yuv-to-264/"/>
    <updated>2017-06-16T07:47:47-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/06/16/x264-to-convert-yuv-to-264</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#x264" id="markdown-toc-x264">X264编码样例解析</a></li>
  <li><a href="#x264yuv" id="markdown-toc-x264yuv">x264编码YUV文件示例</a></li>
</ul>

<p>本文根据 x264 中提供的<code>example.c</code>文件，实现了将 YUV 文件编码为 264 文件，从整体上了解 x264 编码的大体过程。</p>

<!--more-->

<p>x264 实现编码器功能与 FFmpeg 实现编码器大致是类似的，因为 FFmpeg 本身实现 264 格式的编码，就是 x264 的库实现的。</p>

<p>首先分析 x264 给定的编码样例，之后根据样例实现自己的编码器功能。</p>

<h2 id="x264">X264编码样例解析</h2>

<p>在 X264 中有<code>example.c</code>文件，它是 X264 库给定的一个将 YUV 编码为 h264 格式的视频文件的样例。分析其中的源码大致如下：</p>

<ol>
  <li>检测输入的参数格式是否正确。</li>
  <li>获取编码过程中需要用到的参数，并对特定的参数进行赋值。</li>
  <li>根据给定的视频的宽高等信息为图像结构体 <code>x264_picture_t</code> 分配内存。</li>
  <li>打开编码器</li>
  <li>从给定的的待编码的 YUV 文件中读取数据，放到上面分配的 <code>x264_picture_t</code> 结构体的特定字段内。</li>
  <li>编码一帧图像。</li>
  <li>将编码生成的 h264 格式的视频数据写到输出文件中。</li>
  <li>循环5、6、7，实现多帧数据的编码。</li>
  <li>将编码器内缓存的数据编码完成，并写到输出文件中。</li>
  <li>清理工作，包括关掉编码器、释放的分配的 <code>x264_picture_t</code> 结构体。</li>
</ol>

<p>第一步中，检测输入参数格式是否正确，X264 中给出的具体实现如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">FAIL_IF_ERROR</span><span class="p">(</span> <span class="o">!</span><span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">),</span> <span class="s">&quot;Example usage: example 352x288 &lt;input.yuv &gt;output.h264</span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="n">FAIL_IF_ERROR</span><span class="p">(</span> <span class="mi">2</span> <span class="o">!=</span> <span class="n">sscanf</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;%dx%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">width</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">height</span> <span class="p">),</span> <span class="s">&quot;resolution not specified or incorrect</span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
<p>其中<code>FAIL_IF_ERROR</code>定义如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#define FAIL_IF_ERROR( cond, ... )\
</span><span class="line">do\
</span><span class="line">{\
</span><span class="line">    if( cond )\
</span><span class="line">    {\
</span><span class="line">        fprintf( stderr, __VA_ARGS__ );\
</span><span class="line">        goto fail;\
</span><span class="line">    }\
</span><span class="line">} while( 0 )</span></code></pre></td></tr></table></div></figure>

<p>第二步中，获取编码过程中需要用到的参数，并对特定的参数进行赋值。样例的实现中主要包括了三部分,代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="c1">//Get default params for preset/tuning</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span> <span class="n">x264_param_default_preset</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">param</span><span class="p">,</span> <span class="s">&quot;medium&quot;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class="line">    <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* Configure non-default params */</span>
</span><span class="line"><span class="n">param</span><span class="p">.</span><span class="n">i_csp</span> <span class="o">=</span> <span class="n">X264_CSP_I420</span><span class="p">;</span>
</span><span class="line"><span class="n">param</span><span class="p">.</span><span class="n">i_width</span>  <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
</span><span class="line"><span class="n">param</span><span class="p">.</span><span class="n">i_height</span> <span class="o">=</span> <span class="n">height</span><span class="p">;</span>
</span><span class="line"><span class="n">param</span><span class="p">.</span><span class="n">b_vfr_input</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="n">param</span><span class="p">.</span><span class="n">b_repeat_headers</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="n">param</span><span class="p">.</span><span class="n">b_annexb</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* Apply profile restrictions. */</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span> <span class="n">x264_param_apply_profile</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">param</span><span class="p">,</span> <span class="s">&quot;high&quot;</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class="line">    <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中对于<code>preset</code><code>tune</code><code>profile</code>参数的选择部分，请参考上一篇中的<a href="http://lazybing.github.io/blog/2017/06/23/x264-paraments-illustra/#section-1">X264参数详解</a>。<br />
非默认参数<code>i_csp</code>指定颜色空间、<code>i_width</code>和<code>i_height</code>指定宽高信息、<code>b_vfr_input</code>指定是否使用时间戳用于帧率控制、
<code>b_repeat_headers</code>指定是否在每个关键帧前添加 SPS/PPS 信息、<code>b_annexb</code>指定在每个 NAL 前添加起止码或者 NAL 大小。</p>

<p>第三步，根据视频宽高以及颜色空间为图像结构体<code>x264_picture_t</code>分配内存。代码如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">if</span><span class="p">(</span> <span class="n">x264_picture_alloc</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">pic</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">i_csp</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">i_width</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">i_height</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class="line">    <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>第四步，打开编码器。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">h</span> <span class="o">=</span> <span class="n">x264_encoder_open</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">param</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>第五步，读取 YUV 文件数据到<code>x264_picture_t</code>结构体中。代码实现如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* Read input frame */</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span> <span class="n">fread</span><span class="p">(</span> <span class="n">pic</span><span class="p">.</span><span class="n">img</span><span class="p">.</span><span class="n">plane</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">luma_size</span><span class="p">,</span> <span class="n">stdin</span> <span class="p">)</span> <span class="o">!=</span> <span class="n">luma_size</span> <span class="p">)</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span> <span class="n">fread</span><span class="p">(</span> <span class="n">pic</span><span class="p">.</span><span class="n">img</span><span class="p">.</span><span class="n">plane</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">chroma_size</span><span class="p">,</span> <span class="n">stdin</span> <span class="p">)</span> <span class="o">!=</span> <span class="n">chroma_size</span> <span class="p">)</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span> <span class="n">fread</span><span class="p">(</span> <span class="n">pic</span><span class="p">.</span><span class="n">img</span><span class="p">.</span><span class="n">plane</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">chroma_size</span><span class="p">,</span> <span class="n">stdin</span> <span class="p">)</span> <span class="o">!=</span> <span class="n">chroma_size</span> <span class="p">)</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>第六/七步，编码一帧图像,并将其输入到输出文件。代码实现如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">        <span class="n">pic</span><span class="p">.</span><span class="n">i_pts</span> <span class="o">=</span> <span class="n">i_frame</span><span class="p">;</span>
</span><span class="line">        <span class="n">i_frame_size</span> <span class="o">=</span> <span class="n">x264_encoder_encode</span><span class="p">(</span> <span class="n">h</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nal</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i_nal</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pic</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pic_out</span> <span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span> <span class="n">i_frame_size</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class="line">            <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">        <span class="k">else</span> <span class="nf">if</span><span class="p">(</span> <span class="n">i_frame_size</span> <span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">fwrite</span><span class="p">(</span> <span class="n">nal</span><span class="o">-&gt;</span><span class="n">p_payload</span><span class="p">,</span> <span class="n">i_frame_size</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">stdout</span> <span class="p">)</span> <span class="p">)</span>
</span><span class="line">                <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>第九步，将编码器内缓存的数据编码完成，并写到输出文件中。代码如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="cm">/* Flush delayed frames */</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span> <span class="n">x264_encoder_delayed_frames</span><span class="p">(</span> <span class="n">h</span> <span class="p">)</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">i_frame_size</span> <span class="o">=</span> <span class="n">x264_encoder_encode</span><span class="p">(</span> <span class="n">h</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nal</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i_nal</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pic_out</span> <span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span> <span class="n">i_frame_size</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class="line">            <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">        <span class="k">else</span> <span class="nf">if</span><span class="p">(</span> <span class="n">i_frame_size</span> <span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">fwrite</span><span class="p">(</span> <span class="n">nal</span><span class="o">-&gt;</span><span class="n">p_payload</span><span class="p">,</span> <span class="n">i_frame_size</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">stdout</span> <span class="p">)</span> <span class="p">)</span>
</span><span class="line">                <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>第十步，最后是清理工作，代码如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">x264_encoder_close</span><span class="p">(</span> <span class="n">h</span> <span class="p">);</span>
</span><span class="line"><span class="n">x264_picture_clean</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">pic</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="x264yuv">x264编码YUV文件示例</h2>

<figure class="code"><figcaption><span>x264_encoder.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdint.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;x264.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define FAIL_IF_ERROR(cond, ...) \</span>
</span><span class="line"><span class="cp">do\</span>
</span><span class="line"><span class="cp">{\</span>
</span><span class="line"><span class="cp">    if(cond)\</span>
</span><span class="line"><span class="cp">    {\</span>
</span><span class="line"><span class="cp">        fprintf(stderr, __VA_ARGS__);\</span>
</span><span class="line"><span class="cp">        goto fail;\</span>
</span><span class="line"><span class="cp">    }\</span>
</span><span class="line"><span class="cp">}while(0)</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">;</span>
</span><span class="line">    <span class="kt">x264_param_t</span> <span class="n">param</span><span class="p">;</span>
</span><span class="line">    <span class="kt">x264_picture_t</span> <span class="n">pic</span><span class="p">;</span>
</span><span class="line">    <span class="kt">x264_picture_t</span> <span class="n">pic_out</span><span class="p">;</span>
</span><span class="line">    <span class="kt">x264_t</span> <span class="o">*</span><span class="n">h</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_frame</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_frame_size</span><span class="p">;</span>
</span><span class="line">    <span class="kt">x264_nal_t</span> <span class="o">*</span><span class="n">nal</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i_nal</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp_src</span><span class="p">;</span>
</span><span class="line">    <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp_dst</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">FAIL_IF_ERROR</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">),</span> <span class="s">&quot;x264_encoder usage:x264_encoder widthxheight &lt;input.yuv&gt; output.264</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">FAIL_IF_ERROR</span><span class="p">(</span><span class="mi">2</span> <span class="o">!=</span> <span class="n">sscanf</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;%dx%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">width</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">height</span><span class="p">),</span> <span class="s">&quot;resolution not sepcified or incorrect</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">fp_src</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="s">&quot;rb&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">fp_src</span><span class="p">){</span>
</span><span class="line">        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;open input yuv file faile</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">fp_dst</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="s">&quot;wb&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">fp_src</span><span class="p">){</span>
</span><span class="line">        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;open output h264 file faile</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//Get default params for preset/tunnig</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">x264_param_default_preset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">param</span><span class="p">,</span> <span class="s">&quot;medium&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//Configure non-default params</span>
</span><span class="line">    <span class="n">param</span><span class="p">.</span><span class="n">i_csp</span> <span class="o">=</span> <span class="n">X264_CSP_I420</span><span class="p">;</span>
</span><span class="line">    <span class="n">param</span><span class="p">.</span><span class="n">i_width</span> <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
</span><span class="line">    <span class="n">param</span><span class="p">.</span><span class="n">i_height</span> <span class="o">=</span> <span class="n">height</span><span class="p">;</span>
</span><span class="line">    <span class="n">param</span><span class="p">.</span><span class="n">b_vfr_input</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="n">param</span><span class="p">.</span><span class="n">b_repeat_headers</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="n">param</span><span class="p">.</span><span class="n">b_annexb</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//Apply profile restrictions.</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">x264_param_apply_profile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">param</span><span class="p">,</span> <span class="s">&quot;high&quot;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">x264_picture_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pic</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">i_csp</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">i_width</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">i_height</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line"><span class="cp">#undef fail</span>
</span><span class="line"><span class="cp">#define fail fail2</span>
</span><span class="line">
</span><span class="line">    <span class="n">h</span> <span class="o">=</span> <span class="n">x264_encoder_open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">param</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">h</span><span class="p">)</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line"><span class="cp">#undef fail</span>
</span><span class="line"><span class="cp">#define fail fail3</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">luma_size</span> <span class="o">=</span> <span class="n">width</span><span class="o">*</span><span class="n">height</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">chroma_size</span> <span class="o">=</span> <span class="n">luma_size</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">    <span class="c1">//Encode frames</span>
</span><span class="line">    <span class="k">for</span><span class="p">(;;</span><span class="n">i_frame</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">//Read input frame</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">fread</span><span class="p">(</span><span class="n">pic</span><span class="p">.</span><span class="n">img</span><span class="p">.</span><span class="n">plane</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">luma_size</span><span class="p">,</span> <span class="n">fp_src</span><span class="p">)</span><span class="o">!=</span><span class="n">luma_size</span><span class="p">)</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">fread</span><span class="p">(</span><span class="n">pic</span><span class="p">.</span><span class="n">img</span><span class="p">.</span><span class="n">plane</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">chroma_size</span><span class="p">,</span> <span class="n">fp_src</span><span class="p">)</span><span class="o">!=</span><span class="n">chroma_size</span><span class="p">)</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">fread</span><span class="p">(</span><span class="n">pic</span><span class="p">.</span><span class="n">img</span><span class="p">.</span><span class="n">plane</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">chroma_size</span><span class="p">,</span> <span class="n">fp_src</span><span class="p">)</span><span class="o">!=</span><span class="n">chroma_size</span><span class="p">)</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">pic</span><span class="p">.</span><span class="n">i_pts</span> <span class="o">=</span> <span class="n">i_frame</span><span class="p">;</span>
</span><span class="line">        <span class="n">i_frame_size</span> <span class="o">=</span> <span class="n">x264_encoder_encode</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nal</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i_nal</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pic</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pic_out</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">i_frame_size</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">            <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">i_frame_size</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">fwrite</span><span class="p">(</span><span class="n">nal</span><span class="o">-&gt;</span><span class="n">p_payload</span><span class="p">,</span> <span class="n">i_frame_size</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fp_dst</span><span class="p">))</span>
</span><span class="line">                <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//Flush delayed frames</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">x264_encoder_delayed_frames</span><span class="p">(</span><span class="n">h</span><span class="p">))</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">i_frame_size</span> <span class="o">=</span> <span class="n">x264_encoder_encode</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nal</span><span class="p">,</span><span class="o">&amp;</span><span class="n">i_nal</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pic_out</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">i_frame_size</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">            <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">i_frame_size</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">fwrite</span><span class="p">(</span><span class="n">nal</span><span class="o">-&gt;</span><span class="n">p_payload</span><span class="p">,</span> <span class="n">i_frame_size</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fp_dst</span><span class="p">))</span>
</span><span class="line">                <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">x264_encoder_close</span><span class="p">(</span><span class="n">h</span><span class="p">);</span>
</span><span class="line">    <span class="n">x264_picture_clean</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pic</span><span class="p">);</span>
</span><span class="line">    <span class="n">fclose</span><span class="p">(</span><span class="n">fp_dst</span><span class="p">);</span>
</span><span class="line">    <span class="n">fclose</span><span class="p">(</span><span class="n">fp_src</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="cp">#undef fail</span>
</span><span class="line">
</span><span class="line"><span class="nl">fail3</span><span class="p">:</span>
</span><span class="line">    <span class="n">x264_encoder_close</span><span class="p">(</span><span class="n">h</span><span class="p">);</span>
</span><span class="line"><span class="nl">fail2</span><span class="p">:</span>
</span><span class="line">    <span class="n">x264_picture_clean</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pic</span><span class="p">);</span>
</span><span class="line"><span class="nl">fail</span><span class="p">:</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>注意，在 Ubuntu 下编译时编译命令为</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gcc x264_encoder.c -o x264_encoder -phread -lm -lx264</span></code></pre></td></tr></table></div></figure>

<p>执行时命令如下</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x264_encoder widthxheight input.yuv output.264</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X264 下载、安装和使用]]></title>
    <link href="http://lazybing.github.io/blog/2017/06/09/x264-download-install-and-use/"/>
    <updated>2017-06-09T08:51:11-07:00</updated>
    <id>http://lazybing.github.io/blog/2017/06/09/x264-download-install-and-use</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#x264-" id="markdown-toc-x264-">x264 获取代码：</a></li>
  <li><a href="#x264--1" id="markdown-toc-x264--1">x264 编译和安装</a></li>
  <li><a href="#x264--2" id="markdown-toc-x264--2">x264 的使用</a></li>
</ul>

<p><a href="http://www.videolan.org/developers/x264.html">x264官网</a>对 x264 项目进行了简单的描述，包括
<!--more--></p>

<h2 id="x264-">x264 获取代码：</h2>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone http://git.videolan.org/git/x264.git</span></code></pre></td></tr></table></div></figure>

<h2 id="x264--1">x264 编译和安装</h2>

<p>此处记录的是在Linux下的编译和安装：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd x264
</span><span class="line">.configure
</span><span class="line">sudo make
</span><span class="line">sudo make install</span></code></pre></td></tr></table></div></figure>

<p>注意，如果想要在 Linux 下使用 GDB 进行逐步调试，需要修改<code>.configure</code>后生成的<code>config.mak</code>文件，将里面的<code>CC=gcc</code>改为<code>CC=gcc -g</code>。</p>

<p>之后就可以使用 X264 来进行编码 H264 格式的视频了。</p>

<h2 id="x264--2">x264 的使用</h2>
<p>x264 的使用可以通过命令行<code>x264 --help</code>来获取。格式一般为</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x264 [options] -o outfile infile</span></code></pre></td></tr></table></div></figure>

<p>其中的输入文件可以是<code>raw</code>文件、<code>.y4m</code>文件等，输出文件格式可以是<code>.264</code>、<code>.mkv</code>、<code>.flv</code>和<code>.mp4</code>；其中输入文件如果是<code>raw</code>文件，需要在 infile 后面通过输入参数（–input-res 640x360）来指定分辨率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFMpeg 实现视频编码、解码、封装、解封装、转码、缩放以及添加水印]]></title>
    <link href="http://lazybing.github.io/blog/2017/01/01/ffmpeg-sdk-learning/"/>
    <updated>2017-01-01T07:17:10-08:00</updated>
    <id>http://lazybing.github.io/blog/2017/01/01/ffmpeg-sdk-learning</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#ffmpeg-" id="markdown-toc-ffmpeg-">FFMpeg 编码实现</a></li>
  <li><a href="#ffmpeg--1" id="markdown-toc-ffmpeg--1">FFMpeg 解码实现</a></li>
  <li><a href="#ffmpeg--2" id="markdown-toc-ffmpeg--2">FFMpeg 封装实现</a></li>
  <li><a href="#ffmpeg--3" id="markdown-toc-ffmpeg--3">FFMpeg 解封装实现</a></li>
  <li><a href="#ffmpeg--4" id="markdown-toc-ffmpeg--4">FFMpeg 转码的实现</a></li>
  <li><a href="#ffmpeg--5" id="markdown-toc-ffmpeg--5">FFMpeg 视频缩放实现</a></li>
  <li><a href="#ffmpeg--6" id="markdown-toc-ffmpeg--6">FFMpeg 添加水印实现</a></li>
</ul>

<p><a href="&quot;https://ffmpeg.org/&quot;">FFMpeg</a> 作为音视频领域的开源工具，它几乎可以实现所有针对音视频的处理，本文主要利用 FFMpeg 官方提供的 SDK 实现音视频最简单的几个实例：编码、解码、封装、解封装、转码、缩放以及添加水印。<br />
<!--more-->
接下来会由发现问题－＞分析问题－＞解决问题－＞实现方案，循序渐进的完成。<br />
参考代码：<a href="&quot;https://github.com/lazybing/ffmpeg-study-recording&quot;">ｌａｚｙｂｉｎｇ</a></p>

<h2 id="ffmpeg-">FFMpeg 编码实现</h2>

<p>本例子实现的是将视频域 YUV 数据编码为压缩域的帧数据，编码格式包含了 H.264/H.265/MPEG1/MPEG2 四种 CODEC 类型。
实现的过程，可以大致用如下图表示:</p>

<p><img src="http://lazybing.github.io/images/ffmpeg_sdk/encoder.png" /></p>

<p>从图中可以大致看出视频编码的流程:</p>

<ul>
  <li>首先要有未压缩的 YUV 原始数据。</li>
  <li>其次要根据想要编码的格式选择特定的编码器。</li>
  <li>最后编码器的输出即为编码后的视频帧。</li>
</ul>

<p>根据流程可以推倒出大致的代码实现：</p>

<ul>
  <li>存放待压缩的 YUV 原始数据。此时可以利用 FFMpeg 提供的 AVFrame 结构体，并根据 YUV 数据来填充 AVFrame　结构的视频宽高、像素格式；根据视频宽高、像素格式可以分配存放数据的内存大小，以及字节对齐情况。</li>
  <li>获取编码器。利用想要压缩的格式，比如　H.264/H.265/MPEG1/MPEG2 等，来获取注册的编解码器，编解码器在 FFMpeg 中用 AVCodec 结构体表示，对于编解码器，肯定要对其进行配置，包括待压缩视频的宽高、像素格式、比特率等等信息，这些信息，FFMpeg 提供了一个专门的结构体 AVCodecContext 结构体。</li>
  <li>存放编码后压缩域的视频帧。FFMpeg 中用来存放压缩编码数据相关信息的结构体为 AVPacket。最后将 AVPacket 存储的压缩数据写入文件即可。</li>
</ul>

<hr />

<p>AVFrame 结构体的分配使用<code>av_frame_alloc()</code>函数，该函数会对 AVFrame 结构体的某些字段设置默认值，它会返回一个指向 AVFrame 的指针或 NULL指针(失败)。AVFrame 结构体的释放只能通过<code>av_frame_free()</code>来完成。注意，该函数只能分配 AVFrame 结构体本身，不能分配它的 data buffers 字段指向的内容，该字段的指向要根据视频的宽高、像素格式信息手动分配，本例使用的是<code>av_image_alloc()</code>函数。代码实现大致如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="c1">//allocate AVFrame struct</span>
</span><span class="line"><span class="n">AVFrame</span> <span class="o">*</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="n">frame</span> <span class="o">=</span> <span class="n">av_frame_alloc</span><span class="p">();</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">frame</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Alloc Frame Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//fill AVFrame struct fields</span>
</span><span class="line"><span class="n">frame</span><span class="o">-&gt;</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
</span><span class="line"><span class="n">frame</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span><span class="p">;</span>
</span><span class="line"><span class="n">frame</span><span class="o">-&gt;</span><span class="n">pix_fmt</span> <span class="o">=</span> <span class="n">AV_PIX_FMT_YUV420P</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//allocate AVFrame data buffers field point</span>
</span><span class="line"><span class="n">ret</span> <span class="o">=</span> <span class="n">av_image_alloc</span><span class="p">(</span><span class="n">frame</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">frame</span><span class="o">-&gt;</span><span class="n">linesize</span><span class="p">,</span> <span class="n">frame</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">,</span> <span class="n">frame</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">,</span> <span class="n">frame</span><span class="o">-&gt;</span><span class="n">pix_fmt</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Alloc Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//write input file data to frame-&gt;data buffer</span>
</span><span class="line"><span class="n">fread</span><span class="p">(</span><span class="n">frame</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">frame</span><span class="o">-&gt;</span><span class="n">width</span><span class="o">*</span><span class="n">frame</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">,</span> <span class="n">pInput_File</span><span class="p">);</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="n">av_frame_free</span><span class="p">(</span><span class="n">frame</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<hr />

<p>编解码器相关的 AVCodec 结构体的分配使用<code>avcodec_find_encoder(enum AVCodecID id)</code>完成，该函数的作用是找到一个与 AVCodecID 匹配的已注册过得编码器；成功则返回一个指向 AVCodec ID 的指针，失败返回 NULL 指针。该函数的作用是确定系统中是否有该编码器，只是能够使用编码器进行特定格式编码的最基本的条件，要想使用它，至少要完成两个步骤：</p>

<ol>
  <li>根据特定的视频数据，对该编码器进行特定的配置；</li>
  <li>打开该编码器。</li>
</ol>

<p>针对第一步中关于编解码器的特定参数，FFMpeg 提供了一个专门用来存放 AVCodec 所需要的配置参数的结构体 AVCodecContext 结构。它的分配使用<code>avcodec_alloc_context3(const AVCodec *codec)</code>完成，该函数根据特定的 CODEC 分配一个 AVCodecContext 结构体，并设置一些字段为默认参数，成功则返回指向 AVCodecContext 结构体的指针，失败则返回 NULL 指针。分配完成后，根据视频特性，手动指定与编码器相关的一些参数，比如视频宽高、像素格式、比特率、GOP 大小等。最后根据参数信息，打开找到的编码器，此处使用<code>avcodec_open2()</code>函数完成。代码实现大致如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVCodec</span> <span class="o">*</span><span class="n">codec</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">codecCtx</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//register all encoder and decoder</span>
</span><span class="line"><span class="n">avcodec_register_all</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">//find the encoder</span>
</span><span class="line"><span class="n">codec</span> <span class="o">=</span> <span class="n">avcodec_find_encoder</span><span class="p">(</span><span class="n">codec_id</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">codec</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Could Not Find the Encoder</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//allocate the AVCodecContext and fill it&#39;s fields</span>
</span><span class="line"><span class="n">codecCtx</span> <span class="o">=</span> <span class="n">avcodec_alloc_context3</span><span class="p">(</span><span class="n">codec</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">codecCtx</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Alloc AVCodecCtx Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">codecCtx</span><span class="o">-&gt;</span><span class="n">bit_rate</span> <span class="o">=</span> <span class="mi">4000000</span><span class="p">;</span>
</span><span class="line"><span class="n">codecCtx</span><span class="o">-&gt;</span><span class="n">width</span>    <span class="o">=</span> <span class="n">frameWidth</span><span class="p">;</span>
</span><span class="line"><span class="n">codecCtx</span><span class="o">-&gt;</span><span class="n">height</span>   <span class="o">=</span> <span class="n">frameHeight</span><span class="p">;</span>
</span><span class="line"><span class="n">codecCtx</span><span class="o">-&gt;</span><span class="n">time_base</span><span class="o">=</span> <span class="p">(</span><span class="n">AVRational</span><span class="p">){</span><span class="mi">1</span><span class="p">,</span> <span class="mi">25</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="c1">//open the encoder</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">avcodec_open2</span><span class="p">(</span><span class="n">codecCtx</span><span class="p">,</span> <span class="n">codec</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Open Encoder Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<hr />

<p>存放编码数据的结构体为 AVPacket，使用之前要对该结构体进行初始化，初始化函数为<code>av_init_packet(AVPacket *pkt)</code>，该函数会初始化 AVPacket 结构体中一些字段为默认值，但它不会设置其中的 data 和 size 字段，需要单独初始化,如果此处将 data 设为 NULL、size 设为 0，编码器会自动填充这两个字段。</p>

<p>有了存放编码数据的结构体后，我们就可以利用编码器进行编码了。FFMpeg 提供的用于视频编码的函数为<code>avcodec_encode_video2</code>,它作用是编码一帧视频数据，该函数比较复杂，单独列出如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">avcodec_encode_video2</span><span class="p">(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AVPacket</span> <span class="o">*</span><span class="n">avpkt</span><span class="p">,</span>
</span><span class="line">                          <span class="k">const</span> <span class="n">AVFrame</span> <span class="o">*</span><span class="n">frame</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">got_packet_ptr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>它会接收来自 AVFrame-&gt;data 的视频数据，并将编码数据放到 AVPacket-&gt;data 指向的位置，编码数据大小为 AVPacket-&gt;size。</p>

<p>其参数和返回值的意义：</p>

<ul>
  <li>avctx: AVCodecContext 结构，指定了编码的一些参数；</li>
  <li>avPkt: AVPacket对象的指针，用于保存输出的码流；</li>
  <li>frame：AVFrame结构，用于传入原始的像素数据；</li>
  <li>got_packet_ptr:输出参数，用于标识是否已经有了完整的一帧；</li>
  <li>返回值：编码成功返回 0， 失败返回负的错误码；</li>
</ul>

<p>编码完成后就可将AVPacket-&gt;data内的编码数据写到输出文件中；代码实现大致如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVPacket</span> <span class="n">pkt</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//init AVPacket</span>
</span><span class="line"><span class="n">av_init_packet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pkt</span><span class="p">);</span>
</span><span class="line"><span class="n">pkt</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="n">pkt</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//encode the image</span>
</span><span class="line"><span class="n">ret</span> <span class="o">=</span> <span class="n">avcodec_encode_video2</span><span class="p">(</span><span class="n">codecCtx</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pkt</span><span class="p">,</span> <span class="n">frame</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">got_output</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Encode Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="err">｝</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">got_output</span><span class="p">){</span>
</span><span class="line">	<span class="n">fwrite</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">pkt</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="n">pOutput_File</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>编码的大致流程已经完成了，剩余的是一些收尾工作，比如释放分配的内存、结构体等等。</p>

<p>完整实现请移步<a href="https://github.com/lazybing/ffmpeg-study-recording/blob/master/encoder.c">编码实现</a>。</p>

<h2 id="ffmpeg--1">FFMpeg 解码实现</h2>

<p>解码实现的是将压缩域的视频数据解码为像素域的 YUV 数据。实现的过程，可以大致用如下图所示。</p>

<p><img src="http://lazybing.github.io/images/ffmpeg_sdk/decoder.png" /></p>

<p>从图中可以看出，大致可以分为下面三个步骤：</p>

<ul>
  <li>首先要有待解码的压缩域的视频。</li>
  <li>其次根据压缩域的压缩格式获得解码器。</li>
  <li>最后解码器的输出即为像素域的 YUV 数据。</li>
</ul>

<p>根据流程可以推倒出大致的代码实现：</p>

<ul>
  <li>关于输入数据。首先，要分配一块内存，用于存放压缩域的视频数据；之后，对内存中的数据进行预处理，使其分为一个一个的 AVPacket 结构（AVPacket 结构的简单介绍如上面的编码实现）。最后，将 AVPacket 结构中的 data 数据给到解码器。</li>
  <li>关于解码器。首先，利用 CODEC_ID 来获取注册的解码器；之后，将预处理过得视频数据给到解码器进行解码。</li>
  <li>关于输出。FFMpeg 中，解码后的数据存放在 AVFrame 中；之后就将 AVFrame 中的 data 字段的数据存放到输出文件中。</li>
</ul>

<hr />

<p>对于输入数据，首先，通过 fread 函数实现将固定长度的输入文件的数据存放到一块 buffer 内。H.264中一个包的长度是不定的，读取固定长度的码流通常不可能刚好读出一个包的长度；对此，FFMpeg 提供了一个 AVCoderParserContext 结构用于解析读到 buffer 内的码流信息，直到能够取出一个完整的 H.264 包。为此，FFMpeg 提供的函数为<code>av_parser_parse2</code>，该函数比较复杂，定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">av_parser_parse2</span><span class="p">(</span><span class="n">AVCodecParserContext</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span>
</span><span class="line">                     <span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">avctx</span><span class="p">,</span>
</span><span class="line">                     <span class="kt">uint8_t</span> <span class="o">**</span><span class="n">poutbuf</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">poutbuf_size</span><span class="p">,</span>
</span><span class="line">                     <span class="k">const</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">buf_size</span><span class="p">,</span>
</span><span class="line">                     <span class="kt">int64_t</span> <span class="n">pts</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="n">dts</span><span class="p">,</span>
</span><span class="line">                     <span class="kt">int64_t</span> <span class="n">pos</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>函数的参数和返回值含义如下：</p>

<ul>
  <li>AVCodecParserContext *s:初始化过的 AVCodecParserContext 对象，决定了码流该以怎样的标准进行解析；</li>
  <li>AVCodecContext *avctx：预先定义好的 AVCodecContext 对象；</li>
  <li>uint8_t **poutbuf：AVPacket：：data 的地址，保存解析完成的包数据。</li>
  <li>int *poutbuf_size：AVPacket 的实际数据长度，如果没有解析出完整的一个包，该值为 0；</li>
  <li>const uint8_t *but:待解码的码流的地址；</li>
  <li>int buf_size:待解码的码流的长度；</li>
  <li>int64_t pts, int64_t dts:显示和解码的时间戳；</li>
  <li>int64_t pos:码流中的位置；</li>
  <li>返回值为解析所使用的比特位的长度；</li>
</ul>

<p>FFMpeg 中为我们提供的该函数常用的使用方式为：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">while</span><span class="p">(</span><span class="n">in_len</span><span class="p">){</span>
</span><span class="line">	<span class="n">len</span> <span class="o">=</span> <span class="n">av_parser_parse2</span><span class="p">(</span><span class="n">myparser</span><span class="p">.</span> <span class="n">AVCodecContext</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">data</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">,</span> <span class="n">in_data</span><span class="p">,</span> <span class="n">in</span> <span class="n">len</span><span class="p">,</span> <span class="n">pts</span><span class="p">,</span> <span class="n">dts</span><span class="p">,</span> <span class="n">pos</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">in_data</span> <span class="o">+=</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">	<span class="n">in_len</span>  <span class="o">-=</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class="line">		<span class="n">decode_frame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>如果参数poutbuf_size的值为0，那么应继续解析缓存中剩余的码流；如果缓存中的数据全部解析后依然未能找到一个完整的包，那么继续从输入文件中读取数据到缓存，继续解析操作，直到pkt.size不为0为止。</p>

<p>因此，关于输入数据的处理，代码大致如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="c1">//open input file</span>
</span><span class="line"><span class="kt">FILE</span> <span class="o">*</span><span class="n">pInput_File</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">Input_FileName</span><span class="p">,</span> <span class="s">&quot;rb+&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pInput_File</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Open Input File Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//read compressed bitstream form file to buffer</span>
</span><span class="line"><span class="n">uDataSize</span> <span class="o">=</span> <span class="n">fread</span><span class="p">(</span><span class="n">inbuf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">INBUF_SIZE</span><span class="p">,</span> <span class="n">pInput_File</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">uDataSize</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>	<span class="c1">//decode finish</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//decode the data in the buffer to AVPacket.data</span>
</span><span class="line"><span class="k">while</span><span class="p">(</span><span class="n">uDataSize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">	<span class="n">len</span> <span class="o">=</span> <span class="n">av_parser_parse2</span><span class="p">(</span><span class="n">pCodecParserCtx</span><span class="p">,</span> <span class="n">codecCtx</span><span class="p">,</span>
</span><span class="line">							<span class="o">&amp;</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">data</span><span class="p">),</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">size</span><span class="p">),</span>
</span><span class="line">							<span class="n">pDataPtr</span><span class="p">,</span> <span class="n">uDataSize</span><span class="p">,</span>
</span><span class="line">							<span class="n">AV_NOPTS_VALUE</span><span class="p">,</span> <span class="n">AV_NOPTS_VALUE</span><span class="p">,</span>
</span><span class="line">							<span class="n">AV_NOPTS_VALUE</span><span class="p">);</span>
</span><span class="line">	<span class="n">uDataSize</span> <span class="o">-=</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">	<span class="n">uDataPtr</span>  <span class="o">+=</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class="line">	<span class="n">decode_frame</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">pkt</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>注意，上面提到的<code>av_parser_parse2</code>函数用的几个参数，其实是与具体的编码格式有关的，它们应该在之前已经分配好了，我们只是放到后面来讲一下，因为它们是与具体的解码器强相关的。</p>

<hr />

<p>对于解码器。与上面提到的编码实现类似，首先，根据 CODEC_ID 找到注册的解码器 AVCodec，FFMpeg 为此提供的函数为<code>avcodec_find_decoder()</code>；其次，根据找到的解码器获取与之相关的解码器上下文结构体 AVCodecC，使用的函数为编码中提到的<code>avcodec_alloc_context3</code>；再者，如上面提到的要获取完整的一个 NALU，解码器需要分配一个 AVCodecParserContext 结构，使用函数<code>av_parser_init</code>；最后，前面的准备工作完成后，打开解码器，即可调用 FFMpeg 提供的解码函数<code>avcodec_decode_video2</code>对输入的压缩域的码流进行解码，并将解码数据存放到 AVFrame-&gt;data 中。代码实现大致如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVFrame</span> <span class="o">*</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="n">AVCodec</span> <span class="o">*</span><span class="n">codec</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">codecCtx</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="n">AVCodecParserContext</span> <span class="o">*</span><span class="n">pCodecParserCtx</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//register all encoder and decoder</span>
</span><span class="line"><span class="n">avcodec_register_all</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">//Allocate AVFrame to Store the Decode Data</span>
</span><span class="line"><span class="n">frame</span> <span class="o">=</span> <span class="n">av_frame_alloc</span><span class="p">();</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">frame</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Alloc Frame Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//Find the  AVCodec Depending on the CODEC_ID</span>
</span><span class="line"><span class="n">codec</span> <span class="o">=</span> <span class="n">avcodec_find_decoder</span><span class="p">(</span><span class="n">AV_CODEC_ID_H264</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">codec</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Find the Decoder Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//Allocate the AVCodecContext </span>
</span><span class="line"><span class="n">codecCtx</span> <span class="o">=</span> <span class="n">avcodec_alloc_context3</span><span class="p">(</span><span class="n">codec</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">codecCtx</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Alloc AVCodecCtx Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//Allocate the AVCodecParserContext </span>
</span><span class="line"><span class="n">pCodecParserCtx</span> <span class="o">=</span> <span class="n">av_parser_init</span><span class="p">(</span><span class="n">AV_CODEC_ID_H264</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pCodecParserCtx</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Alloc AVCodecParserContext Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//Open the Decoder</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">avcodec_open2</span><span class="p">(</span><span class="n">codecCtx</span><span class="p">,</span> <span class="n">codec</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Could not Open the Decoder</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//read compressed bitstream form file to buffer</span>
</span><span class="line"><span class="n">uDataSize</span> <span class="o">=</span> <span class="n">fread</span><span class="p">(</span><span class="n">inbuf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">INBUF_SIZE</span><span class="p">,</span> <span class="n">pInput_File</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">uDataSize</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>	<span class="c1">//decode finish</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//decode the data in the buffer to AVPacket.data</span>
</span><span class="line"><span class="k">while</span><span class="p">(</span><span class="n">uDataSize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">	<span class="n">len</span> <span class="o">=</span> <span class="n">av_parser_parse2</span><span class="p">(</span><span class="n">pCodecParserCtx</span><span class="p">,</span> <span class="n">codecCtx</span><span class="p">,</span>
</span><span class="line">							<span class="o">&amp;</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">data</span><span class="p">),</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">size</span><span class="p">),</span>
</span><span class="line">							<span class="n">pDataPtr</span><span class="p">,</span> <span class="n">uDataSize</span><span class="p">,</span>
</span><span class="line">							<span class="n">AV_NOPTS_VALUE</span><span class="p">,</span> <span class="n">AV_NOPTS_VALUE</span><span class="p">,</span>
</span><span class="line">							<span class="n">AV_NOPTS_VALUE</span><span class="p">);</span>
</span><span class="line">	<span class="n">uDataSize</span> <span class="o">-=</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">	<span class="n">uDataPtr</span>  <span class="o">+=</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class="line">	<span class="c1">//decode start</span>
</span><span class="line">	<span class="n">avcodec_decode_video2</span><span class="p">(</span><span class="n">codecCtx</span><span class="p">,</span> <span class="n">frame</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">got_frame</span><span class="p">,</span> <span class="n">pkt</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>注意，上面解码的过程中，针对具体的实现，可能要做一些具体参数上的调整，此处只是理清解码的流程。</p>

<hr />

<p>对于输出数据。解码完成后，解码出来的像素域的数据存放在 AVFrame 的 data 字段内，只需要将该字段内存放的数据之间写文件到输出文件即可。解码函数<code>avcodec_decode_video2</code>函数完成整个解码过程，对于它简单介绍如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">avcodec_decode_video2</span><span class="p">(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AVFrame</span> <span class="o">*</span><span class="n">picture</span><span class="p">,</span>
</span><span class="line">                         <span class="kt">int</span> <span class="o">*</span><span class="n">got_picture_ptr</span><span class="p">,</span>
</span><span class="line">                         <span class="k">const</span> <span class="n">AVPacket</span> <span class="o">*</span><span class="n">avpkt</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>该函数各个参数的意义：</p>

<ul>
  <li>AVCodecContext *avctx：编解码器上下文对象，在打开编解码器时生成；</li>
  <li>AVFrame *picture: 保存解码完成后的像素数据；我们只需要分配对象的空间，像素的空间codec会为我们分配好；</li>
  <li>int *got_picture_ptr: 标识位，如果为1，那么说明已经有一帧完整的像素帧可以输出了;</li>
  <li>const AVPacket *avpkt: 前面解析好的码流包；</li>
</ul>

<p>由此可见，当标识位为1时，代表解码一帧结束，可以写数据到文件中。代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pOutput_File</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">Output_FileName</span><span class="p">,</span> <span class="s">&quot;wb&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pOutput_File</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Open Output File Fail</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">got_picture_ptr</span><span class="p">){</span>
</span><span class="line">	<span class="n">fwrite</span><span class="p">(</span><span class="n">frame</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">1</span><span class="p">,</span> <span class="n">Len</span><span class="p">,</span> <span class="n">pOutput_File</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>解码的大致流程已经完成了，剩余的是一些收尾工作，比如释放分配的内存、结构体等等。</p>

<p>完整实现请移步<a href="https://github.com/lazybing/ffmpeg-study-recording/blob/master/decoder.c">解码实现</a>。</p>

<h2 id="ffmpeg--2">FFMpeg 封装实现</h2>

<p>本例子实现的是将视频数据和音频数据，按照一定的格式封装为特定的容器，比如FLV、MKV、MP4、AVI等等。实现的过程，可以大致用如下图表示：</p>

<p><img src="http://lazybing.github.io/images/ffmpeg_sdk/muxer.png" /></p>

<p>从图中可以大致看出视频封装的流程：</p>

<ul>
  <li>首先要有编码好的视频、音频数据。</li>
  <li>其次要根据想要封装的格式选择特定的封装器。</li>
  <li>最后利用封装器进行封装。</li>
</ul>

<p>根据流程可以推倒出大致的代码实现：</p>

<ul>
  <li>利用给定的YUV数据编码得到某种 CODEC 格式的编码视频（可以参见上面提到的<a href="http://lazybing.github.io/blog/2017/01/01/ffmpeg-sdk-learning/#ffmpeg-">编码实现</a>），同样的方法得到音频数据。</li>
  <li>获取输出文件格式。获取输出文件格式可以直接指定文件格式，比如FLV/MKV/MP4/AVI等，也可以通过输出文件的后缀名来确定，或者也可以选择默认的输出格式。根据得到的文件格式，其中可能有视频、音频等，为此我们需要为格式添加视频、音频、并对格式中的一些信息进行设置（比如头）。</li>
  <li>利用设置好的音频、视频、头信息等，开始封装。</li>
</ul>

<hr />

<p>对于由 YUV 数据得到编码的视频数据部分，不再重复。直接看与 Muxer 相关的部分，与特定的 Muxer 相关的信息，FFMpeg 提供了一个 AVFormatContext 的结构体描述，并用<code>avformat_alloc_output_context2()</code>函数来分配它。该函数的声明如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">avformat_alloc_output_context2</span><span class="p">(</span><span class="n">AVFormatContext</span> <span class="o">**</span><span class="n">ctx</span><span class="p">,</span> <span class="n">AVOutputFormat</span> <span class="o">*</span><span class="n">oformat</span><span class="p">,</span>
</span><span class="line">                                   <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">format_name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中：</p>

<ul>
  <li>ctx:输出到 AVFormatContext 结构的指针，如果函数失败则返回给该指针为 NULL。</li>
  <li>oformat：指定输出的 AVOutputFormat 类型，如果设为 NULL，则根据 format_name 和 filename 生成。</li>
  <li>format_name:输出格式的名称，如果设为 NULL，则使用 filename 默认格式。</li>
  <li>filename：目标文件名，如果不使用，可以设为 NULL。</li>
  <li>返回值：&gt;=0 则成功，否则失败。</li>
</ul>

<p>代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVOutputFormat</span> <span class="o">*</span><span class="n">fmt</span><span class="p">;</span>
</span><span class="line"><span class="n">AVFormatContext</span> <span class="o">*</span><span class="n">oc</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* allocate the output media context */</span>
</span><span class="line"><span class="n">avformat_alloc_output_context2</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oc</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">filename</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">oc</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Could not deduce output format from file extension: using MPEG.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">avformat_alloc_output_context2</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oc</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">&quot;mpeg&quot;</span><span class="p">,</span> <span class="n">filename</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">oc</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">fmt</span> <span class="o">=</span> <span class="n">oc</span><span class="o">-&gt;</span><span class="n">oformat</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>有了表示媒体文件格式的 AVFormatContext 结构后，就需要根据媒体格式来判断是否需要往媒体文件中添加视频流、音频流（有的媒体文件，这两种流并不是必须的）；以 MP4 格式的媒体文件为例，我们需要一路视频流、一路音频流。因此需要创建一路流，FFMpeg 提供的创建流的函数为<code>avformat_new_stream()</code>，该函数完成向 AVFormatContext 结构体中所代码的媒体文件中添加数据流，函数声明如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVStream</span> <span class="o">*</span><span class="nf">avformat_new_stream</span><span class="p">(</span><span class="n">AVFormatContext</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="k">const</span> <span class="n">AVCodec</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中：</p>

<ul>
  <li>s:AVFormatContext 结构，表示要封装生成的视频文件。</li>
  <li>c：视频或音频流的编码器的指针。</li>
  <li>返回值：指向生成的 stream 对象的指针；失败则返回 NULL。</li>
</ul>

<p>注意：对于 Muxer，该函数必须在调用<code>avformat_write_header()</code>前调用。使用完成后，需要调用<code>avcodec_close()</code>和<code>avformat_free_context()</code>来清理由它分配的内容。</p>

<p>该函数调用完成后，一个新的 AVStream 便已经加入到输出文件中，下面就需要设置 stream 的 id 和 codec 等参数。以视频流为例，代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">OutputStream</span> <span class="o">*</span><span class="n">ost</span><span class="p">;</span>
</span><span class="line"><span class="n">AVFormatContext</span> <span class="o">*</span><span class="n">oc</span><span class="p">;</span>
</span><span class="line"><span class="n">AVCodec</span> <span class="o">**</span><span class="n">codec</span><span class="p">;</span>
</span><span class="line"><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">c</span><span class="p">;</span>
</span><span class="line"><span class="n">AVStream</span> <span class="o">*</span><span class="n">st</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">st</span> <span class="o">=</span> <span class="n">avformat_new_stream</span><span class="p">(</span><span class="n">oc</span><span class="p">,</span> <span class="o">*</span><span class="n">codec</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">){</span>
</span><span class="line">    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Could not allocate stream</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">st</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="n">oc</span><span class="o">-&gt;</span><span class="n">nb_streams</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="n">c</span> <span class="o">=</span> <span class="n">st</span><span class="o">-&gt;</span><span class="n">codec</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>参数设置完成后，就可以打开编码器并为编码器分配必要的内存。步骤跟之前的类似，以视频为例，示例代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="c1">//open the codec</span>
</span><span class="line"><span class="n">ret</span> <span class="o">=</span> <span class="n">avcodec_open</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">codec</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">opt</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Could not open video codec: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">av_err2str</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span>
</span><span class="line">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">//allocate and init a re-usable frame</span>
</span><span class="line"><span class="n">ost</span><span class="o">-&gt;</span><span class="n">frame</span> <span class="o">=</span> <span class="n">alloc_picture</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pix_fmt</span><span class="p">,</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">,</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>接下来进行真正的封装：首先，为媒体文件添加头部信息,FFMpeg 为此提供的函数为<code>avformat_write_header()</code>。其次，将编码好的音视频 AVPacket 包添加到媒体文件中去，FFMpeg 为此提供的函数为<code>av_interleaved_write_frame()</code>。最后，写入文件尾的数据，FFMpeg 为此提供的函数为<code>av_write_trailer()</code>。</p>

<p>封装的大致流程已经完成了，剩余的是一些收尾工作，比如释放分配的内存、结构体等等。</p>

<p>完整实现请移步<a href="https://github.com/lazybing/ffmpeg-study-recording/blob/master/muxer.c">封装实现</a>。</p>

<h2 id="ffmpeg--3">FFMpeg 解封装实现</h2>

<p>本例子实现的是将音视频分离，例如将封装格式为 FLV、MKV、MP4、AVI 等封装格式的文件，将音频、视频分离开来。
实现的过程，可以大致用如下图表示：</p>

<p><img src="http://lazybing.github.io/images/ffmpeg_sdk/demuxer.png" /></p>

<p>从图中可以看出大致的节封装流程：</p>

<ul>
  <li>首先要对解复用器进行初始化。</li>
  <li>其次将输入的封装格式文件给到解复用器内。</li>
  <li>最后利用解封装对 Container 进行解封装。</li>
</ul>

<p>根据流程可以推到出大致的代码流程：</p>

<ul>
  <li>首先对输入文件(Container 文件)、输出文件(Video/Audio 进行处理)，方便后面的使用；</li>
  <li>其次打开输入文件，并分配 Format Context，从输入文件中得到流信息</li>
  <li>之后打开视频、音频编码器 Context,针对视频数据，分配图像 image。</li>
  <li>分配 frame 结构，初始化 packet，从输入文件中读取 frame 信息，并之后进行解码 packet。</li>
  <li>最后释放各种分配的数据信息。</li>
</ul>

<hr />

<p>在音视频分离后，需要将分离出的音视频分别放到不同的输出文件中，为此，需要打开文件以备后用。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">video_dst_filename</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">audio_dst_filename</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="k">static</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">video_dst_file</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="k">static</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">audio_dst_file</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="n">video_dst_filename</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="n">audio_dst_filename</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="n">video_dst_file</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">video_dst_filename</span><span class="p">,</span> <span class="s">&quot;wb+&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">audio_dst_file</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">audio_dst_filename</span><span class="p">,</span> <span class="s">&quot;wb+&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>对于给定的需要 AV 分离的输入文件，使用<code>avformat_open_input</code>打开输入文件，并分配<code>AVFormatContext</code>结构。该函数的声明如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int avformat_open_input(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options);</span></code></pre></td></tr></table></div></figure>
<p>其中：</p>

<ul>
  <li>ps:指向由用户提供的<code>AVFormatContext</code>结构体，该结构体通过<code>avformat_alloc_context</code>分配，如果它是一个 NULL，该结构在此函数内分配并负值给 ps。</li>
  <li>filename:指向需要打开的流的名称。</li>
  <li>fmt：如果是 non-NULL,该参数指定输入的文件格式，否则输入文件的格式自动根据文件本身自动获取。</li>
  <li>options:此处可以为 NULL。</li>
  <li>返回值：成功返回0，否则返回 AVERROR。</li>
</ul>

<p>实现代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="c1">//open input file, and allocate format context</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">avformat_open_input</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fmt_ctx</span><span class="p">,</span> <span class="n">src_filename</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Could not open source file %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">src_filename</span><span class="p">);</span>
</span><span class="line">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//retrive stream information</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">avformat_find_stream_info</span><span class="p">(</span><span class="n">fmt_ctx</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Could not find stream information</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>通过输入文件分配好<code>AVFormatContext</code>后，需要找到里面的音频流和视频流，此处需要用到的函数为<code>av_find_best_stream</code>;
之后要根据找到的不同的流(如H264流、HEVC流等)找到特定的编解码器，此处使用<code>avcodec_find_decoder</code>;找到了解码器后，
就需要打开解码器，此处使用<code>avcodec_open2</code>函数完成。下面分别介绍这几个函数的使用：</p>

<p><code>av_find_best_stream</code>函数定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int av_find_best_stream(AVFormatContext *ic, enum AVMediaType type, int wanted_stream_nb, int related_stream, AVCodec **decoder_ret, int flags);</span></code></pre></td></tr></table></div></figure>
<p>其中：</p>

<ul>
  <li>ic:媒体文件句柄。</li>
  <li>type:媒体类型，视频、音频、文本等。</li>
  <li>wanted_stream_nb:用户请求的流，-1 代表自动选择。</li>
  <li>related_stream:尝试找到相关流，如果没有就设为-1。</li>
  <li>decoder_ret:如果是non-NULL,返回选定的流的解码器。</li>
  <li>flags：此处定位0。</li>
  <li>返回值：成功返回非负值，如果找不到指定的请求类型的流，就返回<code>AVERROR_STREAM_NOT_FOUND</code>;如果找到了流，但没找到对应的解码器，就返回<code>AVERROR_DECODER_NOT_FOUND</code>。</li>
</ul>

<p><code>avcodec_find_decoder</code>函数定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">AVCodec *avcodec_find_decoder(enum AVCodecID id);</span></code></pre></td></tr></table></div></figure>

<p>该函数参数为<code>AVCodecID</code>指定了请求的解码器，成功返回解码器，否则返回 NULL。</p>

<p><code>avcodec_open2</code>函数定义如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int avcodec_open2(AVCodecContext *avctx, const AVCodec *codec, AVDictionary **options);</span></code></pre></td></tr></table></div></figure>

<p>其中：</p>

<ul>
  <li>avctx:即将初始化的<code>AVCodecContext</code>结构体。</li>
  <li>codec：打开的解码器，如果它是non-NULL codec,并在之前传递给了<code>avcodec_alloc_context3</code>或<code>avcodec_get_context_defaults3</code>，该参数必须为 NULL 或之前传递的 CODEC。</li>
  <li>Options：此处我们设置为 NULL。</li>
  <li>返回值：成功返回0，出错返回一个负值。</li>
</ul>

<p>该函数的主要作用是根据给定的<code>AVCodec</code>初始化<code>AVCodecContext</code>,在使用该函数之前，待初始化的<code>AVCodecContext</code>结构需要先使用<code>avcodec_alloc_context3</code>分配好。其中的参数
<code>AVCodec</code>可以通过<code>avcodec_find_decoder_by_name</code><code>avcodec_find_encoder_by_name</code><code>avcodec_find_decoder</code>或<code>avcodec_find_endcoder</code>来获取。在进行真正的解码之前，必须调用该函数。
下面给出使用的示例：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">avcodec_register_all</span><span class="p">();</span>
</span><span class="line"><span class="n">av_dict_set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">opts</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;2.5M&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">codec</span> <span class="o">=</span> <span class="n">avcodec_find_decoder</span><span class="p">(</span><span class="n">AV_CODEC_ID_H264</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">codec</span><span class="p">)</span>
</span><span class="line">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">context</span> <span class="o">=</span> <span class="n">avcodec_alloc_context3</span><span class="p">(</span><span class="n">codec</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">avcodec_open2</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">codec</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>对于上面分析的部分，我们将其封装在一个函数里，代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">open_codec_context</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">stream_idx</span><span class="p">,</span>
</span><span class="line">                              <span class="n">AVFormatContext</span> <span class="o">*</span><span class="n">fmt_ctx</span><span class="p">,</span>
</span><span class="line">                              <span class="k">enum</span> <span class="n">AVMediaType</span> <span class="n">type</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ret</span><span class="p">,</span> <span class="n">stream_index</span><span class="p">;</span>
</span><span class="line">    <span class="n">AVStream</span> <span class="o">*</span><span class="n">pStream</span><span class="p">;</span>
</span><span class="line">    <span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">codec_ctx</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="n">AVCodec</span> <span class="o">*</span><span class="n">codec</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="n">av_find_best_stream</span><span class="p">(</span><span class="n">fmt_ctx</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Could not find %s stream in input file &#39;%s&#39;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class="line">                <span class="n">av_get_media_type_string</span><span class="p">(</span><span class="n">type</span><span class="p">),</span> <span class="n">src_filename</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class="line">        <span class="n">stream_index</span> <span class="o">=</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">        <span class="n">pStream</span> <span class="o">=</span> <span class="n">fmt_ctx</span><span class="o">-&gt;</span><span class="n">streams</span><span class="p">[</span><span class="n">stream_index</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//find decoder for the stream</span>
</span><span class="line">        <span class="n">codec_ctx</span> <span class="o">=</span> <span class="n">pStream</span><span class="o">-&gt;</span><span class="n">codec</span><span class="p">;</span>
</span><span class="line">        <span class="n">codec</span> <span class="o">=</span> <span class="n">avcodec_find_decoder</span><span class="p">(</span><span class="n">codec_ctx</span><span class="o">-&gt;</span><span class="n">codec_id</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">codec</span><span class="p">){</span>
</span><span class="line">            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Failed to find %s codec</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class="line">                    <span class="n">av_get_media_type_string</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
</span><span class="line">            <span class="k">return</span> <span class="n">AVERROR</span><span class="p">(</span><span class="n">EINVAL</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//open the decoder</span>
</span><span class="line">        <span class="k">if</span><span class="p">((</span><span class="n">ret</span> <span class="o">=</span> <span class="n">avcodec_open2</span><span class="p">(</span><span class="n">codec_ctx</span><span class="p">,</span> <span class="n">codec</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span><span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Failed to open %s codec</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class="line">                    <span class="n">av_get_media_type_string</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
</span><span class="line">            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="o">*</span><span class="n">stream_idx</span> <span class="o">=</span> <span class="n">stream_index</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>针对音频、视频，分别调用该函数，示例代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">open_codec_context</span><span class="p">(</span><span class="o">&amp;</span><span class="n">video_stream_idx</span><span class="p">,</span> <span class="n">fmt_ctx</span><span class="p">,</span> <span class="n">AVMEDIA_TYPE_VIDEO</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">        <span class="n">video_stream</span>    <span class="o">=</span> <span class="n">fmt_ctx</span><span class="o">-&gt;</span><span class="n">streams</span><span class="p">[</span><span class="n">video_stream_idx</span><span class="p">];</span>
</span><span class="line">        <span class="n">video_codec_ctx</span> <span class="o">=</span> <span class="n">video_stream</span><span class="o">-&gt;</span><span class="n">codec</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//allocate image where the decoded image will be put</span>
</span><span class="line">        <span class="n">width</span>   <span class="o">=</span> <span class="n">video_codec_ctx</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">;</span>
</span><span class="line">        <span class="n">height</span>  <span class="o">=</span> <span class="n">video_codec_ctx</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">;</span>
</span><span class="line">        <span class="n">pix_fmt</span> <span class="o">=</span> <span class="n">video_codec_ctx</span><span class="o">-&gt;</span><span class="n">pix_fmt</span><span class="p">;</span>
</span><span class="line">        <span class="n">ret</span> <span class="o">=</span> <span class="n">av_image_alloc</span><span class="p">(</span><span class="n">video_dst_data</span><span class="p">,</span> <span class="n">video_dst_linesize</span><span class="p">,</span>
</span><span class="line">                             <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">pix_fmt</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Could not allocate raw video buffer</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">video_dst_bufsize</span> <span class="o">=</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">open_codec_context</span><span class="p">(</span><span class="o">&amp;</span><span class="n">audio_stream_idx</span><span class="p">,</span> <span class="n">fmt_ctx</span><span class="p">,</span> <span class="n">AVMEDIA_TYPE_AUDIO</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">        <span class="n">audio_stream</span> <span class="o">=</span> <span class="n">fmt_ctx</span><span class="o">-&gt;</span><span class="n">streams</span><span class="p">[</span><span class="n">audio_stream_idx</span><span class="p">];</span>
</span><span class="line">        <span class="n">audio_codec_ctx</span> <span class="o">=</span> <span class="n">audio_stream</span><span class="o">-&gt;</span><span class="n">codec</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>上面的一些准备工作完成后，就需要从输入文件中一帧一帧读取数据，并进行解码了。从这里可以看出，需要找到一个
一帧视频存放的地方，为此需要使用<code>av_init_packet</code>初始化一个<code>AVPacket</code>。之后就可以使用<code>av_read_frame</code>来从输入
文件中读取一个 frame。示例代码如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">decode_packet</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">got_frame</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cached</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">decoded</span> <span class="o">=</span> <span class="n">pkt</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class="line">    <span class="o">*</span><span class="n">got_frame</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">stream_index</span> <span class="o">==</span> <span class="n">video_stream_idx</span><span class="p">){</span>
</span><span class="line">        <span class="c1">//decode video frame</span>
</span><span class="line">        <span class="n">ret</span> <span class="o">=</span> <span class="n">avcodec_decode_video2</span><span class="p">(</span><span class="n">video_codec_ctx</span><span class="p">,</span> <span class="n">frame</span><span class="p">,</span> <span class="n">got_frame</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pkt</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Error decoding video frame (%s) </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class="line">                    <span class="n">av_err2str</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span>
</span><span class="line">            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;num %d got_frame %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">num</span><span class="o">++</span><span class="p">,</span> <span class="o">*</span><span class="n">got_frame</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">got_frame</span><span class="p">){</span>
</span><span class="line">            <span class="n">av_image_copy</span><span class="p">(</span><span class="n">video_dst_data</span><span class="p">,</span> <span class="n">video_dst_linesize</span><span class="p">,</span>
</span><span class="line">                          <span class="p">(</span><span class="k">const</span> <span class="kt">uint8_t</span> <span class="o">**</span><span class="p">)(</span><span class="n">frame</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">),</span> <span class="n">frame</span><span class="o">-&gt;</span><span class="n">linesize</span><span class="p">,</span>
</span><span class="line">                          <span class="n">pix_fmt</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">            <span class="c1">//write to raw video file</span>
</span><span class="line">            <span class="n">fwrite</span><span class="p">(</span><span class="n">video_dst_data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">video_dst_bufsize</span><span class="p">,</span> <span class="n">video_dst_file</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">stream_index</span> <span class="o">==</span> <span class="n">audio_stream_idx</span><span class="p">){</span>
</span><span class="line">        <span class="c1">//decode audio frame</span>
</span><span class="line">        <span class="n">ret</span> <span class="o">=</span> <span class="n">avcodec_decode_audio4</span><span class="p">(</span><span class="n">audio_codec_ctx</span><span class="p">,</span> <span class="n">frame</span><span class="p">,</span> <span class="n">got_frame</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pkt</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Error decoding audio frame (%s)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">av_err2str</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span>
</span><span class="line">            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">got_frame</span><span class="p">){</span>
</span><span class="line">            <span class="kt">size_t</span> <span class="n">unpadded_linesize</span> <span class="o">=</span> <span class="n">frame</span><span class="o">-&gt;</span><span class="n">nb_samples</span> <span class="o">*</span> <span class="n">av_get_bytes_per_sample</span><span class="p">(</span><span class="n">frame</span><span class="o">-&gt;</span><span class="n">format</span><span class="p">);</span>
</span><span class="line">            <span class="n">fwrite</span><span class="p">(</span><span class="n">frame</span><span class="o">-&gt;</span><span class="n">extended_data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">unpadded_linesize</span><span class="p">,</span> <span class="n">audio_dst_file</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">FFMIN</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="n">pkt</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//allocate frame </span>
</span><span class="line"><span class="n">frame</span> <span class="o">=</span> <span class="n">av_frame_alloc</span><span class="p">();</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">frame</span><span class="p">){</span>
</span><span class="line">    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Could not allocate frame</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">av_init_packet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pkt</span><span class="p">);</span>
</span><span class="line"><span class="n">pkt</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="n">pkt</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//read frames from the file</span>
</span><span class="line"><span class="kt">int</span> <span class="n">got_frame</span><span class="p">;</span>
</span><span class="line"><span class="k">while</span><span class="p">(</span><span class="n">av_read_frame</span><span class="p">(</span><span class="n">fmt_ctx</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pkt</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">    <span class="n">AVPacket</span> <span class="n">orig_pkt</span> <span class="o">=</span> <span class="n">pkt</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">do</span><span class="p">{</span>
</span><span class="line">        <span class="n">ret</span> <span class="o">=</span> <span class="n">decode_packet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">got_frame</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="n">pkt</span><span class="p">.</span><span class="n">data</span> <span class="o">+=</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">        <span class="n">pkt</span><span class="p">.</span><span class="n">size</span> <span class="o">-=</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">pkt</span><span class="p">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">av_free_packet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">orig_pkt</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>解封装大致流程已经完成了，剩余的是一些收尾工作，例如释放刚刚分配的内存等。</p>

<p>完整实现过程请移步<a href="https://github.com/lazybing/ffmpeg-study-recording/blob/master/demuxer.c">解封在实现</a>.</p>

<h2 id="ffmpeg--4">FFMpeg 转码的实现</h2>

<h2 id="ffmpeg--5">FFMpeg 视频缩放实现</h2>

<p>针对视频的缩放，FFMpeg 提供了 libswscale 库，可以轻松实现视频的分辨率转换功能。除此之外，libswscale 库还可以
实现颜色空间转换的功能。</p>

<p>FFMpeg 中针对视频的缩放提供了一个示例代码，位于<code>doc\examples\scaling_video.c</code>中。分析该程序的流程大致分为如下几部分：</p>

<ol>
  <li>解析命令行参数，获取缩放的视频宽高，视频文件名。</li>
  <li>创建<code>SwsContext</code>结构体。</li>
  <li>分配源图像和目标图像的内存。</li>
  <li>将源图像进行转换为目标图像的大小。</li>
  <li>将缩放的图像写到输出文件中。</li>
  <li>收尾工作，释放分配的内存，关闭打开的文件。</li>
</ol>

<p>首先解析期望的视频宽高，示例代码中使用的是<code>av_parse_video_size</code>函数，该函数的声明如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">av_parse_video_size</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">width_ptr</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">height_ptr</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>解析 str，并将解析出来的宽高信息赋值给 width_ptr, height_ptr;其中：</p>

<ul>
  <li>str：待解析的字符串，可以是格式为<code>widthxheight</code>的字符串，或者是一个合法的视频大小描述。</li>
  <li>width_ptr,height_ptr,指向检测到的宽高变量的指针。</li>
  <li>返回值，成功返回大于0，失败返回负值。</li>
</ul>

<p>之后，创建<code>SwsContext</code>结构体，示例代码中使用的是<code>sws_getContext</code>函数，该函数声明如下：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">SwsContext</span> <span class="o">*</span><span class="nf">sws_getContext</span><span class="p">(</span><span class="kt">int</span> <span class="n">srcW</span><span class="p">,</span> <span class="kt">int</span> <span class="n">srcH</span><span class="p">,</span> <span class="k">enum</span> <span class="n">AVPixelFormat</span> <span class="n">srcFormat</span><span class="p">,</span>
</span><span class="line">                                  <span class="kt">int</span> <span class="n">dstW</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dstH</span><span class="p">,</span> <span class="k">enum</span> <span class="n">AVPixelFormat</span> <span class="n">dstFormat</span><span class="p">,</span>
</span><span class="line">                                  <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="n">SwsFilter</span> <span class="o">*</span><span class="n">srcFilter</span><span class="p">,</span>
</span><span class="line">                                  <span class="n">SwsFilter</span> <span class="o">*</span><span class="n">dstFilter</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="o">*</span><span class="n">param</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>该函数的作用是分配并返回一个<code>SwsContext</code>结构，后面如果需要实现缩放/转换操作时，需要使用<code>sws_scale</code>函数。其中：</p>

<ul>
  <li>srcW:源图像的宽</li>
  <li>srcH:源图像的高</li>
  <li>srcFormat:源图像的格式</li>
  <li>dstW:目标图像的宽</li>
  <li>dstH:目标图像的高</li>
  <li>dstFormat:目标图像的格式</li>
  <li>flags:指定了使用何种算法和选项进行缩放</li>
</ul>

<h2 id="ffmpeg--6">FFMpeg 添加水印实现</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFMPEG 源码分析：avformat_find_stream_info]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/25/avformat_find_stream_info/"/>
    <updated>2016-12-25T06:18:07-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/25/avformat_find_stream_info</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">函数声明</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">调用关系</a></li>
</ul>

<p><code>avformat_find_stream_info</code>主要是读媒体文件的包(packets)，然后从中提取出流的信息。
对于没有头部信息的文件格式尤其有用，比如<code>MPEG</code>。文件的逻辑位置不会被改变，读取出来
的包会被缓存起来供以后处理。</p>

<!--more-->

<h2 id="section">函数声明</h2>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int avformat_find_stream_info(AVFormatContext *ic, AVDictionary **options);</span></code></pre></td></tr></table></div></figure>
<p>返回值：&gt;=0–&gt;OK,或出错返回AVERROR_xxx</p>

<p>注意，该函数并不保证能够打开所有的 codec，因此将options 设置为非NULL用于返回一些信息是非常好的行为。</p>

<h2 id="section-1">调用关系</h2>

<p><img src="http://lazybing.github.io/images/avformat_find_stream_info/avformat_find_stream_info.png" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Addr2line 的介绍与使用]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/22/addr2line-use/"/>
    <updated>2016-12-22T07:26:02-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/22/addr2line-use</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#addr2line-" id="markdown-toc-addr2line-">addr2line 简介</a></li>
  <li><a href="#addr2line--1" id="markdown-toc-addr2line--1">addr2line 的使用示例</a></li>
  <li><a href="#addr2line--2" id="markdown-toc-addr2line--2">addr2line 的原理</a></li>
</ul>

<p><code>addr2line</code>的作用是将地址转化为文件名和行号。<br />
<!--more--></p>

<h2 id="addr2line-">addr2line 简介</h2>
<p>在编写程序时，经常会遇到出现程序 crah 的情况，此时如果有 core stack 打印出来还好，但如果没有 core stack 的话，debug 就会比较困难。addr2line 可以很好地解决这个问题。</p>

<p><code>addr2line</code>能够将地址转换为文件名和行号。给定一个可执行文件的地址或者一个可重定位目标的目标偏移，addr2line 就会利用 debug 信息来计算出与该地址关联的文件名和行号。</p>

<p>使用的可执行文件或可重定位目标使用<code>-e</code>选项来指定、可重定位目标的部分使用<code>-j</code>选项来指定。</p>

<p><code>addr2line</code>有两种操作模式：<br />
1. 在命令行下，直接指定十六进制的地址，addr2line 为每个地址显示文件名和行号。<br />
2. addr2line 从标准输入中读取十六进制地址，并且为每个地址输出文件名和行号到标准输出中。</p>

<p>输出格式为<code>FILENAME:LINENO</code>，默认情况下，每个输入地址对应一行输出。</p>

<h2 id="addr2line--1">addr2line 的使用示例</h2>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">div</span><span class="p">(</span><span class="kt">int</span> <span class="n">numerator</span><span class="p">,</span> <span class="kt">int</span> <span class="n">denominator</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">numerator</span> <span class="o">/</span> <span class="n">denominator</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">numerator</span>   <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">denominator</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">div</span><span class="p">(</span><span class="n">numerator</span><span class="p">,</span> <span class="n">denominator</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>编译：gcc -o div -g div.c
生成可执行文件<code>div</code>后，执行该文件：./div 得到如下error:</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Floating point exception (core dumped)</span></code></pre></td></tr></table></div></figure>

<p>此时并没有任何其他提示信息，我们可以通过<code>dmesg</code>查看信息：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[ 4709.210137] traps: div[2500] trap divide error ip:400524 sp:7ffcd27fd630 error:0 in div[400000+1000]</span></code></pre></td></tr></table></div></figure>
<p>通过该信息可以看出，ip 指向的地址为<code>400524</code>，得到该地址后，我们就可以使用 addr2line 来定位出错的位置。 
<code>addr2line -e div 400524</code> 得到结果如下：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/home/bing/work/study/div.c:5</span></code></pre></td></tr></table></div></figure>

<p>可以很直观的显示，该 core  dump 信息是在<code>div.c</code>的 line 5。</p>

<h2 id="addr2line--2">addr2line 的原理</h2>
<p><code>addr2line</code>之所以能够利用可执行文件将地址信息转换为行号，是因为在可执行 ELF 文件中存有这些对应的信息。可以使用<code>readelf</code>来查看这些信息。例如上面的<code>div</code>文件，通过readelf div 可以看到如下信息：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> Line Number Statements:
</span><span class="line">  [0x00000026]  Extended opcode 2: set Address to 0x400516
</span><span class="line">  [0x00000031]  Special opcode 8: advance Address by 0 to 0x400516 and Line by 3 to 4
</span><span class="line">  [0x00000032]  Special opcode 146: advance Address by 10 to 0x400520 and Line by 1 to 5
</span><span class="line">  [0x00000033]  Special opcode 104: advance Address by 7 to 0x400527 and Line by 1 to 6
</span><span class="line">  [0x00000034]  Special opcode 36: advance Address by 2 to 0x400529 and Line by 3 to 9
</span><span class="line">  [0x00000035]  Special opcode 216: advance Address by 15 to 0x400538 and Line by 1 to 10
</span><span class="line">  [0x00000036]  Special opcode 104: advance Address by 7 to 0x40053f and Line by 1 to 11
</span><span class="line">  [0x00000037]  Special opcode 105: advance Address by 7 to 0x400546 and Line by 2 to 13
</span><span class="line">  [0x00000038]  Special opcode 216: advance Address by 15 to 0x400555 and Line by 1 to 14
</span><span class="line">  [0x00000039]  Advance PC by 2 to 0x400557
</span><span class="line">  [0x0000003b]  Extended opcode 1: End of Sequence</span></code></pre></td></tr></table></div></figure>
<p>从上面可以看出到 addr 在 0x400520-0x400527之间时，行号为5.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFMPEG 源码分析：avcodec_decode_video2]]></title>
    <link href="http://lazybing.github.io/blog/2016/12/20/avcodec_decode_video/"/>
    <updated>2016-12-20T06:18:07-08:00</updated>
    <id>http://lazybing.github.io/blog/2016/12/20/avcodec_decode_video</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">函数声明</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">源码分析</a></li>
</ul>

<p><code>avcodec_decode_video</code>函数的作用是解码<code>AVPacket</code>中的压缩数据，解码为图像数据。
某些解码器支持在一个<code>AVPacket</code>中包含多帧，这类的解码器只解码第一帧。</p>

<!--more-->

<h2 id="section">函数声明</h2>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int avcodec_decode_video2(AVCodecContext *avctx, AVFrame *picture,
</span><span class="line">                         int *got_picture_ptr,
</span><span class="line">                         const AVPacket *avpkt);</span></code></pre></td></tr></table></div></figure>

<p>注意，输入内存的对齐字节(AV_INPUT_BUFFER_PADDING_SIZE)比实际读取字节要大，因为某些
最优流可能会读取 32 或 64 bits 每次。</p>

<p>在将压缩数据packets给到解码器之前，<code>AVCodecContext</code>必须用<code>avcodec_open2</code>设置过。</p>

<p>函数参数：</p>

<ul>
  <li><code>AVCodecContext *</code>。</li>
  <li><code>AVFrame *</code>存放解码的视频数据，它使用<code>av_frame_alloc</code>获得一个<code>AVFrame</code>。解码器会调用
<code>AVCodecContext.get_buffer2</code>回调函数为实际的位图分配内存。</li>
  <li><code>got_picture_ptr</code>,如果没有帧可以解码，该值被设为0。否则，它是非零值。</li>
  <li><code>AVPacket *</code>包含输入缓存。该结构体使用<code>av_init_packet</code>创建后会设置<code>data</code>和<code>size</code>，某些
解码器可能需要更多的字段,如<code>flags &amp; AV_PKT_FLAG_KEY</code>。解码器被设置为使用最少的字段。</li>
</ul>

<p>返回值：如果解码出错，返回负值；否则返回使用的字节数。</p>

<h2 id="section-1">源码分析</h2>

<p><code>avcodec_decode_video2</code>函数比较简单，主要做了以下几个工作：</p>

<ol>
  <li>对输入的字段进行一些列的检查工作，比如宽高是否正确，输入是否为视频等等。</li>
  <li>真正的解码，通过<code>avctx-&gt;codec-&gt;decode</code>实现，它会调用相应的<code>AVCodec</code>的 decode 函数，完成解码。</li>
  <li>对得到的<code>AVFrame</code>进行一些字段进行赋值，例如宽高、像素格式等等。</li>
</ol>

<figure class="code"><figcaption><span>avcodec_decode_video2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="n">attribute_align_arg</span> <span class="nf">avcodec_decode_video2</span><span class="p">(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AVFrame</span> <span class="o">*</span><span class="n">picture</span><span class="p">,</span>
</span><span class="line">                                              <span class="kt">int</span> <span class="o">*</span><span class="n">got_picture_ptr</span><span class="p">,</span>
</span><span class="line">                                              <span class="k">const</span> <span class="n">AVPacket</span> <span class="o">*</span><span class="n">avpkt</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="c1">//检测输入参数</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">codec</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">AVERROR</span><span class="p">(</span><span class="n">EINVAL</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">codec</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">AVMEDIA_TYPE_VIDEO</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">av_log</span><span class="p">(</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AV_LOG_ERROR</span><span class="p">,</span> <span class="s">&quot;Invalid media type for video</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="n">AVERROR</span><span class="p">(</span><span class="n">EINVAL</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">*</span><span class="n">got_picture_ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="p">((</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">coded_width</span> <span class="o">||</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">coded_height</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">av_image_check_size</span><span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">coded_width</span><span class="p">,</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">coded_height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">avctx</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">AVERROR</span><span class="p">(</span><span class="n">EINVAL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="c1">//真正的解码</span>
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">codec</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="n">avctx</span><span class="p">,</span> <span class="n">picture</span><span class="p">,</span> <span class="n">got_picture_ptr</span><span class="p">,</span>
</span><span class="line">            <span class="o">&amp;</span><span class="n">tmp</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="c1">//设置参数</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">codec</span><span class="o">-&gt;</span><span class="n">capabilities</span> <span class="o">&amp;</span> <span class="n">AV_CODEC_CAP_DR1</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">picture</span><span class="o">-&gt;</span><span class="n">sample_aspect_ratio</span><span class="p">.</span><span class="n">num</span><span class="p">)</span>    <span class="n">picture</span><span class="o">-&gt;</span><span class="n">sample_aspect_ratio</span> <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">sample_aspect_ratio</span><span class="p">;</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">picture</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">)</span>                      <span class="n">picture</span><span class="o">-&gt;</span><span class="n">width</span>               <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">;</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">picture</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span>                     <span class="n">picture</span><span class="o">-&gt;</span><span class="n">height</span>              <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">;</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">picture</span><span class="o">-&gt;</span><span class="n">format</span> <span class="o">==</span> <span class="n">AV_PIX_FMT_NONE</span><span class="p">)</span>   <span class="n">picture</span><span class="o">-&gt;</span><span class="n">format</span>              <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">pix_fmt</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>以H.265解码器为例，解码示例如下：</p>

<figure class="code"><figcaption><span>ff_hevc_decoder </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">AVCodec</span> <span class="n">ff_hevc_decoder</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">name</span>                  <span class="o">=</span> <span class="s">&quot;hevc&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">long_name</span>             <span class="o">=</span> <span class="n">NULL_IF_CONFIG_SMALL</span><span class="p">(</span><span class="s">&quot;HEVC (High Efficiency Video Coding)&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">type</span>                  <span class="o">=</span> <span class="n">AVMEDIA_TYPE_VIDEO</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">id</span>                    <span class="o">=</span> <span class="n">AV_CODEC_ID_HEVC</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_data_size</span>        <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HEVCContext</span><span class="p">),</span>
</span><span class="line">    <span class="p">.</span><span class="n">priv_class</span>            <span class="o">=</span> <span class="o">&amp;</span><span class="n">hevc_decoder_class</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">init</span>                  <span class="o">=</span> <span class="n">hevc_decode_init</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">close</span>                 <span class="o">=</span> <span class="n">hevc_decode_free</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">decode</span>                <span class="o">=</span> <span class="n">hevc_decode_frame</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">flush</span>                 <span class="o">=</span> <span class="n">hevc_decode_flush</span><span class="p">,</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>其中<code>hevc_decode_frame</code>是解码器的真正的解码函数，定义如下：</p>
<figure class="code"><figcaption><span>hevc_decode_frame </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">hevc_decode_frame</span><span class="p">(</span><span class="n">AVCodecContext</span> <span class="o">*</span><span class="n">avctx</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">got_output</span><span class="p">,</span>
</span><span class="line">                             <span class="n">AVPacket</span> <span class="o">*</span><span class="n">avpkt</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">    <span class="n">HEVCContext</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">priv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">avpkt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">ret</span> <span class="o">=</span> <span class="n">ff_hevc_output_frame</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="o">*</span><span class="n">got_output</span> <span class="o">=</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">s</span><span class="o">-&gt;</span><span class="n">ref</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="n">ret</span>    <span class="o">=</span> <span class="n">decode_nal_units</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">avpkt</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">avpkt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">hwaccel</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">ref</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ret</span> <span class="o">=</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">hwaccel</span><span class="o">-&gt;</span><span class="n">end_frame</span><span class="p">(</span><span class="n">avctx</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">av_log</span><span class="p">(</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AV_LOG_ERROR</span><span class="p">,</span>
</span><span class="line">                   <span class="s">&quot;hardware accelerator failed to decode picture</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">            <span class="n">ff_hevc_unref_frame</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">ref</span><span class="p">,</span> <span class="o">~</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="cm">/* verify the SEI checksum */</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">avctx</span><span class="o">-&gt;</span><span class="n">err_recognition</span> <span class="o">&amp;</span> <span class="n">AV_EF_CRCCHECK</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">is_decoded</span> <span class="o">&amp;&amp;</span>
</span><span class="line">            <span class="n">s</span><span class="o">-&gt;</span><span class="n">is_md5</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">ret</span> <span class="o">=</span> <span class="n">verify_md5</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">ref</span><span class="o">-&gt;</span><span class="n">frame</span><span class="p">);</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">avctx</span><span class="o">-&gt;</span><span class="n">err_recognition</span> <span class="o">&amp;</span> <span class="n">AV_EF_EXPLODE</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="n">ff_hevc_unref_frame</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">ref</span><span class="p">,</span> <span class="o">~</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">                <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">s</span><span class="o">-&gt;</span><span class="n">is_md5</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">is_decoded</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">av_log</span><span class="p">(</span><span class="n">avctx</span><span class="p">,</span> <span class="n">AV_LOG_DEBUG</span><span class="p">,</span> <span class="s">&quot;Decoded frame with POC %d.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">poc</span><span class="p">);</span>
</span><span class="line">        <span class="n">s</span><span class="o">-&gt;</span><span class="n">is_decoded</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">output_frame</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="n">av_frame_move_ref</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">output_frame</span><span class="p">);</span>
</span><span class="line">        <span class="o">*</span><span class="n">got_output</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">avpkt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
